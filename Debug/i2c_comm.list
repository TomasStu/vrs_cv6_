
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080069e0  080069e0  000169e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08006e14  08006e14  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e14  08006e14  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08006e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001cc  08006fe8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08006fe8  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000633d  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac2  00000000  00000000  0002657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  00028040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000672  00000000  00000000  00028928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004923  00000000  00000000  00028f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000081de  00000000  00000000  0002d8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075911  00000000  00000000  00035a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036d4  00000000  00000000  000ab3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000aea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069c4 	.word	0x080069c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	080069c4 	.word	0x080069c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	fab3 f383 	clz	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	401a      	ands	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fb01 f303 	mul.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	605a      	str	r2, [r3, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b089      	sub	sp, #36	; 0x24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa93 f3a3 	rbit	r3, r3
 8000cec:	613b      	str	r3, [r7, #16]
  return(result);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2103      	movs	r1, #3
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return(result);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa93 f3a3 	rbit	r3, r3
 8000d64:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	60da      	str	r2, [r3, #12]
}
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b089      	sub	sp, #36	; 0x24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6a1a      	ldr	r2, [r3, #32]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	613b      	str	r3, [r7, #16]
  return(result);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fab3 f383 	clz	r3, r3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	210f      	movs	r1, #15
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000dd4:	bf00      	nop
 8000dd6:	3724      	adds	r7, #36	; 0x24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	210f      	movs	r1, #15
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b088      	sub	sp, #32
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e66:	e048      	b.n	8000efa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d03a      	beq.n	8000ef4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69b9      	ldr	r1, [r7, #24]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fede 	bl	8000c48 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d003      	beq.n	8000e9c <LL_GPIO_Init+0x5e>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d106      	bne.n	8000eaa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff14 	bl	8000cd2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff3a 	bl	8000d2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d119      	bne.n	8000ef4 <LL_GPIO_Init+0xb6>
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d807      	bhi.n	8000ee6 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff51 	bl	8000d86 <LL_GPIO_SetAFPin_0_7>
 8000ee4:	e006      	b.n	8000ef4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	461a      	mov	r2, r3
 8000eec:	69b9      	ldr	r1, [r7, #24]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff76 	bl	8000de0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1af      	bne.n	8000e68 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d003      	beq.n	8000f18 <LL_GPIO_Init+0xda>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d107      	bne.n	8000f28 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	461a      	mov	r2, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff febd 	bl	8000ca2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0201 	bic.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0219      	lsls	r1, r3, #8
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff65 	bl	8000f52 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6899      	ldr	r1, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff6d 	bl	8000f72 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb6 	bl	8001010 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff44 	bl	8000f32 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa0 	bl	8000ff0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6919      	ldr	r1, [r3, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff70 	bl	8000fa0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff81 	bl	8000fd0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa9 	bl	800102c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffb6 	bl	8001052 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_RCC_HSI_IsReady+0x20>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_RCC_LSE_IsReady+0x20>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b02      	cmp	r3, #2
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000

08001138 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <LL_RCC_GetSysClkSource+0x18>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <LL_RCC_GetAHBPrescaler+0x18>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <LL_RCC_GetUSARTClockSource+0x28>)
 80011b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b4:	2103      	movs	r1, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	401a      	ands	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	4313      	orrs	r3, r2
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000

080011d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <LL_RCC_PLL_GetMainSource+0x18>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <LL_RCC_PLL_GetPrediv+0x18>)
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	f003 030f 	and.w	r3, r3, #15
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001230:	f000 f862 	bl	80012f8 <RCC_GetSystemClockFreq>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f880 	bl	8001344 <RCC_GetHCLKClockFreq>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f88e 	bl	8001370 <RCC_GetPCLK1ClockFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f89a 	bl	8001398 <RCC_GetPCLK2ClockFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60da      	str	r2, [r3, #12]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d130      	bne.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff8e 	bl	80011a8 <LL_RCC_GetUSARTClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b03      	cmp	r3, #3
 8001290:	d00a      	beq.n	80012a8 <LL_RCC_GetUSARTClockFreq+0x34>
 8001292:	2b03      	cmp	r3, #3
 8001294:	d819      	bhi.n	80012ca <LL_RCC_GetUSARTClockFreq+0x56>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d002      	beq.n	80012a0 <LL_RCC_GetUSARTClockFreq+0x2c>
 800129a:	2b02      	cmp	r3, #2
 800129c:	d00c      	beq.n	80012b8 <LL_RCC_GetUSARTClockFreq+0x44>
 800129e:	e014      	b.n	80012ca <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80012a0:	f000 f82a 	bl	80012f8 <RCC_GetSystemClockFreq>
 80012a4:	60f8      	str	r0, [r7, #12]
        break;
 80012a6:	e01f      	b.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80012a8:	f7ff ff22 	bl	80010f0 <LL_RCC_HSI_IsReady>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d017      	beq.n	80012e2 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <LL_RCC_GetUSARTClockFreq+0x80>)
 80012b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012b6:	e014      	b.n	80012e2 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80012b8:	f7ff ff2c 	bl	8001114 <LL_RCC_LSE_IsReady>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d011      	beq.n	80012e6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 80012c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012c8:	e00d      	b.n	80012e6 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80012ca:	f000 f815 	bl	80012f8 <RCC_GetSystemClockFreq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f837 	bl	8001344 <RCC_GetHCLKClockFreq>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f849 	bl	8001370 <RCC_GetPCLK1ClockFreq>
 80012de:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80012e0:	e002      	b.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80012e2:	bf00      	nop
 80012e4:	e000      	b.n	80012e8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80012e6:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	007a1200 	.word	0x007a1200

080012f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001302:	f7ff ff19 	bl	8001138 <LL_RCC_GetSysClkSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b08      	cmp	r3, #8
 800130a:	d00c      	beq.n	8001326 <RCC_GetSystemClockFreq+0x2e>
 800130c:	2b08      	cmp	r3, #8
 800130e:	d80e      	bhi.n	800132e <RCC_GetSystemClockFreq+0x36>
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <RCC_GetSystemClockFreq+0x22>
 8001314:	2b04      	cmp	r3, #4
 8001316:	d003      	beq.n	8001320 <RCC_GetSystemClockFreq+0x28>
 8001318:	e009      	b.n	800132e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <RCC_GetSystemClockFreq+0x48>)
 800131c:	607b      	str	r3, [r7, #4]
      break;
 800131e:	e009      	b.n	8001334 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <RCC_GetSystemClockFreq+0x48>)
 8001322:	607b      	str	r3, [r7, #4]
      break;
 8001324:	e006      	b.n	8001334 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001326:	f000 f84b 	bl	80013c0 <RCC_PLL_GetFreqDomain_SYS>
 800132a:	6078      	str	r0, [r7, #4]
      break;
 800132c:	e002      	b.n	8001334 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <RCC_GetSystemClockFreq+0x48>)
 8001330:	607b      	str	r3, [r7, #4]
      break;
 8001332:	bf00      	nop
  }

  return frequency;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	007a1200 	.word	0x007a1200

08001344 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800134c:	f7ff ff02 	bl	8001154 <LL_RCC_GetAHBPrescaler>
 8001350:	4603      	mov	r3, r0
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <RCC_GetHCLKClockFreq+0x28>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	40d3      	lsrs	r3, r2
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08006a68 	.word	0x08006a68

08001370 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001378:	f7ff fefa 	bl	8001170 <LL_RCC_GetAPB1Prescaler>
 800137c:	4603      	mov	r3, r0
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <RCC_GetPCLK1ClockFreq+0x24>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	40d3      	lsrs	r3, r2
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	08006a78 	.word	0x08006a78

08001398 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80013a0:	f7ff fef4 	bl	800118c <LL_RCC_GetAPB2Prescaler>
 80013a4:	4603      	mov	r3, r0
 80013a6:	0adb      	lsrs	r3, r3, #11
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <RCC_GetPCLK2ClockFreq+0x24>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	40d3      	lsrs	r3, r2
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	08006a78 	.word	0x08006a78

080013c0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80013ce:	f7ff ff01 	bl	80011d4 <LL_RCC_PLL_GetMainSource>
 80013d2:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d003      	beq.n	80013ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80013e2:	e005      	b.n	80013f0 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80013e6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80013e8:	e005      	b.n	80013f6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80013ec:	60fb      	str	r3, [r7, #12]
      break;
 80013ee:	e002      	b.n	80013f6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80013f2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80013f4:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80013f6:	f7ff ff09 	bl	800120c <LL_RCC_PLL_GetPrediv>
 80013fa:	4603      	mov	r3, r0
 80013fc:	3301      	adds	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	fbb2 f4f3 	udiv	r4, r2, r3
 8001404:	f7ff fef4 	bl	80011f0 <LL_RCC_PLL_GetMultiplicator>
 8001408:	4603      	mov	r3, r0
 800140a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800140e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001412:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	603a      	str	r2, [r7, #0]
  return(result);
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	fab2 f282 	clz	r2, r2
 8001422:	40d3      	lsrs	r3, r2
 8001424:	3302      	adds	r3, #2
 8001426:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	003d0900 	.word	0x003d0900
 8001438:	007a1200 	.word	0x007a1200

0800143c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80014ae:	b4b0      	push	{r4, r5, r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c2:	d114      	bne.n	80014ee <LL_USART_SetBaudRate+0x40>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	005a      	lsls	r2, r3, #1
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	441a      	add	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80014d8:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80014dc:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014de:	086b      	lsrs	r3, r5, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80014ec:	e00a      	b.n	8001504 <LL_USART_SetBaudRate+0x56>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	085a      	lsrs	r2, r3, #1
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	441a      	add	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bcb0      	pop	{r4, r5, r7}
 800150c:	4770      	bx	lr
	...

08001510 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff8a 	bl	800143c <LL_USART_IsEnabled>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d14e      	bne.n	80015cc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <LL_USART_Init+0xc8>)
 8001534:	4013      	ands	r3, r2
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	6851      	ldr	r1, [r2, #4]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	68d2      	ldr	r2, [r2, #12]
 800153e:	4311      	orrs	r1, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	6912      	ldr	r2, [r2, #16]
 8001544:	4311      	orrs	r1, r2
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	6992      	ldr	r2, [r2, #24]
 800154a:	430a      	orrs	r2, r1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff82 	bl	8001462 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff8f 	bl	8001488 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <LL_USART_Init+0xcc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d104      	bne.n	800157c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fe7e 	bl	8001274 <LL_RCC_GetUSARTClockFreq>
 8001578:	61b8      	str	r0, [r7, #24]
 800157a:	e016      	b.n	80015aa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <LL_USART_Init+0xd0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d107      	bne.n	8001594 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe4d 	bl	8001228 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e00a      	b.n	80015aa <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <LL_USART_Init+0xd4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d106      	bne.n	80015aa <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fe41 	bl	8001228 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00d      	beq.n	80015cc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff71 	bl	80014ae <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	efff69f3 	.word	0xefff69f3
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40004800 	.word	0x40004800

080015e8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <LL_InitTick+0x30>)
 80015fc:	3b01      	subs	r3, #1
 80015fe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_InitTick+0x30>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <LL_InitTick+0x30>)
 8001608:	2205      	movs	r2, #5
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e010 	.word	0xe000e010

0800161c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffdd 	bl	80015e8 <LL_InitTick>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <LL_mDelay+0x48>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001646:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164e:	d00c      	beq.n	800166a <LL_mDelay+0x32>
  {
    Delay++;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001656:	e008      	b.n	800166a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <LL_mDelay+0x48>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <LL_mDelay+0x32>
    {
      Delay--;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
  while (Delay)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f3      	bne.n	8001658 <LL_mDelay+0x20>
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <LL_SetSystemCoreClock+0x1c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <htsInit>:

int16_t T0_OUT, T1_OUT;
float T0_degC, T1_degC;


void htsInit(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	if (whoAmI()){
 80016a8:	f000 f80c 	bl	80016c4 <whoAmI>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <htsInit+0x1c>
		i2c_send_byte(HTS221_WRITE_ADDRESS,CTRL_REG1_ADDRES, INIT_REG1);
 80016b2:	2287      	movs	r2, #135	; 0x87
 80016b4:	2120      	movs	r1, #32
 80016b6:	20be      	movs	r0, #190	; 0xbe
 80016b8:	f000 fdb0 	bl	800221c <i2c_send_byte>
		tempInit();
 80016bc:	f000 f810 	bl	80016e0 <tempInit>
	}

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <whoAmI>:

uint8_t whoAmI(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	if (i2c_master_read_byte(HTS221_READ_ADDRESS, HTS221_WHO_AM_I_ADDRES) == HTS221_WHO_AM_I_VALUE){
 80016c8:	210f      	movs	r1, #15
 80016ca:	20bf      	movs	r0, #191	; 0xbf
 80016cc:	f000 fcd6 	bl	800207c <i2c_master_read_byte>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2bbc      	cmp	r3, #188	; 0xbc
 80016d4:	d101      	bne.n	80016da <whoAmI+0x16>
		return 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <whoAmI+0x18>
	}else return 0;
 80016da:	2300      	movs	r3, #0

}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}

080016e0 <tempInit>:
void tempInit(){
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
	 	uint8_t T0_degC_x8, T1_degC_x8;
	    uint8_t T0_T1_msb;

	    // Read calibration coefficients
	    T0_degC_x8 = i2c_master_read_byte(HTS221_READ_ADDRESS, T0_degC_x8_ADDR);
 80016e6:	2132      	movs	r1, #50	; 0x32
 80016e8:	20bf      	movs	r0, #191	; 0xbf
 80016ea:	f000 fcc7 	bl	800207c <i2c_master_read_byte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	    T1_degC_x8 = i2c_master_read_byte(HTS221_READ_ADDRESS, T1_degC_x8_ADDR);
 80016f2:	2133      	movs	r1, #51	; 0x33
 80016f4:	20bf      	movs	r0, #191	; 0xbf
 80016f6:	f000 fcc1 	bl	800207c <i2c_master_read_byte>
 80016fa:	4603      	mov	r3, r0
 80016fc:	71bb      	strb	r3, [r7, #6]
	    T0_T1_msb = i2c_master_read_byte(HTS221_READ_ADDRESS, T0_T1_MSB_ADDR);
 80016fe:	2135      	movs	r1, #53	; 0x35
 8001700:	20bf      	movs	r0, #191	; 0xbf
 8001702:	f000 fcbb 	bl	800207c <i2c_master_read_byte>
 8001706:	4603      	mov	r3, r0
 8001708:	717b      	strb	r3, [r7, #5]

	    T0_degC = (T0_degC_x8 + ((T0_T1_msb & 0x03) << 8)) / 8.0;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001714:	4413      	add	r3, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff04 	bl	8000524 <__aeabi_i2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <tempInit+0xd4>)
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa3b 	bl	8000ba8 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <tempInit+0xd8>)
 8001736:	6013      	str	r3, [r2, #0]
	    T1_degC = (T1_degC_x8 + ((T0_T1_msb & 0x0C) << 6)) / 8.0;
 8001738:	79ba      	ldrb	r2, [r7, #6]
 800173a:	797b      	ldrb	r3, [r7, #5]
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001742:	4413      	add	r3, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_i2d>
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <tempInit+0xd4>)
 8001750:	f7ff f87c 	bl	800084c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa24 	bl	8000ba8 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <tempInit+0xdc>)
 8001764:	6013      	str	r3, [r2, #0]

	    T0_OUT = (i2c_master_read_byte(HTS221_READ_ADDRESS, T0_OUT_L_ADDR) | (i2c_master_read_byte(HTS221_READ_ADDRESS, T0_OUT_H_ADDR) << 8));
 8001766:	213c      	movs	r1, #60	; 0x3c
 8001768:	20bf      	movs	r0, #191	; 0xbf
 800176a:	f000 fc87 	bl	800207c <i2c_master_read_byte>
 800176e:	4603      	mov	r3, r0
 8001770:	b21c      	sxth	r4, r3
 8001772:	213d      	movs	r1, #61	; 0x3d
 8001774:	20bf      	movs	r0, #191	; 0xbf
 8001776:	f000 fc81 	bl	800207c <i2c_master_read_byte>
 800177a:	4603      	mov	r3, r0
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21b      	sxth	r3, r3
 8001780:	4323      	orrs	r3, r4
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <tempInit+0xe0>)
 8001786:	801a      	strh	r2, [r3, #0]
	    T1_OUT = (i2c_master_read_byte(HTS221_READ_ADDRESS, T1_OUT_L_ADDR) | (i2c_master_read_byte(HTS221_READ_ADDRESS, T1_OUT_H_ADDR) << 8));
 8001788:	213e      	movs	r1, #62	; 0x3e
 800178a:	20bf      	movs	r0, #191	; 0xbf
 800178c:	f000 fc76 	bl	800207c <i2c_master_read_byte>
 8001790:	4603      	mov	r3, r0
 8001792:	b21c      	sxth	r4, r3
 8001794:	213f      	movs	r1, #63	; 0x3f
 8001796:	20bf      	movs	r0, #191	; 0xbf
 8001798:	f000 fc70 	bl	800207c <i2c_master_read_byte>
 800179c:	4603      	mov	r3, r0
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4323      	orrs	r3, r4
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <tempInit+0xe4>)
 80017a8:	801a      	strh	r2, [r3, #0]

}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd90      	pop	{r4, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40200000 	.word	0x40200000
 80017b8:	200001ec 	.word	0x200001ec
 80017bc:	200001f0 	.word	0x200001f0
 80017c0:	200001e8 	.word	0x200001e8
 80017c4:	200001ea 	.word	0x200001ea

080017c8 <rawTemp>:

float rawTemp(){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	uint8_t bufferik[2];

	i2c_master_read_bytes(HTS221_READ_ADDRESS, TEMP_OUT_L_ADDRES,bufferik, 2);
 80017ce:	1d3a      	adds	r2, r7, #4
 80017d0:	2302      	movs	r3, #2
 80017d2:	212a      	movs	r1, #42	; 0x2a
 80017d4:	20bf      	movs	r0, #191	; 0xbf
 80017d6:	f000 fcad 	bl	8002134 <i2c_master_read_bytes>

	return (bufferik[1] << 8) | bufferik[0];
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	793a      	ldrb	r2, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <returnTemp>:


float returnTemp(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	int16_t TEMP_OUT = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	80fb      	strh	r3, [r7, #6]

	if (whoAmI()){
 80017fe:	f7ff ff61 	bl	80016c4 <whoAmI>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <returnTemp+0x26>
		TEMP_OUT = rawTemp();
 8001808:	f7ff ffde 	bl	80017c8 <rawTemp>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	ee17 3a90 	vmov	r3, s15
 8001818:	80fb      	strh	r3, [r7, #6]
	}

	return ((TEMP_OUT - T0_OUT) * (T1_degC - T0_degC)) / (float)(T1_OUT - T0_OUT) + T0_degC;
 800181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <returnTemp+0x80>)
 8001820:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <returnTemp+0x84>)
 8001830:	edd3 6a00 	vldr	s13, [r3]
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <returnTemp+0x88>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800183e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <returnTemp+0x8c>)
 8001844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001848:	461a      	mov	r2, r3
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <returnTemp+0x80>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <returnTemp+0x88>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee77 7a27 	vadd.f32	s15, s14, s15


}
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001e8 	.word	0x200001e8
 8001878:	200001f0 	.word	0x200001f0
 800187c:	200001ec 	.word	0x200001ec
 8001880:	200001ea 	.word	0x200001ea

08001884 <returnHum>:
	return (humBuffer[1] << 8) | humBuffer[0];


}

float returnHum() {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0

		uint8_t humBuffer[2];
		float humidity = 0;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

		if (whoAmI()){
 8001890:	f7ff ff18 	bl	80016c4 <whoAmI>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d07b      	beq.n	8001992 <returnHum+0x10e>


		i2c_master_read_bytes(HTS221_READ_ADDRESS, HUMIDITY_OUT_L_ADDRESS,humBuffer, 2);
 800189a:	463a      	mov	r2, r7
 800189c:	2302      	movs	r3, #2
 800189e:	2128      	movs	r1, #40	; 0x28
 80018a0:	20bf      	movs	r0, #191	; 0xbf
 80018a2:	f000 fc47 	bl	8002134 <i2c_master_read_bytes>


		uint8_t H0_rH_x2 = i2c_master_read_byte(HTS221_READ_ADDRESS, H0_rH_x2_ADDRESS);
 80018a6:	2130      	movs	r1, #48	; 0x30
 80018a8:	20bf      	movs	r0, #191	; 0xbf
 80018aa:	f000 fbe7 	bl	800207c <i2c_master_read_byte>
 80018ae:	4603      	mov	r3, r0
 80018b0:	74fb      	strb	r3, [r7, #19]
	    uint8_t H1_rH_x2 = i2c_master_read_byte(HTS221_READ_ADDRESS, H1_rH_x2_ADDRESS);
 80018b2:	2131      	movs	r1, #49	; 0x31
 80018b4:	20bf      	movs	r0, #191	; 0xbf
 80018b6:	f000 fbe1 	bl	800207c <i2c_master_read_byte>
 80018ba:	4603      	mov	r3, r0
 80018bc:	74bb      	strb	r3, [r7, #18]

	    int16_t H0_T0_out = ((int16_t)i2c_master_read_byte(HTS221_READ_ADDRESS, H0_T0_OUT_H_ADDRESS) << 8)
 80018be:	2137      	movs	r1, #55	; 0x37
 80018c0:	20bf      	movs	r0, #191	; 0xbf
 80018c2:	f000 fbdb 	bl	800207c <i2c_master_read_byte>
 80018c6:	4603      	mov	r3, r0
 80018c8:	021b      	lsls	r3, r3, #8
	                      | humBuffer[0];
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	783b      	ldrb	r3, [r7, #0]
 80018ce:	b21b      	sxth	r3, r3
	    int16_t H0_T0_out = ((int16_t)i2c_master_read_byte(HTS221_READ_ADDRESS, H0_T0_OUT_H_ADDRESS) << 8)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	823b      	strh	r3, [r7, #16]
	    int16_t H1_T0_out = ((int16_t)i2c_master_read_byte(HTS221_READ_ADDRESS, H1_T0_OUT_H_ADDRESS) << 8)
 80018d4:	213b      	movs	r1, #59	; 0x3b
 80018d6:	20bf      	movs	r0, #191	; 0xbf
 80018d8:	f000 fbd0 	bl	800207c <i2c_master_read_byte>
 80018dc:	4603      	mov	r3, r0
 80018de:	021b      	lsls	r3, r3, #8
	                      | humBuffer[0];
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	783b      	ldrb	r3, [r7, #0]
 80018e4:	b21b      	sxth	r3, r3
	    int16_t H1_T0_out = ((int16_t)i2c_master_read_byte(HTS221_READ_ADDRESS, H1_T0_OUT_H_ADDRESS) << 8)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	81fb      	strh	r3, [r7, #14]

	    int16_t H_T_out = ((int16_t)humBuffer[1] << 8)
 80018ea:	787b      	ldrb	r3, [r7, #1]
 80018ec:	021b      	lsls	r3, r3, #8
	                    | humBuffer[0];
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	783b      	ldrb	r3, [r7, #0]
 80018f2:	b21b      	sxth	r3, r3
	    int16_t H_T_out = ((int16_t)humBuffer[1] << 8)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	81bb      	strh	r3, [r7, #12]

	    float H0_rH = H0_rH_x2 / 2.0f;
 80018f8:	7cfb      	ldrb	r3, [r7, #19]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001902:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190a:	edc7 7a02 	vstr	s15, [r7, #8]
	    float H1_rH = H1_rH_x2 / 2.0f;
 800190e:	7cbb      	ldrb	r3, [r7, #18]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001918:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800191c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001920:	edc7 7a01 	vstr	s15, [r7, #4]

	    humidity = ((H_T_out - H0_T0_out) * (H1_rH - H0_rH)) / (H1_T0_out - H0_T0_out) + H0_rH;
 8001924:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001928:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	edd7 6a01 	vldr	s13, [r7, #4]
 800193a:	edd7 7a02 	vldr	s15, [r7, #8]
 800193e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001942:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001946:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800194a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	edc7 7a05 	vstr	s15, [r7, #20]

	    if (humidity > 100.0f) humidity = 100.0f;
 8001968:	edd7 7a05 	vldr	s15, [r7, #20]
 800196c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80019a4 <returnHum+0x120>
 8001970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dd01      	ble.n	800197e <returnHum+0xfa>
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <returnHum+0x124>)
 800197c:	617b      	str	r3, [r7, #20]
	    if (humidity < 0.0f) humidity = 0.0f;
 800197e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d502      	bpl.n	8001992 <returnHum+0x10e>
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
		}

	    return humidity;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	ee07 3a90 	vmov	s15, r3
}
 8001998:	eeb0 0a67 	vmov.f32	s0, s15
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	42c80000 	.word	0x42c80000
 80019a8:	42c80000 	.word	0x42c80000

080019ac <returnHeight>:
const float R = 8.31432;
const float g = 9.80665;
const float M = 0.0289644;
const float L = -0.0065;

float returnHeight(){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	if (whoAmILPS()){
 80019b0:	f000 f866 	bl	8001a80 <whoAmILPS>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <returnHeight+0x18>
		return calculateHeight();
 80019ba:	f000 f80b 	bl	80019d4 <calculateHeight>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	e001      	b.n	80019c8 <returnHeight+0x1c>
	}else return 0.0;
 80019c4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80019d0 <returnHeight+0x24>
}
 80019c8:	eeb0 0a67 	vmov.f32	s0, s15
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	00000000 	.word	0x00000000

080019d4 <calculateHeight>:


float calculateHeight(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	ed2d 8b02 	vpush	{d8}
 80019da:	af00      	add	r7, sp, #0
		returnPressure();
 80019dc:	f000 f874 	bl	8001ac8 <returnPressure>
	    return (T / L) * (1 - powf(lastHeight  / firstHeight , (R * L) / (g * M)));
 80019e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001a40 <calculateHeight+0x6c>
 80019e4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001a44 <calculateHeight+0x70>
 80019e8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <calculateHeight+0x74>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <calculateHeight+0x78>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019fc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a50 <calculateHeight+0x7c>
 8001a00:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001a44 <calculateHeight+0x70>
 8001a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a08:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8001a54 <calculateHeight+0x80>
 8001a0c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001a58 <calculateHeight+0x84>
 8001a10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a14:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001a18:	eef0 0a46 	vmov.f32	s1, s12
 8001a1c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a20:	f004 fc0e 	bl	8006240 <powf>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a30:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	ecbd 8b02 	vpop	{d8}
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	43901333 	.word	0x43901333
 8001a44:	bbd4fdf4 	.word	0xbbd4fdf4
 8001a48:	200001f8 	.word	0x200001f8
 8001a4c:	200001f4 	.word	0x200001f4
 8001a50:	41050774 	.word	0x41050774
 8001a54:	411ce80a 	.word	0x411ce80a
 8001a58:	3ced46c0 	.word	0x3ced46c0

08001a5c <lpsInit>:

void lpsInit(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	i2c_send_byte(LPS25HB_WRITE_ADDRESS, LPS25HB_CTRL_REG1 , LPS25HB_INIT_REG1);
 8001a60:	2290      	movs	r2, #144	; 0x90
 8001a62:	2120      	movs	r1, #32
 8001a64:	20ba      	movs	r0, #186	; 0xba
 8001a66:	f000 fbd9 	bl	800221c <i2c_send_byte>
	firstHeight = returnPressure();
 8001a6a:	f000 f82d 	bl	8001ac8 <returnPressure>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
 8001a72:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <lpsInit+0x20>)
 8001a74:	edc3 7a00 	vstr	s15, [r3]
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200001f4 	.word	0x200001f4

08001a80 <whoAmILPS>:

uint8_t whoAmILPS(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	if (i2c_master_read_byte(LPS25HB_READ_ADDRESS, LPS25HB_WHO_AM_I_ADDRES) == LPS25HB_WHO_AM_I_VALUE){
 8001a84:	210f      	movs	r1, #15
 8001a86:	20bb      	movs	r0, #187	; 0xbb
 8001a88:	f000 faf8 	bl	800207c <i2c_master_read_byte>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2bbd      	cmp	r3, #189	; 0xbd
 8001a90:	d101      	bne.n	8001a96 <whoAmILPS+0x16>
		return 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <whoAmILPS+0x18>
	}else return 0;
 8001a96:	2300      	movs	r3, #0

}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <rawPressure>:

int32_t rawPressure() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
    uint8_t buffer[3];
    i2c_master_read_bytes(LPS25HB_READ_ADDRESS, PRESS_OUT_XL_ADDRES,buffer, 3);
 8001aa2:	463a      	mov	r2, r7
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	2128      	movs	r1, #40	; 0x28
 8001aa8:	20bb      	movs	r0, #187	; 0xbb
 8001aaa:	f000 fb43 	bl	8002134 <i2c_master_read_bytes>

    int32_t raw_pressure = (int32_t)buffer[2] << 16 | (int32_t)buffer[1] << 8 | buffer[0];
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	787b      	ldrb	r3, [r7, #1]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	783a      	ldrb	r2, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	607b      	str	r3, [r7, #4]

    return raw_pressure;
 8001abe:	687b      	ldr	r3, [r7, #4]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <returnPressure>:

float returnPressure(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	float pressure_hPa = 0;
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]

	if (whoAmILPS()){
 8001ad4:	f7ff ffd4 	bl	8001a80 <whoAmILPS>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d012      	beq.n	8001b04 <returnPressure+0x3c>
		float raw_pressure = rawPressure();
 8001ade:	f7ff ffdd 	bl	8001a9c <rawPressure>
 8001ae2:	ee07 0a90 	vmov	s15, r0
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	edc7 7a00 	vstr	s15, [r7]

		pressure_hPa = raw_pressure / 4096.0f;
 8001aee:	ed97 7a00 	vldr	s14, [r7]
 8001af2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b14 <returnPressure+0x4c>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	edc7 7a01 	vstr	s15, [r7, #4]

		lastHeight = pressure_hPa;
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <returnPressure+0x50>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6013      	str	r3, [r2, #0]
	}


	return pressure_hPa;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	ee07 3a90 	vmov	s15, r3
}
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	45800000 	.word	0x45800000
 8001b18:	200001f8 	.word	0x200001f8

08001b1c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40021000 	.word	0x40021000

08001b4c <LL_GPIO_SetPinMode>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	613b      	str	r3, [r7, #16]
  return(result);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2103      	movs	r1, #3
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	431a      	orrs	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bc8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001bcc:	f7ff ffa6 	bl	8001b1c <LL_AHB1_GRP1_EnableClock>

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_GPIO_Init+0x24>)
 8001bd6:	f7ff ffb9 	bl	8001b4c <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001bda:	2108      	movs	r1, #8
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <MX_GPIO_Init+0x24>)
 8001bde:	f7ff ffe2 	bl	8001ba6 <LL_GPIO_SetOutputPin>

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	48000400 	.word	0x48000400

08001bec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <NVIC_EnableIRQ+0x30>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da0b      	bge.n	8001c68 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <NVIC_SetPriority+0x4c>)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	3b04      	subs	r3, #4
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c66:	e009      	b.n	8001c7c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <NVIC_SetPriority+0x50>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_I2C_Enable>:
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f043 0201 	orr.w	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_I2C_EnableClockStretching>:
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_I2C_DisableGeneralCall>:
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_I2C_SetOwnAddress2>:
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d6a:	f023 0306 	bic.w	r3, r3, #6
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	60da      	str	r2, [r3, #12]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_I2C_DisableOwnAddress2>:
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_I2C_EnableIT_RX>:
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f043 0204 	orr.w	r2, r3, #4
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_I2C_DisableIT_RX>:
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0204 	bic.w	r2, r3, #4
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_I2C_IsActiveFlag_TXIS>:
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_I2C_IsActiveFlag_RXNE>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_I2C_IsActiveFlag_STOP>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_I2C_ClearFlag_NACK>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	61da      	str	r2, [r3, #28]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_I2C_ClearFlag_STOP>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	61da      	str	r2, [r3, #28]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_I2C_EnableAutoEndMode>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	605a      	str	r2, [r3, #4]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	0d5b      	lsrs	r3, r3, #21
 8001ece:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <LL_I2C_HandleTransfer+0x48>)
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4319      	orrs	r1, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	4319      	orrs	r1, r3
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4319      	orrs	r1, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	03ff7bff 	.word	0x03ff7bff

08001f04 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	b2db      	uxtb	r3, r3
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_AHB1_GRP1_EnableClock>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000

08001f6c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40021000 	.word	0x40021000

08001f9c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fc6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fca:	f7ff ffb7 	bl	8001f3c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4821      	ldr	r0, [pc, #132]	; (8002070 <MX_I2C1_Init+0xd4>)
 8001fec:	f7fe ff27 	bl	8000e3e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001ff0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ff4:	f7ff ffba 	bl	8001f6c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ff8:	f7ff fdf8 	bl	8001bec <NVIC_GetPriorityGrouping>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe44 	bl	8001c90 <NVIC_EncodePriority>
 8002008:	4603      	mov	r3, r0
 800200a:	4619      	mov	r1, r3
 800200c:	201f      	movs	r0, #31
 800200e:	f7ff fe15 	bl	8001c3c <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002012:	201f      	movs	r0, #31
 8002014:	f7ff fdf8 	bl	8001c08 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8002018:	4816      	ldr	r0, [pc, #88]	; (8002074 <MX_I2C1_Init+0xd8>)
 800201a:	f7ff ff3d 	bl	8001e98 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800201e:	4815      	ldr	r0, [pc, #84]	; (8002074 <MX_I2C1_Init+0xd8>)
 8002020:	f7ff feb1 	bl	8001d86 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_I2C1_Init+0xd8>)
 8002026:	f7ff fe86 	bl	8001d36 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <MX_I2C1_Init+0xd8>)
 800202c:	f7ff fe73 	bl	8001d16 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <MX_I2C1_Init+0xdc>)
 8002036:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002040:	2302      	movs	r3, #2
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002044:	2300      	movs	r3, #0
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4808      	ldr	r0, [pc, #32]	; (8002074 <MX_I2C1_Init+0xd8>)
 8002054:	f7ff f810 	bl	8001078 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_I2C1_Init+0xd8>)
 800205e:	f7ff fe7a 	bl	8001d56 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8002062:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_I2C1_Init+0xd8>)
 8002064:	f7ff fe47 	bl	8001cf6 <LL_I2C_Enable>
}
 8002068:	bf00      	nop
 800206a:	3738      	adds	r7, #56	; 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	48000400 	.word	0x48000400
 8002074:	40005400 	.word	0x40005400
 8002078:	2000090e 	.word	0x2000090e

0800207c <i2c_master_read_byte>:


uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af02      	add	r7, sp, #8
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
	// Enable It from I2C
	LL_I2C_EnableIT_RX(I2C1);
 800208c:	4825      	ldr	r0, [pc, #148]	; (8002124 <i2c_master_read_byte+0xa8>)
 800208e:	f7ff fe8a 	bl	8001da6 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002092:	79f9      	ldrb	r1, [r7, #7]
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <i2c_master_read_byte+0xac>)
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2200      	movs	r2, #0
 80020a2:	4820      	ldr	r0, [pc, #128]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020a4:	f7ff ff08 	bl	8001eb8 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80020a8:	e00a      	b.n	80020c0 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80020aa:	481e      	ldr	r0, [pc, #120]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020ac:	f7ff fe9b 	bl	8001de6 <LL_I2C_IsActiveFlag_TXIS>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	4619      	mov	r1, r3
 80020ba:	481a      	ldr	r0, [pc, #104]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020bc:	f7ff ff2f 	bl	8001f1e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80020c0:	4818      	ldr	r0, [pc, #96]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020c2:	f7ff feb6 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ee      	beq.n	80020aa <i2c_master_read_byte+0x2e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80020cc:	4815      	ldr	r0, [pc, #84]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020ce:	f7ff fed3 	bl	8001e78 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80020d2:	bf00      	nop
 80020d4:	4813      	ldr	r0, [pc, #76]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020d6:	f7ff feac 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f9      	bne.n	80020d4 <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80020e0:	79f9      	ldrb	r1, [r7, #7]
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <i2c_master_read_byte+0xb0>)
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2301      	movs	r3, #1
 80020ee:	2200      	movs	r2, #0
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020f2:	f7ff fee1 	bl	8001eb8 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80020f6:	bf00      	nop
 80020f8:	480a      	ldr	r0, [pc, #40]	; (8002124 <i2c_master_read_byte+0xa8>)
 80020fa:	f7ff fe9a 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f9      	beq.n	80020f8 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <i2c_master_read_byte+0xa8>)
 8002106:	f7ff fe5e 	bl	8001dc6 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <i2c_master_read_byte+0xa8>)
 800210c:	f7ff feb4 	bl	8001e78 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <i2c_master_read_byte+0xa8>)
 8002112:	f7ff fea1 	bl	8001e58 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <i2c_master_read_byte+0xb4>)
 8002118:	781b      	ldrb	r3, [r3, #0]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40005400 	.word	0x40005400
 8002128:	80002000 	.word	0x80002000
 800212c:	80002400 	.word	0x80002400
 8002130:	200001fc 	.word	0x200001fc

08002134 <i2c_master_read_bytes>:

uint8_t i2c_master_read_bytes(uint8_t slave_address, uint8_t register_address, uint8_t* bufferik, uint8_t length)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	603a      	str	r2, [r7, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	460b      	mov	r3, r1
 8002144:	71bb      	strb	r3, [r7, #6]
 8002146:	4613      	mov	r3, r2
 8002148:	717b      	strb	r3, [r7, #5]
		uint8_t new_address = register_address;
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	73bb      	strb	r3, [r7, #14]
		uint8_t index = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
	    while(index < length)
 8002152:	e051      	b.n	80021f8 <i2c_master_read_bytes+0xc4>
	    {
	    new_address = register_address+index;
 8002154:	79ba      	ldrb	r2, [r7, #6]
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	4413      	add	r3, r2
 800215a:	73bb      	strb	r3, [r7, #14]
		LL_I2C_EnableIT_RX(I2C1);
 800215c:	482b      	ldr	r0, [pc, #172]	; (800220c <i2c_master_read_bytes+0xd8>)
 800215e:	f7ff fe22 	bl	8001da6 <LL_I2C_EnableIT_RX>
		// Initialize communication
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002162:	79f9      	ldrb	r1, [r7, #7]
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <i2c_master_read_bytes+0xdc>)
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	2200      	movs	r2, #0
 8002172:	4826      	ldr	r0, [pc, #152]	; (800220c <i2c_master_read_bytes+0xd8>)
 8002174:	f7ff fea0 	bl	8001eb8 <LL_I2C_HandleTransfer>
		// Send register address
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002178:	e00a      	b.n	8002190 <i2c_master_read_bytes+0x5c>
		{
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <i2c_master_read_bytes+0xd8>)
 800217c:	f7ff fe33 	bl	8001de6 <LL_I2C_IsActiveFlag_TXIS>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <i2c_master_read_bytes+0x5c>
			{

				LL_I2C_TransmitData8(I2C1, new_address);
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	4619      	mov	r1, r3
 800218a:	4820      	ldr	r0, [pc, #128]	; (800220c <i2c_master_read_bytes+0xd8>)
 800218c:	f7ff fec7 	bl	8001f1e <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002190:	481e      	ldr	r0, [pc, #120]	; (800220c <i2c_master_read_bytes+0xd8>)
 8002192:	f7ff fe4e 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <i2c_master_read_bytes+0x46>
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <i2c_master_read_bytes+0xd8>)
 800219e:	f7ff fe6b 	bl	8001e78 <LL_I2C_ClearFlag_STOP>
		while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80021a2:	bf00      	nop
 80021a4:	4819      	ldr	r0, [pc, #100]	; (800220c <i2c_master_read_bytes+0xd8>)
 80021a6:	f7ff fe44 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f9      	bne.n	80021a4 <i2c_master_read_bytes+0x70>

		// Receive data from slave device
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80021b0:	79f9      	ldrb	r1, [r7, #7]
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <i2c_master_read_bytes+0xe0>)
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	2200      	movs	r2, #0
 80021c0:	4812      	ldr	r0, [pc, #72]	; (800220c <i2c_master_read_bytes+0xd8>)
 80021c2:	f7ff fe79 	bl	8001eb8 <LL_I2C_HandleTransfer>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80021c6:	bf00      	nop
 80021c8:	4810      	ldr	r0, [pc, #64]	; (800220c <i2c_master_read_bytes+0xd8>)
 80021ca:	f7ff fe32 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f9      	beq.n	80021c8 <i2c_master_read_bytes+0x94>

		//End of transfer
		LL_I2C_DisableIT_RX(I2C1);
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <i2c_master_read_bytes+0xd8>)
 80021d6:	f7ff fdf6 	bl	8001dc6 <LL_I2C_DisableIT_RX>
		LL_I2C_ClearFlag_STOP(I2C1);
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <i2c_master_read_bytes+0xd8>)
 80021dc:	f7ff fe4c 	bl	8001e78 <LL_I2C_ClearFlag_STOP>
		LL_I2C_ClearFlag_NACK(I2C1);
 80021e0:	480a      	ldr	r0, [pc, #40]	; (800220c <i2c_master_read_bytes+0xd8>)
 80021e2:	f7ff fe39 	bl	8001e58 <LL_I2C_ClearFlag_NACK>
		bufferik[index] = i2c_rx_data;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <i2c_master_read_bytes+0xe4>)
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	701a      	strb	r2, [r3, #0]
		index++;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3301      	adds	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
	    while(index < length)
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	797b      	ldrb	r3, [r7, #5]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3a9      	bcc.n	8002154 <i2c_master_read_bytes+0x20>
	    }

}
 8002200:	bf00      	nop
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40005400 	.word	0x40005400
 8002210:	80002000 	.word	0x80002000
 8002214:	80002400 	.word	0x80002400
 8002218:	200001fc 	.word	0x200001fc

0800221c <i2c_send_byte>:


void i2c_send_byte(uint8_t slave_address, uint8_t register_address, uint8_t data)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af02      	add	r7, sp, #8
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	460b      	mov	r3, r1
 8002228:	71bb      	strb	r3, [r7, #6]
 800222a:	4613      	mov	r3, r2
 800222c:	717b      	strb	r3, [r7, #5]
	/*if (read_flag) {
		register_address |= (1 << 7);
		}*/
		LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 2,LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800222e:	79f9      	ldrb	r1, [r7, #7]
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <i2c_send_byte+0x64>)
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2302      	movs	r3, #2
 800223c:	2200      	movs	r2, #0
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <i2c_send_byte+0x68>)
 8002240:	f7ff fe3a 	bl	8001eb8 <LL_I2C_HandleTransfer>
		LL_I2C_TransmitData8(I2C1, register_address);
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	4619      	mov	r1, r3
 8002248:	480e      	ldr	r0, [pc, #56]	; (8002284 <i2c_send_byte+0x68>)
 800224a:	f7ff fe68 	bl	8001f1e <LL_I2C_TransmitData8>
		while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 800224e:	e00a      	b.n	8002266 <i2c_send_byte+0x4a>
			if (LL_I2C_IsActiveFlag_TXIS(I2C1)) {
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <i2c_send_byte+0x68>)
 8002252:	f7ff fdc8 	bl	8001de6 <LL_I2C_IsActiveFlag_TXIS>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <i2c_send_byte+0x4a>
				LL_I2C_TransmitData8(I2C1, data);
 800225c:	797b      	ldrb	r3, [r7, #5]
 800225e:	4619      	mov	r1, r3
 8002260:	4808      	ldr	r0, [pc, #32]	; (8002284 <i2c_send_byte+0x68>)
 8002262:	f7ff fe5c 	bl	8001f1e <LL_I2C_TransmitData8>
		while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 8002266:	4807      	ldr	r0, [pc, #28]	; (8002284 <i2c_send_byte+0x68>)
 8002268:	f7ff fde3 	bl	8001e32 <LL_I2C_IsActiveFlag_STOP>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ee      	beq.n	8002250 <i2c_send_byte+0x34>
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 8002272:	4804      	ldr	r0, [pc, #16]	; (8002284 <i2c_send_byte+0x68>)
 8002274:	f7ff fe00 	bl	8001e78 <LL_I2C_ClearFlag_STOP>


	    LL_I2C_ClearFlag_STOP(I2C1);
	    LL_I2C_ClearFlag_NACK(I2C1);
*/
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	80002000 	.word	0x80002000
 8002284:	40005400 	.word	0x40005400

08002288 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <I2C1_EV_IRQHandler+0x24>)
 800228e:	f7ff fdbd 	bl	8001e0c <LL_I2C_IsActiveFlag_RXNE>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <I2C1_EV_IRQHandler+0x24>)
 800229a:	f7ff fe33 	bl	8001f04 <LL_I2C_ReceiveData8>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <I2C1_EV_IRQHandler+0x28>)
 80022a4:	701a      	strb	r2, [r3, #0]
	}
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40005400 	.word	0x40005400
 80022b0:	200001fc 	.word	0x200001fc

080022b4 <NVIC_SetPriorityGrouping>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <LL_RCC_HSI_Enable>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <LL_RCC_HSI_Enable+0x1c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <LL_RCC_HSI_Enable+0x1c>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <LL_RCC_HSI_IsReady>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <LL_RCC_HSI_IsReady+0x20>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40021000 	.word	0x40021000

08002340 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4904      	ldr	r1, [pc, #16]	; (8002368 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000

0800236c <LL_RCC_SetSysClkSource>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <LL_RCC_SetSysClkSource+0x24>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 0203 	bic.w	r2, r3, #3
 800237c:	4904      	ldr	r1, [pc, #16]	; (8002390 <LL_RCC_SetSysClkSource+0x24>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000

08002394 <LL_RCC_GetSysClkSource>:
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <LL_RCC_GetSysClkSource+0x18>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_SetAHBPrescaler>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	4904      	ldr	r1, [pc, #16]	; (80023d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000

080023d8 <LL_RCC_SetAPB1Prescaler>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e8:	4904      	ldr	r1, [pc, #16]	; (80023fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000

08002400 <LL_RCC_SetAPB2Prescaler>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <LL_RCC_SetAPB2Prescaler+0x24>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000

08002428 <LL_RCC_SetI2CClockSource>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <LL_RCC_SetI2CClockSource+0x2c>)
 8002432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0e1b      	lsrs	r3, r3, #24
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002442:	4904      	ldr	r1, [pc, #16]	; (8002454 <LL_RCC_SetI2CClockSource+0x2c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000

08002458 <LL_APB1_GRP1_EnableClock>:
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000

08002488 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4313      	orrs	r3, r2
 800249a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40021000 	.word	0x40021000

080024b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <LL_FLASH_SetLatency+0x24>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 0207 	bic.w	r2, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <LL_FLASH_SetLatency+0x24>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40022000 	.word	0x40022000

080024e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <LL_FLASH_GetLatency+0x18>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000

080024fc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b04      	cmp	r3, #4
 8002508:	d106      	bne.n	8002518 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <LL_SYSTICK_SetClkSource+0x34>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <LL_SYSTICK_SetClkSource+0x34>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002516:	e005      	b.n	8002524 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <LL_SYSTICK_SetClkSource+0x34>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <LL_SYSTICK_SetClkSource+0x34>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e010 	.word	0xe000e010

08002534 <main>:

void SystemClock_Config(void);


int main(void)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b096      	sub	sp, #88	; 0x58
 800253a:	af0a      	add	r7, sp, #40	; 0x28
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff ffa3 	bl	8002488 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002542:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002546:	f7ff ff87 	bl	8002458 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254a:	2003      	movs	r0, #3
 800254c:	f7ff feb2 	bl	80022b4 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8002550:	f000 f876 	bl	8002640 <SystemClock_Config>

  MX_GPIO_Init();
 8002554:	f7ff fb36 	bl	8001bc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002558:	f7ff fd20 	bl	8001f9c <MX_I2C1_Init>
  MX_DMA_Init();
 800255c:	f000 ffaa 	bl	80034b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002560:	f000 fe62 	bl	8003228 <MX_USART2_UART_Init>
  lpsInit();
 8002564:	f7ff fa7a 	bl	8001a5c <lpsInit>
  htsInit();
 8002568:	f7ff f89c 	bl	80016a4 <htsInit>


  uint8_t tx_data[] = "Connected...\n\r";
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <main+0x100>)
 800256e:	f107 0410 	add.w	r4, r7, #16
 8002572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002574:	c407      	stmia	r4!, {r0, r1, r2}
 8002576:	8023      	strh	r3, [r4, #0]
 8002578:	3402      	adds	r4, #2
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	7023      	strb	r3, [r4, #0]
  uint8_t data ;
  float height = 0;
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  float hum = 0;
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  float pressure = 0;
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  float temp = 0;
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
  while (1)
  {


	  temp = returnTemp();
 8002596:	f7ff f92d 	bl	80017f4 <returnTemp>
 800259a:	ed87 0a08 	vstr	s0, [r7, #32]
	  pressure = returnPressure();
 800259e:	f7ff fa93 	bl	8001ac8 <returnPressure>
 80025a2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	  height = returnHeight();
 80025a6:	f7ff fa01 	bl	80019ac <returnHeight>
 80025aa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	  hum = returnHum();
 80025ae:	f7ff f969 	bl	8001884 <returnHum>
 80025b2:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	  sprintf(buffer, "teplota [°C]: %.2f, rel. vlhkosť [%%]:%.2f, tlak vzduchu [hPa]: %.2f, relatívna výška od zeme [m]: %.2f;\n\r",temp,hum,pressure, height,hum,height);
 80025b6:	6a38      	ldr	r0, [r7, #32]
 80025b8:	f7fd ffc6 	bl	8000548 <__aeabi_f2d>
 80025bc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80025c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c2:	f7fd ffc1 	bl	8000548 <__aeabi_f2d>
 80025c6:	4604      	mov	r4, r0
 80025c8:	460d      	mov	r5, r1
 80025ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025cc:	f7fd ffbc 	bl	8000548 <__aeabi_f2d>
 80025d0:	4680      	mov	r8, r0
 80025d2:	4689      	mov	r9, r1
 80025d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025d6:	f7fd ffb7 	bl	8000548 <__aeabi_f2d>
 80025da:	4682      	mov	sl, r0
 80025dc:	468b      	mov	fp, r1
 80025de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e0:	f7fd ffb2 	bl	8000548 <__aeabi_f2d>
 80025e4:	e9c7 0100 	strd	r0, r1, [r7]
 80025e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025ea:	f7fd ffad 	bl	8000548 <__aeabi_f2d>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80025f6:	ed97 7b00 	vldr	d7, [r7]
 80025fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80025fe:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002602:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002606:	e9cd 4500 	strd	r4, r5, [sp]
 800260a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <main+0x104>)
 8002610:	480a      	ldr	r0, [pc, #40]	; (800263c <main+0x108>)
 8002612:	f001 fcb7 	bl	8003f84 <siprintf>
	  USART2_PutBuffer(buffer, sizeof(buffer));
 8002616:	21f4      	movs	r1, #244	; 0xf4
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <main+0x108>)
 800261a:	f000 fee7 	bl	80033ec <USART2_PutBuffer>
	  data = i2c_master_read_byte(HTS221_READ_ADDRESS,0x20);
 800261e:	2120      	movs	r1, #32
 8002620:	20bf      	movs	r0, #191	; 0xbf
 8002622:	f7ff fd2b 	bl	800207c <i2c_master_read_byte>
 8002626:	4603      	mov	r3, r0
 8002628:	77fb      	strb	r3, [r7, #31]

	  LL_mDelay(2000);
 800262a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800262e:	f7ff f803 	bl	8001638 <LL_mDelay>
	  temp = returnTemp();
 8002632:	e7b0      	b.n	8002596 <main+0x62>
 8002634:	08006a50 	.word	0x08006a50
 8002638:	080069e0 	.word	0x080069e0
 800263c:	20000200 	.word	0x20000200

08002640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff ff37 	bl	80024b8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800264a:	f7ff ff49 	bl	80024e0 <LL_FLASH_GetLatency>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8002654:	f000 f82e 	bl	80026b4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002658:	f7ff fe50 	bl	80022fc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800265c:	bf00      	nop
 800265e:	f7ff fe5d 	bl	800231c <LL_RCC_HSI_IsReady>
 8002662:	4603      	mov	r3, r0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d1fa      	bne.n	800265e <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002668:	2010      	movs	r0, #16
 800266a:	f7ff fe69 	bl	8002340 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff fe9e 	bl	80023b0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff feaf 	bl	80023d8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff fec0 	bl	8002400 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff fe73 	bl	800236c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002686:	bf00      	nop
 8002688:	f7ff fe84 	bl	8002394 <LL_RCC_GetSysClkSource>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1fa      	bne.n	8002688 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8002692:	4807      	ldr	r0, [pc, #28]	; (80026b0 <SystemClock_Config+0x70>)
 8002694:	f7fe ffc2 	bl	800161c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002698:	2004      	movs	r0, #4
 800269a:	f7ff ff2f 	bl	80024fc <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 800269e:	4804      	ldr	r0, [pc, #16]	; (80026b0 <SystemClock_Config+0x70>)
 80026a0:	f7fe fff0 	bl	8001684 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80026a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80026a8:	f7ff febe 	bl	8002428 <LL_RCC_SetI2CClockSource>
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	007a1200 	.word	0x007a1200

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <LL_DMA_DisableChannel+0x3c>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	3a01      	subs	r2, #1
 80026e2:	4907      	ldr	r1, [pc, #28]	; (8002700 <LL_DMA_DisableChannel+0x3c>)
 80026e4:	5c8a      	ldrb	r2, [r1, r2]
 80026e6:	4611      	mov	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	440a      	add	r2, r1
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	08006a60 	.word	0x08006a60

08002704 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800278a:	605a      	str	r2, [r3, #4]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a6:	605a      	str	r2, [r3, #4]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027c2:	605a      	str	r2, [r3, #4]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2210      	movs	r2, #16
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <HardFault_Handler+0x4>

0800284a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <MemManage_Handler+0x4>

08002850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <BusFault_Handler+0x4>

08002856 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800285a:	e7fe      	b.n	800285a <UsageFault_Handler+0x4>

0800285c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8002898:	480a      	ldr	r0, [pc, #40]	; (80028c4 <DMA1_Channel7_IRQHandler+0x30>)
 800289a:	f7ff ff47 	bl	800272c <LL_DMA_IsActiveFlag_TC7>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d10d      	bne.n	80028c0 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80028a4:	4807      	ldr	r0, [pc, #28]	; (80028c4 <DMA1_Channel7_IRQHandler+0x30>)
 80028a6:	f7ff ff77 	bl	8002798 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80028aa:	bf00      	nop
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <DMA1_Channel7_IRQHandler+0x34>)
 80028ae:	f7ff ffa2 	bl	80027f6 <LL_USART_IsActiveFlag_TC>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f9      	beq.n	80028ac <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80028b8:	2107      	movs	r1, #7
 80028ba:	4802      	ldr	r0, [pc, #8]	; (80028c4 <DMA1_Channel7_IRQHandler+0x30>)
 80028bc:	f7ff ff02 	bl	80026c4 <LL_DMA_DisableChannel>
	}
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40004400 	.word	0x40004400

080028cc <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <DMA1_Channel6_IRQHandler+0x38>)
 80028d2:	f7ff ff17 	bl	8002704 <LL_DMA_IsActiveFlag_TC6>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80028dc:	f000 fda6 	bl	800342c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <DMA1_Channel6_IRQHandler+0x38>)
 80028e2:	f7ff ff4b 	bl	800277c <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80028e6:	e00a      	b.n	80028fe <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80028e8:	4806      	ldr	r0, [pc, #24]	; (8002904 <DMA1_Channel6_IRQHandler+0x38>)
 80028ea:	f7ff ff33 	bl	8002754 <LL_DMA_IsActiveFlag_HT6>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d104      	bne.n	80028fe <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80028f4:	f000 fd9a 	bl	800342c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <DMA1_Channel6_IRQHandler+0x38>)
 80028fa:	f7ff ff5b 	bl	80027b4 <LL_DMA_ClearFlag_HT6>
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40020000 	.word	0x40020000

08002908 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 800290c:	4806      	ldr	r0, [pc, #24]	; (8002928 <USART2_IRQHandler+0x20>)
 800290e:	f7ff ff5f 	bl	80027d0 <LL_USART_IsActiveFlag_IDLE>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002918:	f000 fd88 	bl	800342c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <USART2_IRQHandler+0x20>)
 800291e:	f7ff ff7d 	bl	800281c <LL_USART_ClearFlag_IDLE>
	}
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004400 	.word	0x40004400

0800292c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_kill>:

int _kill(int pid, int sig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002946:	f001 fbd3 	bl	80040f0 <__errno>
 800294a:	4603      	mov	r3, r0
 800294c:	2216      	movs	r2, #22
 800294e:	601a      	str	r2, [r3, #0]
	return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_exit>:

void _exit (int status)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffe7 	bl	800293c <_kill>
	while (1) {}		/* Make sure we hang here */
 800296e:	e7fe      	b.n	800296e <_exit+0x12>

08002970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00a      	b.n	8002998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002982:	f3af 8000 	nop.w
 8002986:	4601      	mov	r1, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60ba      	str	r2, [r7, #8]
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	dbf0      	blt.n	8002982 <_read+0x12>
	}

return len;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e009      	b.n	80029d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbf1      	blt.n	80029bc <_write+0x12>
	}
	return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_close>:

int _close(int file)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_isatty>:

int _isatty(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	return 1;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <_sbrk+0x50>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <_sbrk+0x16>
		heap_end = &end;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <_sbrk+0x50>)
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <_sbrk+0x54>)
 8002a60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <_sbrk+0x50>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <_sbrk+0x50>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	466a      	mov	r2, sp
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d907      	bls.n	8002a86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a76:	f001 fb3b 	bl	80040f0 <__errno>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e006      	b.n	8002a94 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <_sbrk+0x50>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <_sbrk+0x50>)
 8002a90:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200003f4 	.word	0x200003f4
 8002aa0:	200005d0 	.word	0x200005d0

08002aa4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <SystemInit+0x84>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <SystemInit+0x84>)
 8002ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <SystemInit+0x88>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <SystemInit+0x88>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <SystemInit+0x88>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4918      	ldr	r1, [pc, #96]	; (8002b2c <SystemInit+0x88>)
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <SystemInit+0x8c>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <SystemInit+0x88>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <SystemInit+0x88>)
 8002ad6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <SystemInit+0x88>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <SystemInit+0x88>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <SystemInit+0x88>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <SystemInit+0x88>)
 8002af2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002af6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <SystemInit+0x88>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <SystemInit+0x88>)
 8002afe:	f023 030f 	bic.w	r3, r3, #15
 8002b02:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <SystemInit+0x88>)
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	4908      	ldr	r1, [pc, #32]	; (8002b2c <SystemInit+0x88>)
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <SystemInit+0x90>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <SystemInit+0x88>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <SystemInit+0x84>)
 8002b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b1c:	609a      	str	r2, [r3, #8]
#endif
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	f87fc00c 	.word	0xf87fc00c
 8002b34:	ff00fccc 	.word	0xff00fccc

08002b38 <NVIC_EnableIRQ>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <NVIC_EnableIRQ+0x30>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <NVIC_SetPriority>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da0b      	bge.n	8002b98 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <NVIC_SetPriority+0x4c>)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	3b04      	subs	r3, #4
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	761a      	strb	r2, [r3, #24]
}
 8002b96:	e009      	b.n	8002bac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <NVIC_SetPriority+0x50>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <LL_AHB1_GRP1_EnableClock>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40021000 	.word	0x40021000

08002bf0 <LL_APB1_GRP1_EnableClock>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	4907      	ldr	r1, [pc, #28]	; (8002c1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40021000 	.word	0x40021000

08002c20 <LL_DMA_EnableChannel>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <LL_DMA_EnableChannel+0x3c>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	4907      	ldr	r1, [pc, #28]	; (8002c5c <LL_DMA_EnableChannel+0x3c>)
 8002c40:	5c8a      	ldrb	r2, [r1, r2]
 8002c42:	4611      	mov	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	440a      	add	r2, r1
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	08006a80 	.word	0x08006a80

08002c60 <LL_DMA_DisableChannel>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <LL_DMA_DisableChannel+0x3c>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	461a      	mov	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	4907      	ldr	r1, [pc, #28]	; (8002c9c <LL_DMA_DisableChannel+0x3c>)
 8002c80:	5c8a      	ldrb	r2, [r1, r2]
 8002c82:	4611      	mov	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	440a      	add	r2, r1
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6013      	str	r3, [r2, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	08006a80 	.word	0x08006a80

08002ca0 <LL_DMA_SetDataTransferDirection>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <LL_DMA_SetDataTransferDirection+0x48>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc0:	f023 0310 	bic.w	r3, r3, #16
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	3a01      	subs	r2, #1
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <LL_DMA_SetDataTransferDirection+0x48>)
 8002cca:	5c8a      	ldrb	r2, [r1, r2]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	08006a80 	.word	0x08006a80

08002cec <LL_DMA_GetDataTransferDirection>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002cfc:	5cd3      	ldrb	r3, [r2, r3]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	f244 0310 	movw	r3, #16400	; 0x4010
 8002d0a:	4013      	ands	r3, r2
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	08006a80 	.word	0x08006a80

08002d1c <LL_DMA_SetMode>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <LL_DMA_SetMode+0x44>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	461a      	mov	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 0220 	bic.w	r2, r3, #32
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <LL_DMA_SetMode+0x44>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	440b      	add	r3, r1
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	08006a80 	.word	0x08006a80

08002d64 <LL_DMA_SetPeriphIncMode>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <LL_DMA_SetPeriphIncMode+0x44>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <LL_DMA_SetPeriphIncMode+0x44>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	440b      	add	r3, r1
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	08006a80 	.word	0x08006a80

08002dac <LL_DMA_SetMemoryIncMode>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <LL_DMA_SetMemoryIncMode+0x44>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	4907      	ldr	r1, [pc, #28]	; (8002df0 <LL_DMA_SetMemoryIncMode+0x44>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	440b      	add	r3, r1
 8002dda:	4619      	mov	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	08006a80 	.word	0x08006a80

08002df4 <LL_DMA_SetPeriphSize>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <LL_DMA_SetPeriphSize+0x44>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <LL_DMA_SetPeriphSize+0x44>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	440b      	add	r3, r1
 8002e22:	4619      	mov	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	08006a80 	.word	0x08006a80

08002e3c <LL_DMA_SetMemorySize>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <LL_DMA_SetMemorySize+0x44>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	461a      	mov	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <LL_DMA_SetMemorySize+0x44>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	440b      	add	r3, r1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	08006a80 	.word	0x08006a80

08002e84 <LL_DMA_SetChannelPriorityLevel>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	08006a80 	.word	0x08006a80

08002ecc <LL_DMA_SetDataLength>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <LL_DMA_SetDataLength+0x44>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <LL_DMA_SetDataLength+0x44>)
 8002ef2:	5c8a      	ldrb	r2, [r1, r2]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	440a      	add	r2, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	08006a80 	.word	0x08006a80

08002f14 <LL_DMA_GetDataLength>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <LL_DMA_GetDataLength+0x28>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	b29b      	uxth	r3, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	08006a80 	.word	0x08006a80

08002f40 <LL_DMA_ConfigAddresses>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d114      	bne.n	8002f7e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <LL_DMA_ConfigAddresses+0x74>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <LL_DMA_ConfigAddresses+0x74>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	461a      	mov	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	461a      	mov	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6093      	str	r3, [r2, #8]
}
 8002f7c:	e013      	b.n	8002fa6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <LL_DMA_ConfigAddresses+0x74>)
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	461a      	mov	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <LL_DMA_ConfigAddresses+0x74>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	60d3      	str	r3, [r2, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	08006a80 	.word	0x08006a80

08002fb8 <LL_DMA_SetMemoryAddress>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <LL_DMA_SetMemoryAddress+0x2c>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60d3      	str	r3, [r2, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	08006a80 	.word	0x08006a80

08002fe8 <LL_DMA_SetPeriphAddress>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <LL_DMA_SetPeriphAddress+0x2c>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	461a      	mov	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6093      	str	r3, [r2, #8]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	08006a80 	.word	0x08006a80

08003018 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <LL_DMA_EnableIT_TC+0x3c>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	3a01      	subs	r2, #1
 8003036:	4907      	ldr	r1, [pc, #28]	; (8003054 <LL_DMA_EnableIT_TC+0x3c>)
 8003038:	5c8a      	ldrb	r2, [r1, r2]
 800303a:	4611      	mov	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	440a      	add	r2, r1
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6013      	str	r3, [r2, #0]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	08006a80 	.word	0x08006a80

08003058 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <LL_DMA_EnableIT_HT+0x3c>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	3a01      	subs	r2, #1
 8003076:	4907      	ldr	r1, [pc, #28]	; (8003094 <LL_DMA_EnableIT_HT+0x3c>)
 8003078:	5c8a      	ldrb	r2, [r1, r2]
 800307a:	4611      	mov	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	440a      	add	r2, r1
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6013      	str	r3, [r2, #0]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	08006a80 	.word	0x08006a80

08003098 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <LL_DMA_EnableIT_TE+0x3c>)
 80030a8:	5cd3      	ldrb	r3, [r2, r3]
 80030aa:	461a      	mov	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	3a01      	subs	r2, #1
 80030b6:	4907      	ldr	r1, [pc, #28]	; (80030d4 <LL_DMA_EnableIT_TE+0x3c>)
 80030b8:	5c8a      	ldrb	r2, [r1, r2]
 80030ba:	4611      	mov	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	440a      	add	r2, r1
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	08006a80 	.word	0x08006a80

080030d8 <LL_USART_Enable>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_USART_ConfigAsyncMode>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	601a      	str	r2, [r3, #0]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80031a4:	b490      	push	{r4, r7}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3328      	adds	r3, #40	; 0x28
 80031b8:	461c      	mov	r4, r3
 80031ba:	e002      	b.n	80031c2 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80031c2:	4623      	mov	r3, r4
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc90      	pop	{r4, r7}
 80031cc:	4770      	bx	lr
	...

080031d0 <resetBuffer>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];


static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len, uint16_t pos) = 0;
void resetBuffer()
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af02      	add	r7, sp, #8

		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 80031d6:	2106      	movs	r1, #6
 80031d8:	4810      	ldr	r0, [pc, #64]	; (800321c <resetBuffer+0x4c>)
 80031da:	f7ff fd41 	bl	8002c60 <LL_DMA_DisableChannel>
	    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 80031de:	2101      	movs	r1, #1
 80031e0:	480f      	ldr	r0, [pc, #60]	; (8003220 <resetBuffer+0x50>)
 80031e2:	f7ff ffdf 	bl	80031a4 <LL_USART_DMA_GetRegAddr>
 80031e6:	4604      	mov	r4, r0
 80031e8:	4d0e      	ldr	r5, [pc, #56]	; (8003224 <resetBuffer+0x54>)
 80031ea:	2106      	movs	r1, #6
 80031ec:	480b      	ldr	r0, [pc, #44]	; (800321c <resetBuffer+0x4c>)
 80031ee:	f7ff fd7d 	bl	8002cec <LL_DMA_GetDataTransferDirection>
 80031f2:	4603      	mov	r3, r0
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	462b      	mov	r3, r5
 80031f8:	4622      	mov	r2, r4
 80031fa:	2106      	movs	r1, #6
 80031fc:	4807      	ldr	r0, [pc, #28]	; (800321c <resetBuffer+0x4c>)
 80031fe:	f7ff fe9f 	bl	8002f40 <LL_DMA_ConfigAddresses>
	                           LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
	                           (uint32_t)bufferUSART2dma,
	                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	2106      	movs	r1, #6
 8003206:	4805      	ldr	r0, [pc, #20]	; (800321c <resetBuffer+0x4c>)
 8003208:	f7ff fe60 	bl	8002ecc <LL_DMA_SetDataLength>
	    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800320c:	2106      	movs	r1, #6
 800320e:	4803      	ldr	r0, [pc, #12]	; (800321c <resetBuffer+0x4c>)
 8003210:	f7ff fd06 	bl	8002c20 <LL_DMA_EnableChannel>
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	bf00      	nop
 800321c:	40020000 	.word	0x40020000
 8003220:	40004400 	.word	0x40004400
 8003224:	200003f8 	.word	0x200003f8

08003228 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b090      	sub	sp, #64	; 0x40
 800322c:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	615a      	str	r2, [r3, #20]
 8003240:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
 8003250:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003252:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003256:	f7ff fccb 	bl	8002bf0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800325a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800325e:	f7ff fcaf 	bl	8002bc0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8003262:	f248 0304 	movw	r3, #32772	; 0x8004
 8003266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003268:	2302      	movs	r3, #2
 800326a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003278:	2307      	movs	r3, #7
 800327a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003284:	f7fd fddb 	bl	8000e3e <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003288:	2200      	movs	r2, #0
 800328a:	2106      	movs	r1, #6
 800328c:	4854      	ldr	r0, [pc, #336]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 800328e:	f7ff fd07 	bl	8002ca0 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8003292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003296:	2106      	movs	r1, #6
 8003298:	4851      	ldr	r0, [pc, #324]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 800329a:	f7ff fdf3 	bl	8002e84 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800329e:	2200      	movs	r2, #0
 80032a0:	2106      	movs	r1, #6
 80032a2:	484f      	ldr	r0, [pc, #316]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032a4:	f7ff fd3a 	bl	8002d1c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2106      	movs	r1, #6
 80032ac:	484c      	ldr	r0, [pc, #304]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032ae:	f7ff fd59 	bl	8002d64 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	2106      	movs	r1, #6
 80032b6:	484a      	ldr	r0, [pc, #296]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032b8:	f7ff fd78 	bl	8002dac <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80032bc:	2200      	movs	r2, #0
 80032be:	2106      	movs	r1, #6
 80032c0:	4847      	ldr	r0, [pc, #284]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032c2:	f7ff fd97 	bl	8002df4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2106      	movs	r1, #6
 80032ca:	4845      	ldr	r0, [pc, #276]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032cc:	f7ff fdb6 	bl	8002e3c <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80032d0:	2101      	movs	r1, #1
 80032d2:	4844      	ldr	r0, [pc, #272]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 80032d4:	f7ff ff66 	bl	80031a4 <LL_USART_DMA_GetRegAddr>
 80032d8:	4604      	mov	r4, r0
 80032da:	4d43      	ldr	r5, [pc, #268]	; (80033e8 <MX_USART2_UART_Init+0x1c0>)
 80032dc:	2106      	movs	r1, #6
 80032de:	4840      	ldr	r0, [pc, #256]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032e0:	f7ff fd04 	bl	8002cec <LL_DMA_GetDataTransferDirection>
 80032e4:	4603      	mov	r3, r0
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	462b      	mov	r3, r5
 80032ea:	4622      	mov	r2, r4
 80032ec:	2106      	movs	r1, #6
 80032ee:	483c      	ldr	r0, [pc, #240]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032f0:	f7ff fe26 	bl	8002f40 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	2106      	movs	r1, #6
 80032f8:	4839      	ldr	r0, [pc, #228]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 80032fa:	f7ff fde7 	bl	8002ecc <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80032fe:	2106      	movs	r1, #6
 8003300:	4837      	ldr	r0, [pc, #220]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003302:	f7ff fc8d 	bl	8002c20 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8003306:	4837      	ldr	r0, [pc, #220]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 8003308:	f7ff ff2c 	bl	8003164 <LL_USART_EnableDMAReq_RX>


  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800330c:	2106      	movs	r1, #6
 800330e:	4834      	ldr	r0, [pc, #208]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003310:	f7ff fe82 	bl	8003018 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8003314:	2106      	movs	r1, #6
 8003316:	4832      	ldr	r0, [pc, #200]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003318:	f7ff fe9e 	bl	8003058 <LL_DMA_EnableIT_HT>


  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800331c:	2210      	movs	r2, #16
 800331e:	2107      	movs	r1, #7
 8003320:	482f      	ldr	r0, [pc, #188]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003322:	f7ff fcbd 	bl	8002ca0 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8003326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800332a:	2107      	movs	r1, #7
 800332c:	482c      	ldr	r0, [pc, #176]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 800332e:	f7ff fda9 	bl	8002e84 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8003332:	2200      	movs	r2, #0
 8003334:	2107      	movs	r1, #7
 8003336:	482a      	ldr	r0, [pc, #168]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003338:	f7ff fcf0 	bl	8002d1c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800333c:	2200      	movs	r2, #0
 800333e:	2107      	movs	r1, #7
 8003340:	4827      	ldr	r0, [pc, #156]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003342:	f7ff fd0f 	bl	8002d64 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	2107      	movs	r1, #7
 800334a:	4825      	ldr	r0, [pc, #148]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 800334c:	f7ff fd2e 	bl	8002dac <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8003350:	2200      	movs	r2, #0
 8003352:	2107      	movs	r1, #7
 8003354:	4822      	ldr	r0, [pc, #136]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003356:	f7ff fd4d 	bl	8002df4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800335a:	2200      	movs	r2, #0
 800335c:	2107      	movs	r1, #7
 800335e:	4820      	ldr	r0, [pc, #128]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003360:	f7ff fd6c 	bl	8002e3c <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8003364:	2100      	movs	r1, #0
 8003366:	481f      	ldr	r0, [pc, #124]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 8003368:	f7ff ff1c 	bl	80031a4 <LL_USART_DMA_GetRegAddr>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	2107      	movs	r1, #7
 8003372:	481b      	ldr	r0, [pc, #108]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003374:	f7ff fe38 	bl	8002fe8 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8003378:	481a      	ldr	r0, [pc, #104]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 800337a:	f7ff ff03 	bl	8003184 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800337e:	2107      	movs	r1, #7
 8003380:	4817      	ldr	r0, [pc, #92]	; (80033e0 <MX_USART2_UART_Init+0x1b8>)
 8003382:	f7ff fe89 	bl	8003098 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8003386:	2100      	movs	r1, #0
 8003388:	2026      	movs	r0, #38	; 0x26
 800338a:	f7ff fbef 	bl	8002b6c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800338e:	2026      	movs	r0, #38	; 0x26
 8003390:	f7ff fbd2 	bl	8002b38 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8003394:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003398:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033a6:	230c      	movs	r3, #12
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033ae:	2300      	movs	r3, #0
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	4619      	mov	r1, r3
 80033b8:	480a      	ldr	r0, [pc, #40]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 80033ba:	f7fe f8a9 	bl	8001510 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80033be:	4809      	ldr	r0, [pc, #36]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 80033c0:	f7ff fec0 	bl	8003144 <LL_USART_DisableIT_CTS>

  LL_USART_EnableIT_IDLE(USART2);
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 80033c6:	f7ff fead 	bl	8003124 <LL_USART_EnableIT_IDLE>

  LL_USART_ConfigAsyncMode(USART2);
 80033ca:	4806      	ldr	r0, [pc, #24]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 80033cc:	f7ff fe94 	bl	80030f8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <MX_USART2_UART_Init+0x1bc>)
 80033d2:	f7ff fe81 	bl	80030d8 <LL_USART_Enable>
}
 80033d6:	bf00      	nop
 80033d8:	3738      	adds	r7, #56	; 0x38
 80033da:	46bd      	mov	sp, r7
 80033dc:	bdb0      	pop	{r4, r5, r7, pc}
 80033de:	bf00      	nop
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40004400 	.word	0x40004400
 80033e8:	200003f8 	.word	0x200003f8

080033ec <USART2_PutBuffer>:


void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	2107      	movs	r1, #7
 80033fe:	480a      	ldr	r0, [pc, #40]	; (8003428 <USART2_PutBuffer+0x3c>)
 8003400:	f7ff fdda 	bl	8002fb8 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	461a      	mov	r2, r3
 8003408:	2107      	movs	r1, #7
 800340a:	4807      	ldr	r0, [pc, #28]	; (8003428 <USART2_PutBuffer+0x3c>)
 800340c:	f7ff fd5e 	bl	8002ecc <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8003410:	2107      	movs	r1, #7
 8003412:	4805      	ldr	r0, [pc, #20]	; (8003428 <USART2_PutBuffer+0x3c>)
 8003414:	f7ff fe00 	bl	8003018 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8003418:	2107      	movs	r1, #7
 800341a:	4803      	ldr	r0, [pc, #12]	; (8003428 <USART2_PutBuffer+0x3c>)
 800341c:	f7ff fc00 	bl	8002c20 <LL_DMA_EnableChannel>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40020000 	.word	0x40020000

0800342c <USART2_CheckDmaReception>:


void USART2_CheckDmaReception(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <USART2_CheckDmaReception+0x78>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02f      	beq.n	800349a <USART2_CheckDmaReception+0x6e>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800343a:	2106      	movs	r1, #6
 800343c:	481a      	ldr	r0, [pc, #104]	; (80034a8 <USART2_CheckDmaReception+0x7c>)
 800343e:	f7ff fd69 	bl	8002f14 <LL_DMA_GetDataLength>
 8003442:	4603      	mov	r3, r0
 8003444:	b29b      	uxth	r3, r3
 8003446:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800344a:	80fb      	strh	r3, [r7, #6]

	uint16_t len = pos - old_pos;
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <USART2_CheckDmaReception+0x80>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	80bb      	strh	r3, [r7, #4]


	if (35 > (pos - old_pos)  && (pos != old_pos)) {
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <USART2_CheckDmaReception+0x80>)
 800345a:	8812      	ldrh	r2, [r2, #0]
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	2b22      	cmp	r3, #34	; 0x22
 8003460:	dc0e      	bgt.n	8003480 <USART2_CheckDmaReception+0x54>
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <USART2_CheckDmaReception+0x80>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	429a      	cmp	r2, r3
 800346a:	d009      	beq.n	8003480 <USART2_CheckDmaReception+0x54>

		USART2_ProcessData(&bufferUSART2dma[old_pos], len, pos);
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <USART2_CheckDmaReception+0x78>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <USART2_CheckDmaReception+0x80>)
 8003472:	8812      	ldrh	r2, [r2, #0]
 8003474:	4611      	mov	r1, r2
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <USART2_CheckDmaReception+0x84>)
 8003478:	1888      	adds	r0, r1, r2
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	4798      	blx	r3

	}


	if(pos > 90){
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2b5a      	cmp	r3, #90	; 0x5a
 8003484:	d905      	bls.n	8003492 <USART2_CheckDmaReception+0x66>
		old_pos = 0;
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <USART2_CheckDmaReception+0x80>)
 8003488:	2200      	movs	r2, #0
 800348a:	801a      	strh	r2, [r3, #0]
		resetBuffer();
 800348c:	f7ff fea0 	bl	80031d0 <resetBuffer>
 8003490:	e004      	b.n	800349c <USART2_CheckDmaReception+0x70>
	}else old_pos = pos;
 8003492:	4a06      	ldr	r2, [pc, #24]	; (80034ac <USART2_CheckDmaReception+0x80>)
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	8013      	strh	r3, [r2, #0]
 8003498:	e000      	b.n	800349c <USART2_CheckDmaReception+0x70>
	if(USART2_ProcessData == 0) return;
 800349a:	bf00      	nop


}
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000478 	.word	0x20000478
 80034a8:	40020000 	.word	0x40020000
 80034ac:	2000047c 	.word	0x2000047c
 80034b0:	200003f8 	.word	0x200003f8

080034b4 <MX_DMA_Init>:


void MX_DMA_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f7ff fb81 	bl	8002bc0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80034be:	2100      	movs	r1, #0
 80034c0:	2010      	movs	r0, #16
 80034c2:	f7ff fb53 	bl	8002b6c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80034c6:	2010      	movs	r0, #16
 80034c8:	f7ff fb36 	bl	8002b38 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80034cc:	2100      	movs	r1, #0
 80034ce:	2011      	movs	r0, #17
 80034d0:	f7ff fb4c 	bl	8002b6c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80034d4:	2011      	movs	r0, #17
 80034d6:	f7ff fb2f 	bl	8002b38 <NVIC_EnableIRQ>

}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80034e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003518 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80034e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80034e6:	e003      	b.n	80034f0 <LoopCopyDataInit>

080034e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80034ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80034ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80034ee:	3104      	adds	r1, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80034f0:	480b      	ldr	r0, [pc, #44]	; (8003520 <LoopForever+0xa>)
	ldr	r3, =_edata
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <LoopForever+0xe>)
	adds	r2, r0, r1
 80034f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80034f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80034f8:	d3f6      	bcc.n	80034e8 <CopyDataInit>
	ldr	r2, =_sbss
 80034fa:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <LoopForever+0x12>)
	b	LoopFillZerobss
 80034fc:	e002      	b.n	8003504 <LoopFillZerobss>

080034fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80034fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003500:	f842 3b04 	str.w	r3, [r2], #4

08003504 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <LoopForever+0x16>)
	cmp	r2, r3
 8003506:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003508:	d3f9      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800350a:	f7ff facb 	bl	8002aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350e:	f000 fdf5 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003512:	f7ff f80f 	bl	8002534 <main>

08003516 <LoopForever>:

LoopForever:
    b LoopForever
 8003516:	e7fe      	b.n	8003516 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003518:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800351c:	08006e1c 	.word	0x08006e1c
	ldr	r0, =_sdata
 8003520:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003524:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8003528:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 800352c:	200005cc 	.word	0x200005cc

08003530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003530:	e7fe      	b.n	8003530 <ADC1_2_IRQHandler>

08003532 <__cvt>:
 8003532:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003536:	ec55 4b10 	vmov	r4, r5, d0
 800353a:	2d00      	cmp	r5, #0
 800353c:	460e      	mov	r6, r1
 800353e:	4619      	mov	r1, r3
 8003540:	462b      	mov	r3, r5
 8003542:	bfbb      	ittet	lt
 8003544:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003548:	461d      	movlt	r5, r3
 800354a:	2300      	movge	r3, #0
 800354c:	232d      	movlt	r3, #45	; 0x2d
 800354e:	700b      	strb	r3, [r1, #0]
 8003550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003552:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003556:	4691      	mov	r9, r2
 8003558:	f023 0820 	bic.w	r8, r3, #32
 800355c:	bfbc      	itt	lt
 800355e:	4622      	movlt	r2, r4
 8003560:	4614      	movlt	r4, r2
 8003562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003566:	d005      	beq.n	8003574 <__cvt+0x42>
 8003568:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800356c:	d100      	bne.n	8003570 <__cvt+0x3e>
 800356e:	3601      	adds	r6, #1
 8003570:	2102      	movs	r1, #2
 8003572:	e000      	b.n	8003576 <__cvt+0x44>
 8003574:	2103      	movs	r1, #3
 8003576:	ab03      	add	r3, sp, #12
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	ab02      	add	r3, sp, #8
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	ec45 4b10 	vmov	d0, r4, r5
 8003582:	4653      	mov	r3, sl
 8003584:	4632      	mov	r2, r6
 8003586:	f000 fe6b 	bl	8004260 <_dtoa_r>
 800358a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800358e:	4607      	mov	r7, r0
 8003590:	d102      	bne.n	8003598 <__cvt+0x66>
 8003592:	f019 0f01 	tst.w	r9, #1
 8003596:	d022      	beq.n	80035de <__cvt+0xac>
 8003598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800359c:	eb07 0906 	add.w	r9, r7, r6
 80035a0:	d110      	bne.n	80035c4 <__cvt+0x92>
 80035a2:	783b      	ldrb	r3, [r7, #0]
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d10a      	bne.n	80035be <__cvt+0x8c>
 80035a8:	2200      	movs	r2, #0
 80035aa:	2300      	movs	r3, #0
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fd fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80035b4:	b918      	cbnz	r0, 80035be <__cvt+0x8c>
 80035b6:	f1c6 0601 	rsb	r6, r6, #1
 80035ba:	f8ca 6000 	str.w	r6, [sl]
 80035be:	f8da 3000 	ldr.w	r3, [sl]
 80035c2:	4499      	add	r9, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	2300      	movs	r3, #0
 80035c8:	4620      	mov	r0, r4
 80035ca:	4629      	mov	r1, r5
 80035cc:	f7fd fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d0:	b108      	cbz	r0, 80035d6 <__cvt+0xa4>
 80035d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80035d6:	2230      	movs	r2, #48	; 0x30
 80035d8:	9b03      	ldr	r3, [sp, #12]
 80035da:	454b      	cmp	r3, r9
 80035dc:	d307      	bcc.n	80035ee <__cvt+0xbc>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035e2:	1bdb      	subs	r3, r3, r7
 80035e4:	4638      	mov	r0, r7
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	b004      	add	sp, #16
 80035ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ee:	1c59      	adds	r1, r3, #1
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e7f0      	b.n	80035d8 <__cvt+0xa6>

080035f6 <__exponent>:
 80035f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035f8:	4603      	mov	r3, r0
 80035fa:	2900      	cmp	r1, #0
 80035fc:	bfb8      	it	lt
 80035fe:	4249      	neglt	r1, r1
 8003600:	f803 2b02 	strb.w	r2, [r3], #2
 8003604:	bfb4      	ite	lt
 8003606:	222d      	movlt	r2, #45	; 0x2d
 8003608:	222b      	movge	r2, #43	; 0x2b
 800360a:	2909      	cmp	r1, #9
 800360c:	7042      	strb	r2, [r0, #1]
 800360e:	dd2a      	ble.n	8003666 <__exponent+0x70>
 8003610:	f10d 0207 	add.w	r2, sp, #7
 8003614:	4617      	mov	r7, r2
 8003616:	260a      	movs	r6, #10
 8003618:	4694      	mov	ip, r2
 800361a:	fb91 f5f6 	sdiv	r5, r1, r6
 800361e:	fb06 1415 	mls	r4, r6, r5, r1
 8003622:	3430      	adds	r4, #48	; 0x30
 8003624:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003628:	460c      	mov	r4, r1
 800362a:	2c63      	cmp	r4, #99	; 0x63
 800362c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003630:	4629      	mov	r1, r5
 8003632:	dcf1      	bgt.n	8003618 <__exponent+0x22>
 8003634:	3130      	adds	r1, #48	; 0x30
 8003636:	f1ac 0402 	sub.w	r4, ip, #2
 800363a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800363e:	1c41      	adds	r1, r0, #1
 8003640:	4622      	mov	r2, r4
 8003642:	42ba      	cmp	r2, r7
 8003644:	d30a      	bcc.n	800365c <__exponent+0x66>
 8003646:	f10d 0209 	add.w	r2, sp, #9
 800364a:	eba2 020c 	sub.w	r2, r2, ip
 800364e:	42bc      	cmp	r4, r7
 8003650:	bf88      	it	hi
 8003652:	2200      	movhi	r2, #0
 8003654:	4413      	add	r3, r2
 8003656:	1a18      	subs	r0, r3, r0
 8003658:	b003      	add	sp, #12
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003660:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003664:	e7ed      	b.n	8003642 <__exponent+0x4c>
 8003666:	2330      	movs	r3, #48	; 0x30
 8003668:	3130      	adds	r1, #48	; 0x30
 800366a:	7083      	strb	r3, [r0, #2]
 800366c:	70c1      	strb	r1, [r0, #3]
 800366e:	1d03      	adds	r3, r0, #4
 8003670:	e7f1      	b.n	8003656 <__exponent+0x60>
	...

08003674 <_printf_float>:
 8003674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003678:	ed2d 8b02 	vpush	{d8}
 800367c:	b08d      	sub	sp, #52	; 0x34
 800367e:	460c      	mov	r4, r1
 8003680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003684:	4616      	mov	r6, r2
 8003686:	461f      	mov	r7, r3
 8003688:	4605      	mov	r5, r0
 800368a:	f000 fce7 	bl	800405c <_localeconv_r>
 800368e:	f8d0 a000 	ldr.w	sl, [r0]
 8003692:	4650      	mov	r0, sl
 8003694:	f7fc fdec 	bl	8000270 <strlen>
 8003698:	2300      	movs	r3, #0
 800369a:	930a      	str	r3, [sp, #40]	; 0x28
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	9305      	str	r3, [sp, #20]
 80036a0:	f8d8 3000 	ldr.w	r3, [r8]
 80036a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80036a8:	3307      	adds	r3, #7
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	f103 0208 	add.w	r2, r3, #8
 80036b2:	f8c8 2000 	str.w	r2, [r8]
 80036b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036be:	9307      	str	r3, [sp, #28]
 80036c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80036c4:	ee08 0a10 	vmov	s16, r0
 80036c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80036cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036d0:	4b9e      	ldr	r3, [pc, #632]	; (800394c <_printf_float+0x2d8>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	f7fd fa29 	bl	8000b2c <__aeabi_dcmpun>
 80036da:	bb88      	cbnz	r0, 8003740 <_printf_float+0xcc>
 80036dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036e0:	4b9a      	ldr	r3, [pc, #616]	; (800394c <_printf_float+0x2d8>)
 80036e2:	f04f 32ff 	mov.w	r2, #4294967295
 80036e6:	f7fd fa03 	bl	8000af0 <__aeabi_dcmple>
 80036ea:	bb48      	cbnz	r0, 8003740 <_printf_float+0xcc>
 80036ec:	2200      	movs	r2, #0
 80036ee:	2300      	movs	r3, #0
 80036f0:	4640      	mov	r0, r8
 80036f2:	4649      	mov	r1, r9
 80036f4:	f7fd f9f2 	bl	8000adc <__aeabi_dcmplt>
 80036f8:	b110      	cbz	r0, 8003700 <_printf_float+0x8c>
 80036fa:	232d      	movs	r3, #45	; 0x2d
 80036fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003700:	4a93      	ldr	r2, [pc, #588]	; (8003950 <_printf_float+0x2dc>)
 8003702:	4b94      	ldr	r3, [pc, #592]	; (8003954 <_printf_float+0x2e0>)
 8003704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003708:	bf94      	ite	ls
 800370a:	4690      	movls	r8, r2
 800370c:	4698      	movhi	r8, r3
 800370e:	2303      	movs	r3, #3
 8003710:	6123      	str	r3, [r4, #16]
 8003712:	9b05      	ldr	r3, [sp, #20]
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	f04f 0900 	mov.w	r9, #0
 800371e:	9700      	str	r7, [sp, #0]
 8003720:	4633      	mov	r3, r6
 8003722:	aa0b      	add	r2, sp, #44	; 0x2c
 8003724:	4621      	mov	r1, r4
 8003726:	4628      	mov	r0, r5
 8003728:	f000 f9da 	bl	8003ae0 <_printf_common>
 800372c:	3001      	adds	r0, #1
 800372e:	f040 8090 	bne.w	8003852 <_printf_float+0x1de>
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	b00d      	add	sp, #52	; 0x34
 8003738:	ecbd 8b02 	vpop	{d8}
 800373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	4640      	mov	r0, r8
 8003746:	4649      	mov	r1, r9
 8003748:	f7fd f9f0 	bl	8000b2c <__aeabi_dcmpun>
 800374c:	b140      	cbz	r0, 8003760 <_printf_float+0xec>
 800374e:	464b      	mov	r3, r9
 8003750:	2b00      	cmp	r3, #0
 8003752:	bfbc      	itt	lt
 8003754:	232d      	movlt	r3, #45	; 0x2d
 8003756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800375a:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <_printf_float+0x2e4>)
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <_printf_float+0x2e8>)
 800375e:	e7d1      	b.n	8003704 <_printf_float+0x90>
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003766:	9206      	str	r2, [sp, #24]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	d13f      	bne.n	80037ec <_printf_float+0x178>
 800376c:	2306      	movs	r3, #6
 800376e:	6063      	str	r3, [r4, #4]
 8003770:	9b05      	ldr	r3, [sp, #20]
 8003772:	6861      	ldr	r1, [r4, #4]
 8003774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003778:	2300      	movs	r3, #0
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	ab0a      	add	r3, sp, #40	; 0x28
 800377e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003782:	ab09      	add	r3, sp, #36	; 0x24
 8003784:	ec49 8b10 	vmov	d0, r8, r9
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	6022      	str	r2, [r4, #0]
 800378c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003790:	4628      	mov	r0, r5
 8003792:	f7ff fece 	bl	8003532 <__cvt>
 8003796:	9b06      	ldr	r3, [sp, #24]
 8003798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800379a:	2b47      	cmp	r3, #71	; 0x47
 800379c:	4680      	mov	r8, r0
 800379e:	d108      	bne.n	80037b2 <_printf_float+0x13e>
 80037a0:	1cc8      	adds	r0, r1, #3
 80037a2:	db02      	blt.n	80037aa <_printf_float+0x136>
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	4299      	cmp	r1, r3
 80037a8:	dd41      	ble.n	800382e <_printf_float+0x1ba>
 80037aa:	f1ab 0302 	sub.w	r3, fp, #2
 80037ae:	fa5f fb83 	uxtb.w	fp, r3
 80037b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037b6:	d820      	bhi.n	80037fa <_printf_float+0x186>
 80037b8:	3901      	subs	r1, #1
 80037ba:	465a      	mov	r2, fp
 80037bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037c0:	9109      	str	r1, [sp, #36]	; 0x24
 80037c2:	f7ff ff18 	bl	80035f6 <__exponent>
 80037c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037c8:	1813      	adds	r3, r2, r0
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	4681      	mov	r9, r0
 80037ce:	6123      	str	r3, [r4, #16]
 80037d0:	dc02      	bgt.n	80037d8 <_printf_float+0x164>
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	07d2      	lsls	r2, r2, #31
 80037d6:	d501      	bpl.n	80037dc <_printf_float+0x168>
 80037d8:	3301      	adds	r3, #1
 80037da:	6123      	str	r3, [r4, #16]
 80037dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d09c      	beq.n	800371e <_printf_float+0xaa>
 80037e4:	232d      	movs	r3, #45	; 0x2d
 80037e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ea:	e798      	b.n	800371e <_printf_float+0xaa>
 80037ec:	9a06      	ldr	r2, [sp, #24]
 80037ee:	2a47      	cmp	r2, #71	; 0x47
 80037f0:	d1be      	bne.n	8003770 <_printf_float+0xfc>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1bc      	bne.n	8003770 <_printf_float+0xfc>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e7b9      	b.n	800376e <_printf_float+0xfa>
 80037fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80037fe:	d118      	bne.n	8003832 <_printf_float+0x1be>
 8003800:	2900      	cmp	r1, #0
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	dd0b      	ble.n	800381e <_printf_float+0x1aa>
 8003806:	6121      	str	r1, [r4, #16]
 8003808:	b913      	cbnz	r3, 8003810 <_printf_float+0x19c>
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	07d0      	lsls	r0, r2, #31
 800380e:	d502      	bpl.n	8003816 <_printf_float+0x1a2>
 8003810:	3301      	adds	r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	65a1      	str	r1, [r4, #88]	; 0x58
 8003818:	f04f 0900 	mov.w	r9, #0
 800381c:	e7de      	b.n	80037dc <_printf_float+0x168>
 800381e:	b913      	cbnz	r3, 8003826 <_printf_float+0x1b2>
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	07d2      	lsls	r2, r2, #31
 8003824:	d501      	bpl.n	800382a <_printf_float+0x1b6>
 8003826:	3302      	adds	r3, #2
 8003828:	e7f4      	b.n	8003814 <_printf_float+0x1a0>
 800382a:	2301      	movs	r3, #1
 800382c:	e7f2      	b.n	8003814 <_printf_float+0x1a0>
 800382e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003834:	4299      	cmp	r1, r3
 8003836:	db05      	blt.n	8003844 <_printf_float+0x1d0>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	6121      	str	r1, [r4, #16]
 800383c:	07d8      	lsls	r0, r3, #31
 800383e:	d5ea      	bpl.n	8003816 <_printf_float+0x1a2>
 8003840:	1c4b      	adds	r3, r1, #1
 8003842:	e7e7      	b.n	8003814 <_printf_float+0x1a0>
 8003844:	2900      	cmp	r1, #0
 8003846:	bfd4      	ite	le
 8003848:	f1c1 0202 	rsble	r2, r1, #2
 800384c:	2201      	movgt	r2, #1
 800384e:	4413      	add	r3, r2
 8003850:	e7e0      	b.n	8003814 <_printf_float+0x1a0>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	055a      	lsls	r2, r3, #21
 8003856:	d407      	bmi.n	8003868 <_printf_float+0x1f4>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	4642      	mov	r2, r8
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	d12c      	bne.n	80038c0 <_printf_float+0x24c>
 8003866:	e764      	b.n	8003732 <_printf_float+0xbe>
 8003868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800386c:	f240 80e0 	bls.w	8003a30 <_printf_float+0x3bc>
 8003870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003874:	2200      	movs	r2, #0
 8003876:	2300      	movs	r3, #0
 8003878:	f7fd f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800387c:	2800      	cmp	r0, #0
 800387e:	d034      	beq.n	80038ea <_printf_float+0x276>
 8003880:	4a37      	ldr	r2, [pc, #220]	; (8003960 <_printf_float+0x2ec>)
 8003882:	2301      	movs	r3, #1
 8003884:	4631      	mov	r1, r6
 8003886:	4628      	mov	r0, r5
 8003888:	47b8      	blx	r7
 800388a:	3001      	adds	r0, #1
 800388c:	f43f af51 	beq.w	8003732 <_printf_float+0xbe>
 8003890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003894:	429a      	cmp	r2, r3
 8003896:	db02      	blt.n	800389e <_printf_float+0x22a>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	07d8      	lsls	r0, r3, #31
 800389c:	d510      	bpl.n	80038c0 <_printf_float+0x24c>
 800389e:	ee18 3a10 	vmov	r3, s16
 80038a2:	4652      	mov	r2, sl
 80038a4:	4631      	mov	r1, r6
 80038a6:	4628      	mov	r0, r5
 80038a8:	47b8      	blx	r7
 80038aa:	3001      	adds	r0, #1
 80038ac:	f43f af41 	beq.w	8003732 <_printf_float+0xbe>
 80038b0:	f04f 0800 	mov.w	r8, #0
 80038b4:	f104 091a 	add.w	r9, r4, #26
 80038b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	4543      	cmp	r3, r8
 80038be:	dc09      	bgt.n	80038d4 <_printf_float+0x260>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	079b      	lsls	r3, r3, #30
 80038c4:	f100 8107 	bmi.w	8003ad6 <_printf_float+0x462>
 80038c8:	68e0      	ldr	r0, [r4, #12]
 80038ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038cc:	4298      	cmp	r0, r3
 80038ce:	bfb8      	it	lt
 80038d0:	4618      	movlt	r0, r3
 80038d2:	e730      	b.n	8003736 <_printf_float+0xc2>
 80038d4:	2301      	movs	r3, #1
 80038d6:	464a      	mov	r2, r9
 80038d8:	4631      	mov	r1, r6
 80038da:	4628      	mov	r0, r5
 80038dc:	47b8      	blx	r7
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f af27 	beq.w	8003732 <_printf_float+0xbe>
 80038e4:	f108 0801 	add.w	r8, r8, #1
 80038e8:	e7e6      	b.n	80038b8 <_printf_float+0x244>
 80038ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	dc39      	bgt.n	8003964 <_printf_float+0x2f0>
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <_printf_float+0x2ec>)
 80038f2:	2301      	movs	r3, #1
 80038f4:	4631      	mov	r1, r6
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	3001      	adds	r0, #1
 80038fc:	f43f af19 	beq.w	8003732 <_printf_float+0xbe>
 8003900:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003904:	4313      	orrs	r3, r2
 8003906:	d102      	bne.n	800390e <_printf_float+0x29a>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	07d9      	lsls	r1, r3, #31
 800390c:	d5d8      	bpl.n	80038c0 <_printf_float+0x24c>
 800390e:	ee18 3a10 	vmov	r3, s16
 8003912:	4652      	mov	r2, sl
 8003914:	4631      	mov	r1, r6
 8003916:	4628      	mov	r0, r5
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	f43f af09 	beq.w	8003732 <_printf_float+0xbe>
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	f104 0a1a 	add.w	sl, r4, #26
 8003928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800392a:	425b      	negs	r3, r3
 800392c:	454b      	cmp	r3, r9
 800392e:	dc01      	bgt.n	8003934 <_printf_float+0x2c0>
 8003930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003932:	e792      	b.n	800385a <_printf_float+0x1e6>
 8003934:	2301      	movs	r3, #1
 8003936:	4652      	mov	r2, sl
 8003938:	4631      	mov	r1, r6
 800393a:	4628      	mov	r0, r5
 800393c:	47b8      	blx	r7
 800393e:	3001      	adds	r0, #1
 8003940:	f43f aef7 	beq.w	8003732 <_printf_float+0xbe>
 8003944:	f109 0901 	add.w	r9, r9, #1
 8003948:	e7ee      	b.n	8003928 <_printf_float+0x2b4>
 800394a:	bf00      	nop
 800394c:	7fefffff 	.word	0x7fefffff
 8003950:	08006a87 	.word	0x08006a87
 8003954:	08006a8b 	.word	0x08006a8b
 8003958:	08006a8f 	.word	0x08006a8f
 800395c:	08006a93 	.word	0x08006a93
 8003960:	08006a97 	.word	0x08006a97
 8003964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003968:	429a      	cmp	r2, r3
 800396a:	bfa8      	it	ge
 800396c:	461a      	movge	r2, r3
 800396e:	2a00      	cmp	r2, #0
 8003970:	4691      	mov	r9, r2
 8003972:	dc37      	bgt.n	80039e4 <_printf_float+0x370>
 8003974:	f04f 0b00 	mov.w	fp, #0
 8003978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800397c:	f104 021a 	add.w	r2, r4, #26
 8003980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003982:	9305      	str	r3, [sp, #20]
 8003984:	eba3 0309 	sub.w	r3, r3, r9
 8003988:	455b      	cmp	r3, fp
 800398a:	dc33      	bgt.n	80039f4 <_printf_float+0x380>
 800398c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003990:	429a      	cmp	r2, r3
 8003992:	db3b      	blt.n	8003a0c <_printf_float+0x398>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07da      	lsls	r2, r3, #31
 8003998:	d438      	bmi.n	8003a0c <_printf_float+0x398>
 800399a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800399e:	eba2 0903 	sub.w	r9, r2, r3
 80039a2:	9b05      	ldr	r3, [sp, #20]
 80039a4:	1ad2      	subs	r2, r2, r3
 80039a6:	4591      	cmp	r9, r2
 80039a8:	bfa8      	it	ge
 80039aa:	4691      	movge	r9, r2
 80039ac:	f1b9 0f00 	cmp.w	r9, #0
 80039b0:	dc35      	bgt.n	8003a1e <_printf_float+0x3aa>
 80039b2:	f04f 0800 	mov.w	r8, #0
 80039b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039ba:	f104 0a1a 	add.w	sl, r4, #26
 80039be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	eba3 0309 	sub.w	r3, r3, r9
 80039c8:	4543      	cmp	r3, r8
 80039ca:	f77f af79 	ble.w	80038c0 <_printf_float+0x24c>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4652      	mov	r2, sl
 80039d2:	4631      	mov	r1, r6
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b8      	blx	r7
 80039d8:	3001      	adds	r0, #1
 80039da:	f43f aeaa 	beq.w	8003732 <_printf_float+0xbe>
 80039de:	f108 0801 	add.w	r8, r8, #1
 80039e2:	e7ec      	b.n	80039be <_printf_float+0x34a>
 80039e4:	4613      	mov	r3, r2
 80039e6:	4631      	mov	r1, r6
 80039e8:	4642      	mov	r2, r8
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b8      	blx	r7
 80039ee:	3001      	adds	r0, #1
 80039f0:	d1c0      	bne.n	8003974 <_printf_float+0x300>
 80039f2:	e69e      	b.n	8003732 <_printf_float+0xbe>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	9205      	str	r2, [sp, #20]
 80039fc:	47b8      	blx	r7
 80039fe:	3001      	adds	r0, #1
 8003a00:	f43f ae97 	beq.w	8003732 <_printf_float+0xbe>
 8003a04:	9a05      	ldr	r2, [sp, #20]
 8003a06:	f10b 0b01 	add.w	fp, fp, #1
 8003a0a:	e7b9      	b.n	8003980 <_printf_float+0x30c>
 8003a0c:	ee18 3a10 	vmov	r3, s16
 8003a10:	4652      	mov	r2, sl
 8003a12:	4631      	mov	r1, r6
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b8      	blx	r7
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1be      	bne.n	800399a <_printf_float+0x326>
 8003a1c:	e689      	b.n	8003732 <_printf_float+0xbe>
 8003a1e:	9a05      	ldr	r2, [sp, #20]
 8003a20:	464b      	mov	r3, r9
 8003a22:	4442      	add	r2, r8
 8003a24:	4631      	mov	r1, r6
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1c1      	bne.n	80039b2 <_printf_float+0x33e>
 8003a2e:	e680      	b.n	8003732 <_printf_float+0xbe>
 8003a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a32:	2a01      	cmp	r2, #1
 8003a34:	dc01      	bgt.n	8003a3a <_printf_float+0x3c6>
 8003a36:	07db      	lsls	r3, r3, #31
 8003a38:	d53a      	bpl.n	8003ab0 <_printf_float+0x43c>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	f43f ae74 	beq.w	8003732 <_printf_float+0xbe>
 8003a4a:	ee18 3a10 	vmov	r3, s16
 8003a4e:	4652      	mov	r2, sl
 8003a50:	4631      	mov	r1, r6
 8003a52:	4628      	mov	r0, r5
 8003a54:	47b8      	blx	r7
 8003a56:	3001      	adds	r0, #1
 8003a58:	f43f ae6b 	beq.w	8003732 <_printf_float+0xbe>
 8003a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a60:	2200      	movs	r2, #0
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a68:	f7fd f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a6c:	b9d8      	cbnz	r0, 8003aa6 <_printf_float+0x432>
 8003a6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003a72:	f108 0201 	add.w	r2, r8, #1
 8003a76:	4631      	mov	r1, r6
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b8      	blx	r7
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d10e      	bne.n	8003a9e <_printf_float+0x42a>
 8003a80:	e657      	b.n	8003732 <_printf_float+0xbe>
 8003a82:	2301      	movs	r3, #1
 8003a84:	4652      	mov	r2, sl
 8003a86:	4631      	mov	r1, r6
 8003a88:	4628      	mov	r0, r5
 8003a8a:	47b8      	blx	r7
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	f43f ae50 	beq.w	8003732 <_printf_float+0xbe>
 8003a92:	f108 0801 	add.w	r8, r8, #1
 8003a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4543      	cmp	r3, r8
 8003a9c:	dcf1      	bgt.n	8003a82 <_printf_float+0x40e>
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003aa4:	e6da      	b.n	800385c <_printf_float+0x1e8>
 8003aa6:	f04f 0800 	mov.w	r8, #0
 8003aaa:	f104 0a1a 	add.w	sl, r4, #26
 8003aae:	e7f2      	b.n	8003a96 <_printf_float+0x422>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	e7df      	b.n	8003a76 <_printf_float+0x402>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	464a      	mov	r2, r9
 8003aba:	4631      	mov	r1, r6
 8003abc:	4628      	mov	r0, r5
 8003abe:	47b8      	blx	r7
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	f43f ae36 	beq.w	8003732 <_printf_float+0xbe>
 8003ac6:	f108 0801 	add.w	r8, r8, #1
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ace:	1a5b      	subs	r3, r3, r1
 8003ad0:	4543      	cmp	r3, r8
 8003ad2:	dcf0      	bgt.n	8003ab6 <_printf_float+0x442>
 8003ad4:	e6f8      	b.n	80038c8 <_printf_float+0x254>
 8003ad6:	f04f 0800 	mov.w	r8, #0
 8003ada:	f104 0919 	add.w	r9, r4, #25
 8003ade:	e7f4      	b.n	8003aca <_printf_float+0x456>

08003ae0 <_printf_common>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	4616      	mov	r6, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	688a      	ldr	r2, [r1, #8]
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bfb8      	it	lt
 8003af4:	4613      	movlt	r3, r2
 8003af6:	6033      	str	r3, [r6, #0]
 8003af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003afc:	4607      	mov	r7, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	b10a      	cbz	r2, 8003b06 <_printf_common+0x26>
 8003b02:	3301      	adds	r3, #1
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	0699      	lsls	r1, r3, #26
 8003b0a:	bf42      	ittt	mi
 8003b0c:	6833      	ldrmi	r3, [r6, #0]
 8003b0e:	3302      	addmi	r3, #2
 8003b10:	6033      	strmi	r3, [r6, #0]
 8003b12:	6825      	ldr	r5, [r4, #0]
 8003b14:	f015 0506 	ands.w	r5, r5, #6
 8003b18:	d106      	bne.n	8003b28 <_printf_common+0x48>
 8003b1a:	f104 0a19 	add.w	sl, r4, #25
 8003b1e:	68e3      	ldr	r3, [r4, #12]
 8003b20:	6832      	ldr	r2, [r6, #0]
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	42ab      	cmp	r3, r5
 8003b26:	dc26      	bgt.n	8003b76 <_printf_common+0x96>
 8003b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b2c:	1e13      	subs	r3, r2, #0
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	bf18      	it	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	0692      	lsls	r2, r2, #26
 8003b36:	d42b      	bmi.n	8003b90 <_printf_common+0xb0>
 8003b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	4638      	mov	r0, r7
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d01e      	beq.n	8003b84 <_printf_common+0xa4>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	6922      	ldr	r2, [r4, #16]
 8003b4a:	f003 0306 	and.w	r3, r3, #6
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf02      	ittt	eq
 8003b52:	68e5      	ldreq	r5, [r4, #12]
 8003b54:	6833      	ldreq	r3, [r6, #0]
 8003b56:	1aed      	subeq	r5, r5, r3
 8003b58:	68a3      	ldr	r3, [r4, #8]
 8003b5a:	bf0c      	ite	eq
 8003b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b60:	2500      	movne	r5, #0
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bfc4      	itt	gt
 8003b66:	1a9b      	subgt	r3, r3, r2
 8003b68:	18ed      	addgt	r5, r5, r3
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	341a      	adds	r4, #26
 8003b6e:	42b5      	cmp	r5, r6
 8003b70:	d11a      	bne.n	8003ba8 <_printf_common+0xc8>
 8003b72:	2000      	movs	r0, #0
 8003b74:	e008      	b.n	8003b88 <_printf_common+0xa8>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4652      	mov	r2, sl
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c0      	blx	r8
 8003b80:	3001      	adds	r0, #1
 8003b82:	d103      	bne.n	8003b8c <_printf_common+0xac>
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	e7c6      	b.n	8003b1e <_printf_common+0x3e>
 8003b90:	18e1      	adds	r1, r4, r3
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	2030      	movs	r0, #48	; 0x30
 8003b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9a:	4422      	add	r2, r4
 8003b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	e7c7      	b.n	8003b38 <_printf_common+0x58>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4622      	mov	r2, r4
 8003bac:	4649      	mov	r1, r9
 8003bae:	4638      	mov	r0, r7
 8003bb0:	47c0      	blx	r8
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d0e6      	beq.n	8003b84 <_printf_common+0xa4>
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7d9      	b.n	8003b6e <_printf_common+0x8e>
	...

08003bbc <_printf_i>:
 8003bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	7e0f      	ldrb	r7, [r1, #24]
 8003bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc4:	2f78      	cmp	r7, #120	; 0x78
 8003bc6:	4691      	mov	r9, r2
 8003bc8:	4680      	mov	r8, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	469a      	mov	sl, r3
 8003bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bd2:	d807      	bhi.n	8003be4 <_printf_i+0x28>
 8003bd4:	2f62      	cmp	r7, #98	; 0x62
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x32>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	f000 80d4 	beq.w	8003d86 <_printf_i+0x1ca>
 8003bde:	2f58      	cmp	r7, #88	; 0x58
 8003be0:	f000 80c0 	beq.w	8003d64 <_printf_i+0x1a8>
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bec:	e03a      	b.n	8003c64 <_printf_i+0xa8>
 8003bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf2:	2b15      	cmp	r3, #21
 8003bf4:	d8f6      	bhi.n	8003be4 <_printf_i+0x28>
 8003bf6:	a101      	add	r1, pc, #4	; (adr r1, 8003bfc <_printf_i+0x40>)
 8003bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003be5 	.word	0x08003be5
 8003c08:	08003be5 	.word	0x08003be5
 8003c0c:	08003be5 	.word	0x08003be5
 8003c10:	08003be5 	.word	0x08003be5
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003be5 	.word	0x08003be5
 8003c1c:	08003be5 	.word	0x08003be5
 8003c20:	08003be5 	.word	0x08003be5
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	08003d6d 	.word	0x08003d6d
 8003c2c:	08003c95 	.word	0x08003c95
 8003c30:	08003d27 	.word	0x08003d27
 8003c34:	08003be5 	.word	0x08003be5
 8003c38:	08003be5 	.word	0x08003be5
 8003c3c:	08003d8f 	.word	0x08003d8f
 8003c40:	08003be5 	.word	0x08003be5
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003be5 	.word	0x08003be5
 8003c4c:	08003be5 	.word	0x08003be5
 8003c50:	08003d2f 	.word	0x08003d2f
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	602a      	str	r2, [r5, #0]
 8003c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e09f      	b.n	8003da8 <_printf_i+0x1ec>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	0607      	lsls	r7, r0, #24
 8003c6e:	f103 0104 	add.w	r1, r3, #4
 8003c72:	6029      	str	r1, [r5, #0]
 8003c74:	d501      	bpl.n	8003c7a <_printf_i+0xbe>
 8003c76:	681e      	ldr	r6, [r3, #0]
 8003c78:	e003      	b.n	8003c82 <_printf_i+0xc6>
 8003c7a:	0646      	lsls	r6, r0, #25
 8003c7c:	d5fb      	bpl.n	8003c76 <_printf_i+0xba>
 8003c7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	da03      	bge.n	8003c8e <_printf_i+0xd2>
 8003c86:	232d      	movs	r3, #45	; 0x2d
 8003c88:	4276      	negs	r6, r6
 8003c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c8e:	485a      	ldr	r0, [pc, #360]	; (8003df8 <_printf_i+0x23c>)
 8003c90:	230a      	movs	r3, #10
 8003c92:	e012      	b.n	8003cba <_printf_i+0xfe>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1d19      	adds	r1, r3, #4
 8003c9a:	6029      	str	r1, [r5, #0]
 8003c9c:	0605      	lsls	r5, r0, #24
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0xe8>
 8003ca0:	681e      	ldr	r6, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0xee>
 8003ca4:	0641      	lsls	r1, r0, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0xe4>
 8003ca8:	881e      	ldrh	r6, [r3, #0]
 8003caa:	4853      	ldr	r0, [pc, #332]	; (8003df8 <_printf_i+0x23c>)
 8003cac:	2f6f      	cmp	r7, #111	; 0x6f
 8003cae:	bf0c      	ite	eq
 8003cb0:	2308      	moveq	r3, #8
 8003cb2:	230a      	movne	r3, #10
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cba:	6865      	ldr	r5, [r4, #4]
 8003cbc:	60a5      	str	r5, [r4, #8]
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	bfa2      	ittt	ge
 8003cc2:	6821      	ldrge	r1, [r4, #0]
 8003cc4:	f021 0104 	bicge.w	r1, r1, #4
 8003cc8:	6021      	strge	r1, [r4, #0]
 8003cca:	b90e      	cbnz	r6, 8003cd0 <_printf_i+0x114>
 8003ccc:	2d00      	cmp	r5, #0
 8003cce:	d04b      	beq.n	8003d68 <_printf_i+0x1ac>
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8003cda:	5dc7      	ldrb	r7, [r0, r7]
 8003cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce0:	4637      	mov	r7, r6
 8003ce2:	42bb      	cmp	r3, r7
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	d9f4      	bls.n	8003cd2 <_printf_i+0x116>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d10b      	bne.n	8003d04 <_printf_i+0x148>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	07de      	lsls	r6, r3, #31
 8003cf0:	d508      	bpl.n	8003d04 <_printf_i+0x148>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	6861      	ldr	r1, [r4, #4]
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	bfde      	ittt	le
 8003cfa:	2330      	movle	r3, #48	; 0x30
 8003cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d04:	1b52      	subs	r2, r2, r5
 8003d06:	6122      	str	r2, [r4, #16]
 8003d08:	f8cd a000 	str.w	sl, [sp]
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	aa03      	add	r2, sp, #12
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fee4 	bl	8003ae0 <_printf_common>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d14a      	bne.n	8003db2 <_printf_i+0x1f6>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	b004      	add	sp, #16
 8003d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	4833      	ldr	r0, [pc, #204]	; (8003dfc <_printf_i+0x240>)
 8003d30:	2778      	movs	r7, #120	; 0x78
 8003d32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6829      	ldr	r1, [r5, #0]
 8003d3a:	061f      	lsls	r7, r3, #24
 8003d3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d40:	d402      	bmi.n	8003d48 <_printf_i+0x18c>
 8003d42:	065f      	lsls	r7, r3, #25
 8003d44:	bf48      	it	mi
 8003d46:	b2b6      	uxthmi	r6, r6
 8003d48:	07df      	lsls	r7, r3, #31
 8003d4a:	bf48      	it	mi
 8003d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d50:	6029      	str	r1, [r5, #0]
 8003d52:	bf48      	it	mi
 8003d54:	6023      	strmi	r3, [r4, #0]
 8003d56:	b91e      	cbnz	r6, 8003d60 <_printf_i+0x1a4>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	f023 0320 	bic.w	r3, r3, #32
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	2310      	movs	r3, #16
 8003d62:	e7a7      	b.n	8003cb4 <_printf_i+0xf8>
 8003d64:	4824      	ldr	r0, [pc, #144]	; (8003df8 <_printf_i+0x23c>)
 8003d66:	e7e4      	b.n	8003d32 <_printf_i+0x176>
 8003d68:	4615      	mov	r5, r2
 8003d6a:	e7bd      	b.n	8003ce8 <_printf_i+0x12c>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	6826      	ldr	r6, [r4, #0]
 8003d70:	6961      	ldr	r1, [r4, #20]
 8003d72:	1d18      	adds	r0, r3, #4
 8003d74:	6028      	str	r0, [r5, #0]
 8003d76:	0635      	lsls	r5, r6, #24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0x1c4>
 8003d7c:	6019      	str	r1, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <_printf_i+0x1ca>
 8003d80:	0670      	lsls	r0, r6, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0x1c0>
 8003d84:	8019      	strh	r1, [r3, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	e7bc      	b.n	8003d08 <_printf_i+0x14c>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	602a      	str	r2, [r5, #0]
 8003d94:	681d      	ldr	r5, [r3, #0]
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f7fc fa18 	bl	80001d0 <memchr>
 8003da0:	b108      	cbz	r0, 8003da6 <_printf_i+0x1ea>
 8003da2:	1b40      	subs	r0, r0, r5
 8003da4:	6060      	str	r0, [r4, #4]
 8003da6:	6863      	ldr	r3, [r4, #4]
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	2300      	movs	r3, #0
 8003dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db0:	e7aa      	b.n	8003d08 <_printf_i+0x14c>
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	462a      	mov	r2, r5
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d0ad      	beq.n	8003d1c <_printf_i+0x160>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	079b      	lsls	r3, r3, #30
 8003dc4:	d413      	bmi.n	8003dee <_printf_i+0x232>
 8003dc6:	68e0      	ldr	r0, [r4, #12]
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	bfb8      	it	lt
 8003dce:	4618      	movlt	r0, r3
 8003dd0:	e7a6      	b.n	8003d20 <_printf_i+0x164>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	47d0      	blx	sl
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d09d      	beq.n	8003d1c <_printf_i+0x160>
 8003de0:	3501      	adds	r5, #1
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	9903      	ldr	r1, [sp, #12]
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dcf2      	bgt.n	8003dd2 <_printf_i+0x216>
 8003dec:	e7eb      	b.n	8003dc6 <_printf_i+0x20a>
 8003dee:	2500      	movs	r5, #0
 8003df0:	f104 0619 	add.w	r6, r4, #25
 8003df4:	e7f5      	b.n	8003de2 <_printf_i+0x226>
 8003df6:	bf00      	nop
 8003df8:	08006a99 	.word	0x08006a99
 8003dfc:	08006aaa 	.word	0x08006aaa

08003e00 <std>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
 8003e06:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0e:	6083      	str	r3, [r0, #8]
 8003e10:	8181      	strh	r1, [r0, #12]
 8003e12:	6643      	str	r3, [r0, #100]	; 0x64
 8003e14:	81c2      	strh	r2, [r0, #14]
 8003e16:	6183      	str	r3, [r0, #24]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	305c      	adds	r0, #92	; 0x5c
 8003e1e:	f000 f914 	bl	800404a <memset>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <std+0x58>)
 8003e24:	6263      	str	r3, [r4, #36]	; 0x24
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <std+0x5c>)
 8003e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <std+0x60>)
 8003e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <std+0x64>)
 8003e30:	6323      	str	r3, [r4, #48]	; 0x30
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <std+0x68>)
 8003e34:	6224      	str	r4, [r4, #32]
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d006      	beq.n	8003e48 <std+0x48>
 8003e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e3e:	4294      	cmp	r4, r2
 8003e40:	d002      	beq.n	8003e48 <std+0x48>
 8003e42:	33d0      	adds	r3, #208	; 0xd0
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d105      	bne.n	8003e54 <std+0x54>
 8003e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f000 b978 	b.w	8004144 <__retarget_lock_init_recursive>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	08003fc5 	.word	0x08003fc5
 8003e5c:	08003fe7 	.word	0x08003fe7
 8003e60:	0800401f 	.word	0x0800401f
 8003e64:	08004043 	.word	0x08004043
 8003e68:	20000480 	.word	0x20000480

08003e6c <stdio_exit_handler>:
 8003e6c:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <stdio_exit_handler+0xc>)
 8003e6e:	4903      	ldr	r1, [pc, #12]	; (8003e7c <stdio_exit_handler+0x10>)
 8003e70:	4803      	ldr	r0, [pc, #12]	; (8003e80 <stdio_exit_handler+0x14>)
 8003e72:	f000 b869 	b.w	8003f48 <_fwalk_sglue>
 8003e76:	bf00      	nop
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	08005af9 	.word	0x08005af9
 8003e80:	20000010 	.word	0x20000010

08003e84 <cleanup_stdio>:
 8003e84:	6841      	ldr	r1, [r0, #4]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <cleanup_stdio+0x34>)
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d001      	beq.n	8003e94 <cleanup_stdio+0x10>
 8003e90:	f001 fe32 	bl	8005af8 <_fflush_r>
 8003e94:	68a1      	ldr	r1, [r4, #8]
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <cleanup_stdio+0x38>)
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <cleanup_stdio+0x1e>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f001 fe2b 	bl	8005af8 <_fflush_r>
 8003ea2:	68e1      	ldr	r1, [r4, #12]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <cleanup_stdio+0x3c>)
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d004      	beq.n	8003eb4 <cleanup_stdio+0x30>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f001 be22 	b.w	8005af8 <_fflush_r>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000480 	.word	0x20000480
 8003ebc:	200004e8 	.word	0x200004e8
 8003ec0:	20000550 	.word	0x20000550

08003ec4 <global_stdio_init.part.0>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <global_stdio_init.part.0+0x30>)
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	; (8003ef8 <global_stdio_init.part.0+0x34>)
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <global_stdio_init.part.0+0x38>)
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	f7ff ff94 	bl	8003e00 <std>
 8003ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003edc:	2201      	movs	r2, #1
 8003ede:	2109      	movs	r1, #9
 8003ee0:	f7ff ff8e 	bl	8003e00 <std>
 8003ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ee8:	2202      	movs	r2, #2
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff bf86 	b.w	8003e00 <std>
 8003ef4:	200005b8 	.word	0x200005b8
 8003ef8:	20000480 	.word	0x20000480
 8003efc:	08003e6d 	.word	0x08003e6d

08003f00 <__sfp_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <__sfp_lock_acquire+0x8>)
 8003f02:	f000 b920 	b.w	8004146 <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	200005c1 	.word	0x200005c1

08003f0c <__sfp_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__sfp_lock_release+0x8>)
 8003f0e:	f000 b91b 	b.w	8004148 <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	200005c1 	.word	0x200005c1

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sfp_lock_acquire>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sfp_lock_release>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__sinit+0x28>)
 8003f2e:	6223      	str	r3, [r4, #32]
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <__sinit+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f5      	bne.n	8003f24 <__sinit+0xc>
 8003f38:	f7ff ffc4 	bl	8003ec4 <global_stdio_init.part.0>
 8003f3c:	e7f2      	b.n	8003f24 <__sinit+0xc>
 8003f3e:	bf00      	nop
 8003f40:	08003e85 	.word	0x08003e85
 8003f44:	200005b8 	.word	0x200005b8

08003f48 <_fwalk_sglue>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	2600      	movs	r6, #0
 8003f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f58:	f1b9 0901 	subs.w	r9, r9, #1
 8003f5c:	d505      	bpl.n	8003f6a <_fwalk_sglue+0x22>
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d1f7      	bne.n	8003f54 <_fwalk_sglue+0xc>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <_fwalk_sglue+0x38>
 8003f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f74:	3301      	adds	r3, #1
 8003f76:	d003      	beq.n	8003f80 <_fwalk_sglue+0x38>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	4306      	orrs	r6, r0
 8003f80:	3568      	adds	r5, #104	; 0x68
 8003f82:	e7e9      	b.n	8003f58 <_fwalk_sglue+0x10>

08003f84 <siprintf>:
 8003f84:	b40e      	push	{r1, r2, r3}
 8003f86:	b500      	push	{lr}
 8003f88:	b09c      	sub	sp, #112	; 0x70
 8003f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f8c:	9002      	str	r0, [sp, #8]
 8003f8e:	9006      	str	r0, [sp, #24]
 8003f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f94:	4809      	ldr	r0, [pc, #36]	; (8003fbc <siprintf+0x38>)
 8003f96:	9107      	str	r1, [sp, #28]
 8003f98:	9104      	str	r1, [sp, #16]
 8003f9a:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <siprintf+0x3c>)
 8003f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa0:	9105      	str	r1, [sp, #20]
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	a902      	add	r1, sp, #8
 8003fa8:	f001 fc22 	bl	80057f0 <_svfiprintf_r>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	b01c      	add	sp, #112	; 0x70
 8003fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb8:	b003      	add	sp, #12
 8003fba:	4770      	bx	lr
 8003fbc:	2000005c 	.word	0x2000005c
 8003fc0:	ffff0208 	.word	0xffff0208

08003fc4 <__sread>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fcc:	f000 f86c 	bl	80040a8 <_read_r>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	bfab      	itete	ge
 8003fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fd8:	181b      	addge	r3, r3, r0
 8003fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fde:	bfac      	ite	ge
 8003fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fe2:	81a3      	strhlt	r3, [r4, #12]
 8003fe4:	bd10      	pop	{r4, pc}

08003fe6 <__swrite>:
 8003fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fea:	461f      	mov	r7, r3
 8003fec:	898b      	ldrh	r3, [r1, #12]
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	d505      	bpl.n	8004004 <__swrite+0x1e>
 8003ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	2200      	movs	r2, #0
 8004000:	f000 f840 	bl	8004084 <_lseek_r>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	4632      	mov	r2, r6
 8004012:	463b      	mov	r3, r7
 8004014:	4628      	mov	r0, r5
 8004016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	f000 b857 	b.w	80040cc <_write_r>

0800401e <__sseek>:
 800401e:	b510      	push	{r4, lr}
 8004020:	460c      	mov	r4, r1
 8004022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004026:	f000 f82d 	bl	8004084 <_lseek_r>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	bf15      	itete	ne
 8004030:	6560      	strne	r0, [r4, #84]	; 0x54
 8004032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800403a:	81a3      	strheq	r3, [r4, #12]
 800403c:	bf18      	it	ne
 800403e:	81a3      	strhne	r3, [r4, #12]
 8004040:	bd10      	pop	{r4, pc}

08004042 <__sclose>:
 8004042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004046:	f000 b80d 	b.w	8004064 <_close_r>

0800404a <memset>:
 800404a:	4402      	add	r2, r0
 800404c:	4603      	mov	r3, r0
 800404e:	4293      	cmp	r3, r2
 8004050:	d100      	bne.n	8004054 <memset+0xa>
 8004052:	4770      	bx	lr
 8004054:	f803 1b01 	strb.w	r1, [r3], #1
 8004058:	e7f9      	b.n	800404e <memset+0x4>
	...

0800405c <_localeconv_r>:
 800405c:	4800      	ldr	r0, [pc, #0]	; (8004060 <_localeconv_r+0x4>)
 800405e:	4770      	bx	lr
 8004060:	20000150 	.word	0x20000150

08004064 <_close_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d06      	ldr	r5, [pc, #24]	; (8004080 <_close_r+0x1c>)
 8004068:	2300      	movs	r3, #0
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fe fcb7 	bl	80029e2 <_close>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_close_r+0x1a>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_close_r+0x1a>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	200005bc 	.word	0x200005bc

08004084 <_lseek_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d07      	ldr	r5, [pc, #28]	; (80040a4 <_lseek_r+0x20>)
 8004088:	4604      	mov	r4, r0
 800408a:	4608      	mov	r0, r1
 800408c:	4611      	mov	r1, r2
 800408e:	2200      	movs	r2, #0
 8004090:	602a      	str	r2, [r5, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	f7fe fccc 	bl	8002a30 <_lseek>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_lseek_r+0x1e>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_lseek_r+0x1e>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	200005bc 	.word	0x200005bc

080040a8 <_read_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d07      	ldr	r5, [pc, #28]	; (80040c8 <_read_r+0x20>)
 80040ac:	4604      	mov	r4, r0
 80040ae:	4608      	mov	r0, r1
 80040b0:	4611      	mov	r1, r2
 80040b2:	2200      	movs	r2, #0
 80040b4:	602a      	str	r2, [r5, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f7fe fc5a 	bl	8002970 <_read>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_read_r+0x1e>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_read_r+0x1e>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	200005bc 	.word	0x200005bc

080040cc <_write_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4d07      	ldr	r5, [pc, #28]	; (80040ec <_write_r+0x20>)
 80040d0:	4604      	mov	r4, r0
 80040d2:	4608      	mov	r0, r1
 80040d4:	4611      	mov	r1, r2
 80040d6:	2200      	movs	r2, #0
 80040d8:	602a      	str	r2, [r5, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	f7fe fc65 	bl	80029aa <_write>
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	d102      	bne.n	80040ea <_write_r+0x1e>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	b103      	cbz	r3, 80040ea <_write_r+0x1e>
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	200005bc 	.word	0x200005bc

080040f0 <__errno>:
 80040f0:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <__errno+0x8>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	2000005c 	.word	0x2000005c

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4d0d      	ldr	r5, [pc, #52]	; (8004134 <__libc_init_array+0x38>)
 8004100:	4c0d      	ldr	r4, [pc, #52]	; (8004138 <__libc_init_array+0x3c>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	2600      	movs	r6, #0
 8004108:	42a6      	cmp	r6, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	4d0b      	ldr	r5, [pc, #44]	; (800413c <__libc_init_array+0x40>)
 800410e:	4c0c      	ldr	r4, [pc, #48]	; (8004140 <__libc_init_array+0x44>)
 8004110:	f002 fc58 	bl	80069c4 <_init>
 8004114:	1b64      	subs	r4, r4, r5
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	2600      	movs	r6, #0
 800411a:	42a6      	cmp	r6, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	f855 3b04 	ldr.w	r3, [r5], #4
 8004124:	4798      	blx	r3
 8004126:	3601      	adds	r6, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	f855 3b04 	ldr.w	r3, [r5], #4
 800412e:	4798      	blx	r3
 8004130:	3601      	adds	r6, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	08006e14 	.word	0x08006e14
 8004138:	08006e14 	.word	0x08006e14
 800413c:	08006e14 	.word	0x08006e14
 8004140:	08006e18 	.word	0x08006e18

08004144 <__retarget_lock_init_recursive>:
 8004144:	4770      	bx	lr

08004146 <__retarget_lock_acquire_recursive>:
 8004146:	4770      	bx	lr

08004148 <__retarget_lock_release_recursive>:
 8004148:	4770      	bx	lr

0800414a <quorem>:
 800414a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414e:	6903      	ldr	r3, [r0, #16]
 8004150:	690c      	ldr	r4, [r1, #16]
 8004152:	42a3      	cmp	r3, r4
 8004154:	4607      	mov	r7, r0
 8004156:	db7e      	blt.n	8004256 <quorem+0x10c>
 8004158:	3c01      	subs	r4, #1
 800415a:	f101 0814 	add.w	r8, r1, #20
 800415e:	f100 0514 	add.w	r5, r0, #20
 8004162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800416c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004170:	3301      	adds	r3, #1
 8004172:	429a      	cmp	r2, r3
 8004174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800417c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004180:	d331      	bcc.n	80041e6 <quorem+0x9c>
 8004182:	f04f 0e00 	mov.w	lr, #0
 8004186:	4640      	mov	r0, r8
 8004188:	46ac      	mov	ip, r5
 800418a:	46f2      	mov	sl, lr
 800418c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004190:	b293      	uxth	r3, r2
 8004192:	fb06 e303 	mla	r3, r6, r3, lr
 8004196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800419a:	0c1a      	lsrs	r2, r3, #16
 800419c:	b29b      	uxth	r3, r3
 800419e:	ebaa 0303 	sub.w	r3, sl, r3
 80041a2:	f8dc a000 	ldr.w	sl, [ip]
 80041a6:	fa13 f38a 	uxtah	r3, r3, sl
 80041aa:	fb06 220e 	mla	r2, r6, lr, r2
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	9b00      	ldr	r3, [sp, #0]
 80041b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041b6:	b292      	uxth	r2, r2
 80041b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80041bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80041c4:	4581      	cmp	r9, r0
 80041c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ca:	f84c 3b04 	str.w	r3, [ip], #4
 80041ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041d2:	d2db      	bcs.n	800418c <quorem+0x42>
 80041d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80041d8:	b92b      	cbnz	r3, 80041e6 <quorem+0x9c>
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	3b04      	subs	r3, #4
 80041de:	429d      	cmp	r5, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	d32c      	bcc.n	800423e <quorem+0xf4>
 80041e4:	613c      	str	r4, [r7, #16]
 80041e6:	4638      	mov	r0, r7
 80041e8:	f001 f9a8 	bl	800553c <__mcmp>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	db22      	blt.n	8004236 <quorem+0xec>
 80041f0:	3601      	adds	r6, #1
 80041f2:	4629      	mov	r1, r5
 80041f4:	2000      	movs	r0, #0
 80041f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80041fa:	f8d1 c000 	ldr.w	ip, [r1]
 80041fe:	b293      	uxth	r3, r2
 8004200:	1ac3      	subs	r3, r0, r3
 8004202:	0c12      	lsrs	r2, r2, #16
 8004204:	fa13 f38c 	uxtah	r3, r3, ip
 8004208:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800420c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004210:	b29b      	uxth	r3, r3
 8004212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004216:	45c1      	cmp	r9, r8
 8004218:	f841 3b04 	str.w	r3, [r1], #4
 800421c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004220:	d2e9      	bcs.n	80041f6 <quorem+0xac>
 8004222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800422a:	b922      	cbnz	r2, 8004236 <quorem+0xec>
 800422c:	3b04      	subs	r3, #4
 800422e:	429d      	cmp	r5, r3
 8004230:	461a      	mov	r2, r3
 8004232:	d30a      	bcc.n	800424a <quorem+0x100>
 8004234:	613c      	str	r4, [r7, #16]
 8004236:	4630      	mov	r0, r6
 8004238:	b003      	add	sp, #12
 800423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	3b04      	subs	r3, #4
 8004242:	2a00      	cmp	r2, #0
 8004244:	d1ce      	bne.n	80041e4 <quorem+0x9a>
 8004246:	3c01      	subs	r4, #1
 8004248:	e7c9      	b.n	80041de <quorem+0x94>
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	3b04      	subs	r3, #4
 800424e:	2a00      	cmp	r2, #0
 8004250:	d1f0      	bne.n	8004234 <quorem+0xea>
 8004252:	3c01      	subs	r4, #1
 8004254:	e7eb      	b.n	800422e <quorem+0xe4>
 8004256:	2000      	movs	r0, #0
 8004258:	e7ee      	b.n	8004238 <quorem+0xee>
 800425a:	0000      	movs	r0, r0
 800425c:	0000      	movs	r0, r0
	...

08004260 <_dtoa_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	ed2d 8b04 	vpush	{d8-d9}
 8004268:	69c5      	ldr	r5, [r0, #28]
 800426a:	b093      	sub	sp, #76	; 0x4c
 800426c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004270:	ec57 6b10 	vmov	r6, r7, d0
 8004274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004278:	9107      	str	r1, [sp, #28]
 800427a:	4604      	mov	r4, r0
 800427c:	920a      	str	r2, [sp, #40]	; 0x28
 800427e:	930d      	str	r3, [sp, #52]	; 0x34
 8004280:	b975      	cbnz	r5, 80042a0 <_dtoa_r+0x40>
 8004282:	2010      	movs	r0, #16
 8004284:	f000 fe2a 	bl	8004edc <malloc>
 8004288:	4602      	mov	r2, r0
 800428a:	61e0      	str	r0, [r4, #28]
 800428c:	b920      	cbnz	r0, 8004298 <_dtoa_r+0x38>
 800428e:	4bae      	ldr	r3, [pc, #696]	; (8004548 <_dtoa_r+0x2e8>)
 8004290:	21ef      	movs	r1, #239	; 0xef
 8004292:	48ae      	ldr	r0, [pc, #696]	; (800454c <_dtoa_r+0x2ec>)
 8004294:	f001 fc90 	bl	8005bb8 <__assert_func>
 8004298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800429c:	6005      	str	r5, [r0, #0]
 800429e:	60c5      	str	r5, [r0, #12]
 80042a0:	69e3      	ldr	r3, [r4, #28]
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	b151      	cbz	r1, 80042bc <_dtoa_r+0x5c>
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	604a      	str	r2, [r1, #4]
 80042aa:	2301      	movs	r3, #1
 80042ac:	4093      	lsls	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 ff07 	bl	80050c4 <_Bfree>
 80042b6:	69e3      	ldr	r3, [r4, #28]
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	1e3b      	subs	r3, r7, #0
 80042be:	bfbb      	ittet	lt
 80042c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042c4:	9303      	strlt	r3, [sp, #12]
 80042c6:	2300      	movge	r3, #0
 80042c8:	2201      	movlt	r2, #1
 80042ca:	bfac      	ite	ge
 80042cc:	f8c8 3000 	strge.w	r3, [r8]
 80042d0:	f8c8 2000 	strlt.w	r2, [r8]
 80042d4:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <_dtoa_r+0x2f0>)
 80042d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80042da:	ea33 0308 	bics.w	r3, r3, r8
 80042de:	d11b      	bne.n	8004318 <_dtoa_r+0xb8>
 80042e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80042ec:	4333      	orrs	r3, r6
 80042ee:	f000 8593 	beq.w	8004e18 <_dtoa_r+0xbb8>
 80042f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042f4:	b963      	cbnz	r3, 8004310 <_dtoa_r+0xb0>
 80042f6:	4b97      	ldr	r3, [pc, #604]	; (8004554 <_dtoa_r+0x2f4>)
 80042f8:	e027      	b.n	800434a <_dtoa_r+0xea>
 80042fa:	4b97      	ldr	r3, [pc, #604]	; (8004558 <_dtoa_r+0x2f8>)
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	3308      	adds	r3, #8
 8004300:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	9800      	ldr	r0, [sp, #0]
 8004306:	b013      	add	sp, #76	; 0x4c
 8004308:	ecbd 8b04 	vpop	{d8-d9}
 800430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004310:	4b90      	ldr	r3, [pc, #576]	; (8004554 <_dtoa_r+0x2f4>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	3303      	adds	r3, #3
 8004316:	e7f3      	b.n	8004300 <_dtoa_r+0xa0>
 8004318:	ed9d 7b02 	vldr	d7, [sp, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	ec51 0b17 	vmov	r0, r1, d7
 8004322:	eeb0 8a47 	vmov.f32	s16, s14
 8004326:	eef0 8a67 	vmov.f32	s17, s15
 800432a:	2300      	movs	r3, #0
 800432c:	f7fc fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004330:	4681      	mov	r9, r0
 8004332:	b160      	cbz	r0, 800434e <_dtoa_r+0xee>
 8004334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004336:	2301      	movs	r3, #1
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8568 	beq.w	8004e12 <_dtoa_r+0xbb2>
 8004342:	4b86      	ldr	r3, [pc, #536]	; (800455c <_dtoa_r+0x2fc>)
 8004344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	3b01      	subs	r3, #1
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	e7da      	b.n	8004304 <_dtoa_r+0xa4>
 800434e:	aa10      	add	r2, sp, #64	; 0x40
 8004350:	a911      	add	r1, sp, #68	; 0x44
 8004352:	4620      	mov	r0, r4
 8004354:	eeb0 0a48 	vmov.f32	s0, s16
 8004358:	eef0 0a68 	vmov.f32	s1, s17
 800435c:	f001 f994 	bl	8005688 <__d2b>
 8004360:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004364:	4682      	mov	sl, r0
 8004366:	2d00      	cmp	r5, #0
 8004368:	d07f      	beq.n	800446a <_dtoa_r+0x20a>
 800436a:	ee18 3a90 	vmov	r3, s17
 800436e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004372:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004376:	ec51 0b18 	vmov	r0, r1, d8
 800437a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800437e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004382:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004386:	4619      	mov	r1, r3
 8004388:	2200      	movs	r2, #0
 800438a:	4b75      	ldr	r3, [pc, #468]	; (8004560 <_dtoa_r+0x300>)
 800438c:	f7fb ff7c 	bl	8000288 <__aeabi_dsub>
 8004390:	a367      	add	r3, pc, #412	; (adr r3, 8004530 <_dtoa_r+0x2d0>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f92f 	bl	80005f8 <__aeabi_dmul>
 800439a:	a367      	add	r3, pc, #412	; (adr r3, 8004538 <_dtoa_r+0x2d8>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff74 	bl	800028c <__adddf3>
 80043a4:	4606      	mov	r6, r0
 80043a6:	4628      	mov	r0, r5
 80043a8:	460f      	mov	r7, r1
 80043aa:	f7fc f8bb 	bl	8000524 <__aeabi_i2d>
 80043ae:	a364      	add	r3, pc, #400	; (adr r3, 8004540 <_dtoa_r+0x2e0>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fc f920 	bl	80005f8 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4630      	mov	r0, r6
 80043be:	4639      	mov	r1, r7
 80043c0:	f7fb ff64 	bl	800028c <__adddf3>
 80043c4:	4606      	mov	r6, r0
 80043c6:	460f      	mov	r7, r1
 80043c8:	f7fc fbc6 	bl	8000b58 <__aeabi_d2iz>
 80043cc:	2200      	movs	r2, #0
 80043ce:	4683      	mov	fp, r0
 80043d0:	2300      	movs	r3, #0
 80043d2:	4630      	mov	r0, r6
 80043d4:	4639      	mov	r1, r7
 80043d6:	f7fc fb81 	bl	8000adc <__aeabi_dcmplt>
 80043da:	b148      	cbz	r0, 80043f0 <_dtoa_r+0x190>
 80043dc:	4658      	mov	r0, fp
 80043de:	f7fc f8a1 	bl	8000524 <__aeabi_i2d>
 80043e2:	4632      	mov	r2, r6
 80043e4:	463b      	mov	r3, r7
 80043e6:	f7fc fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ea:	b908      	cbnz	r0, 80043f0 <_dtoa_r+0x190>
 80043ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043f0:	f1bb 0f16 	cmp.w	fp, #22
 80043f4:	d857      	bhi.n	80044a6 <_dtoa_r+0x246>
 80043f6:	4b5b      	ldr	r3, [pc, #364]	; (8004564 <_dtoa_r+0x304>)
 80043f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	ec51 0b18 	vmov	r0, r1, d8
 8004404:	f7fc fb6a 	bl	8000adc <__aeabi_dcmplt>
 8004408:	2800      	cmp	r0, #0
 800440a:	d04e      	beq.n	80044aa <_dtoa_r+0x24a>
 800440c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004410:	2300      	movs	r3, #0
 8004412:	930c      	str	r3, [sp, #48]	; 0x30
 8004414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004416:	1b5b      	subs	r3, r3, r5
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	bf45      	ittet	mi
 800441c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004420:	9305      	strmi	r3, [sp, #20]
 8004422:	2300      	movpl	r3, #0
 8004424:	2300      	movmi	r3, #0
 8004426:	9206      	str	r2, [sp, #24]
 8004428:	bf54      	ite	pl
 800442a:	9305      	strpl	r3, [sp, #20]
 800442c:	9306      	strmi	r3, [sp, #24]
 800442e:	f1bb 0f00 	cmp.w	fp, #0
 8004432:	db3c      	blt.n	80044ae <_dtoa_r+0x24e>
 8004434:	9b06      	ldr	r3, [sp, #24]
 8004436:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800443a:	445b      	add	r3, fp
 800443c:	9306      	str	r3, [sp, #24]
 800443e:	2300      	movs	r3, #0
 8004440:	9308      	str	r3, [sp, #32]
 8004442:	9b07      	ldr	r3, [sp, #28]
 8004444:	2b09      	cmp	r3, #9
 8004446:	d868      	bhi.n	800451a <_dtoa_r+0x2ba>
 8004448:	2b05      	cmp	r3, #5
 800444a:	bfc4      	itt	gt
 800444c:	3b04      	subgt	r3, #4
 800444e:	9307      	strgt	r3, [sp, #28]
 8004450:	9b07      	ldr	r3, [sp, #28]
 8004452:	f1a3 0302 	sub.w	r3, r3, #2
 8004456:	bfcc      	ite	gt
 8004458:	2500      	movgt	r5, #0
 800445a:	2501      	movle	r5, #1
 800445c:	2b03      	cmp	r3, #3
 800445e:	f200 8085 	bhi.w	800456c <_dtoa_r+0x30c>
 8004462:	e8df f003 	tbb	[pc, r3]
 8004466:	3b2e      	.short	0x3b2e
 8004468:	5839      	.short	0x5839
 800446a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800446e:	441d      	add	r5, r3
 8004470:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004474:	2b20      	cmp	r3, #32
 8004476:	bfc1      	itttt	gt
 8004478:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800447c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004480:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004484:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004488:	bfd6      	itet	le
 800448a:	f1c3 0320 	rsble	r3, r3, #32
 800448e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004492:	fa06 f003 	lslle.w	r0, r6, r3
 8004496:	f7fc f835 	bl	8000504 <__aeabi_ui2d>
 800449a:	2201      	movs	r2, #1
 800449c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80044a0:	3d01      	subs	r5, #1
 80044a2:	920e      	str	r2, [sp, #56]	; 0x38
 80044a4:	e76f      	b.n	8004386 <_dtoa_r+0x126>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e7b3      	b.n	8004412 <_dtoa_r+0x1b2>
 80044aa:	900c      	str	r0, [sp, #48]	; 0x30
 80044ac:	e7b2      	b.n	8004414 <_dtoa_r+0x1b4>
 80044ae:	9b05      	ldr	r3, [sp, #20]
 80044b0:	eba3 030b 	sub.w	r3, r3, fp
 80044b4:	9305      	str	r3, [sp, #20]
 80044b6:	f1cb 0300 	rsb	r3, fp, #0
 80044ba:	9308      	str	r3, [sp, #32]
 80044bc:	2300      	movs	r3, #0
 80044be:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c0:	e7bf      	b.n	8004442 <_dtoa_r+0x1e2>
 80044c2:	2300      	movs	r3, #0
 80044c4:	9309      	str	r3, [sp, #36]	; 0x24
 80044c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dc52      	bgt.n	8004572 <_dtoa_r+0x312>
 80044cc:	2301      	movs	r3, #1
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	461a      	mov	r2, r3
 80044d4:	920a      	str	r2, [sp, #40]	; 0x28
 80044d6:	e00b      	b.n	80044f0 <_dtoa_r+0x290>
 80044d8:	2301      	movs	r3, #1
 80044da:	e7f3      	b.n	80044c4 <_dtoa_r+0x264>
 80044dc:	2300      	movs	r3, #0
 80044de:	9309      	str	r3, [sp, #36]	; 0x24
 80044e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044e2:	445b      	add	r3, fp
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	3301      	adds	r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	9304      	str	r3, [sp, #16]
 80044ec:	bfb8      	it	lt
 80044ee:	2301      	movlt	r3, #1
 80044f0:	69e0      	ldr	r0, [r4, #28]
 80044f2:	2100      	movs	r1, #0
 80044f4:	2204      	movs	r2, #4
 80044f6:	f102 0614 	add.w	r6, r2, #20
 80044fa:	429e      	cmp	r6, r3
 80044fc:	d93d      	bls.n	800457a <_dtoa_r+0x31a>
 80044fe:	6041      	str	r1, [r0, #4]
 8004500:	4620      	mov	r0, r4
 8004502:	f000 fd9f 	bl	8005044 <_Balloc>
 8004506:	9000      	str	r0, [sp, #0]
 8004508:	2800      	cmp	r0, #0
 800450a:	d139      	bne.n	8004580 <_dtoa_r+0x320>
 800450c:	4b16      	ldr	r3, [pc, #88]	; (8004568 <_dtoa_r+0x308>)
 800450e:	4602      	mov	r2, r0
 8004510:	f240 11af 	movw	r1, #431	; 0x1af
 8004514:	e6bd      	b.n	8004292 <_dtoa_r+0x32>
 8004516:	2301      	movs	r3, #1
 8004518:	e7e1      	b.n	80044de <_dtoa_r+0x27e>
 800451a:	2501      	movs	r5, #1
 800451c:	2300      	movs	r3, #0
 800451e:	9307      	str	r3, [sp, #28]
 8004520:	9509      	str	r5, [sp, #36]	; 0x24
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	9304      	str	r3, [sp, #16]
 800452a:	2200      	movs	r2, #0
 800452c:	2312      	movs	r3, #18
 800452e:	e7d1      	b.n	80044d4 <_dtoa_r+0x274>
 8004530:	636f4361 	.word	0x636f4361
 8004534:	3fd287a7 	.word	0x3fd287a7
 8004538:	8b60c8b3 	.word	0x8b60c8b3
 800453c:	3fc68a28 	.word	0x3fc68a28
 8004540:	509f79fb 	.word	0x509f79fb
 8004544:	3fd34413 	.word	0x3fd34413
 8004548:	08006ac8 	.word	0x08006ac8
 800454c:	08006adf 	.word	0x08006adf
 8004550:	7ff00000 	.word	0x7ff00000
 8004554:	08006ac4 	.word	0x08006ac4
 8004558:	08006abb 	.word	0x08006abb
 800455c:	08006a98 	.word	0x08006a98
 8004560:	3ff80000 	.word	0x3ff80000
 8004564:	08006bd0 	.word	0x08006bd0
 8004568:	08006b37 	.word	0x08006b37
 800456c:	2301      	movs	r3, #1
 800456e:	9309      	str	r3, [sp, #36]	; 0x24
 8004570:	e7d7      	b.n	8004522 <_dtoa_r+0x2c2>
 8004572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	e7ba      	b.n	80044f0 <_dtoa_r+0x290>
 800457a:	3101      	adds	r1, #1
 800457c:	0052      	lsls	r2, r2, #1
 800457e:	e7ba      	b.n	80044f6 <_dtoa_r+0x296>
 8004580:	69e3      	ldr	r3, [r4, #28]
 8004582:	9a00      	ldr	r2, [sp, #0]
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	9b04      	ldr	r3, [sp, #16]
 8004588:	2b0e      	cmp	r3, #14
 800458a:	f200 80a8 	bhi.w	80046de <_dtoa_r+0x47e>
 800458e:	2d00      	cmp	r5, #0
 8004590:	f000 80a5 	beq.w	80046de <_dtoa_r+0x47e>
 8004594:	f1bb 0f00 	cmp.w	fp, #0
 8004598:	dd38      	ble.n	800460c <_dtoa_r+0x3ac>
 800459a:	4bc0      	ldr	r3, [pc, #768]	; (800489c <_dtoa_r+0x63c>)
 800459c:	f00b 020f 	and.w	r2, fp, #15
 80045a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80045a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80045ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80045b0:	d019      	beq.n	80045e6 <_dtoa_r+0x386>
 80045b2:	4bbb      	ldr	r3, [pc, #748]	; (80048a0 <_dtoa_r+0x640>)
 80045b4:	ec51 0b18 	vmov	r0, r1, d8
 80045b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045bc:	f7fc f946 	bl	800084c <__aeabi_ddiv>
 80045c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045c4:	f008 080f 	and.w	r8, r8, #15
 80045c8:	2503      	movs	r5, #3
 80045ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80048a0 <_dtoa_r+0x640>
 80045ce:	f1b8 0f00 	cmp.w	r8, #0
 80045d2:	d10a      	bne.n	80045ea <_dtoa_r+0x38a>
 80045d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d8:	4632      	mov	r2, r6
 80045da:	463b      	mov	r3, r7
 80045dc:	f7fc f936 	bl	800084c <__aeabi_ddiv>
 80045e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e4:	e02b      	b.n	800463e <_dtoa_r+0x3de>
 80045e6:	2502      	movs	r5, #2
 80045e8:	e7ef      	b.n	80045ca <_dtoa_r+0x36a>
 80045ea:	f018 0f01 	tst.w	r8, #1
 80045ee:	d008      	beq.n	8004602 <_dtoa_r+0x3a2>
 80045f0:	4630      	mov	r0, r6
 80045f2:	4639      	mov	r1, r7
 80045f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80045f8:	f7fb fffe 	bl	80005f8 <__aeabi_dmul>
 80045fc:	3501      	adds	r5, #1
 80045fe:	4606      	mov	r6, r0
 8004600:	460f      	mov	r7, r1
 8004602:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004606:	f109 0908 	add.w	r9, r9, #8
 800460a:	e7e0      	b.n	80045ce <_dtoa_r+0x36e>
 800460c:	f000 809f 	beq.w	800474e <_dtoa_r+0x4ee>
 8004610:	f1cb 0600 	rsb	r6, fp, #0
 8004614:	4ba1      	ldr	r3, [pc, #644]	; (800489c <_dtoa_r+0x63c>)
 8004616:	4fa2      	ldr	r7, [pc, #648]	; (80048a0 <_dtoa_r+0x640>)
 8004618:	f006 020f 	and.w	r2, r6, #15
 800461c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	ec51 0b18 	vmov	r0, r1, d8
 8004628:	f7fb ffe6 	bl	80005f8 <__aeabi_dmul>
 800462c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004630:	1136      	asrs	r6, r6, #4
 8004632:	2300      	movs	r3, #0
 8004634:	2502      	movs	r5, #2
 8004636:	2e00      	cmp	r6, #0
 8004638:	d17e      	bne.n	8004738 <_dtoa_r+0x4d8>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1d0      	bne.n	80045e0 <_dtoa_r+0x380>
 800463e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004640:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8084 	beq.w	8004752 <_dtoa_r+0x4f2>
 800464a:	4b96      	ldr	r3, [pc, #600]	; (80048a4 <_dtoa_r+0x644>)
 800464c:	2200      	movs	r2, #0
 800464e:	4640      	mov	r0, r8
 8004650:	4649      	mov	r1, r9
 8004652:	f7fc fa43 	bl	8000adc <__aeabi_dcmplt>
 8004656:	2800      	cmp	r0, #0
 8004658:	d07b      	beq.n	8004752 <_dtoa_r+0x4f2>
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d078      	beq.n	8004752 <_dtoa_r+0x4f2>
 8004660:	9b01      	ldr	r3, [sp, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	dd39      	ble.n	80046da <_dtoa_r+0x47a>
 8004666:	4b90      	ldr	r3, [pc, #576]	; (80048a8 <_dtoa_r+0x648>)
 8004668:	2200      	movs	r2, #0
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb ffc3 	bl	80005f8 <__aeabi_dmul>
 8004672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004676:	9e01      	ldr	r6, [sp, #4]
 8004678:	f10b 37ff 	add.w	r7, fp, #4294967295
 800467c:	3501      	adds	r5, #1
 800467e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004682:	4628      	mov	r0, r5
 8004684:	f7fb ff4e 	bl	8000524 <__aeabi_i2d>
 8004688:	4642      	mov	r2, r8
 800468a:	464b      	mov	r3, r9
 800468c:	f7fb ffb4 	bl	80005f8 <__aeabi_dmul>
 8004690:	4b86      	ldr	r3, [pc, #536]	; (80048ac <_dtoa_r+0x64c>)
 8004692:	2200      	movs	r2, #0
 8004694:	f7fb fdfa 	bl	800028c <__adddf3>
 8004698:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800469c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	2e00      	cmp	r6, #0
 80046a4:	d158      	bne.n	8004758 <_dtoa_r+0x4f8>
 80046a6:	4b82      	ldr	r3, [pc, #520]	; (80048b0 <_dtoa_r+0x650>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	4640      	mov	r0, r8
 80046ac:	4649      	mov	r1, r9
 80046ae:	f7fb fdeb 	bl	8000288 <__aeabi_dsub>
 80046b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046b6:	4680      	mov	r8, r0
 80046b8:	4689      	mov	r9, r1
 80046ba:	f7fc fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 80046be:	2800      	cmp	r0, #0
 80046c0:	f040 8296 	bne.w	8004bf0 <_dtoa_r+0x990>
 80046c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80046c8:	4640      	mov	r0, r8
 80046ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046ce:	4649      	mov	r1, r9
 80046d0:	f7fc fa04 	bl	8000adc <__aeabi_dcmplt>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f040 8289 	bne.w	8004bec <_dtoa_r+0x98c>
 80046da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80046de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f2c0 814e 	blt.w	8004982 <_dtoa_r+0x722>
 80046e6:	f1bb 0f0e 	cmp.w	fp, #14
 80046ea:	f300 814a 	bgt.w	8004982 <_dtoa_r+0x722>
 80046ee:	4b6b      	ldr	r3, [pc, #428]	; (800489c <_dtoa_r+0x63c>)
 80046f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f280 80dc 	bge.w	80048b8 <_dtoa_r+0x658>
 8004700:	9b04      	ldr	r3, [sp, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f300 80d8 	bgt.w	80048b8 <_dtoa_r+0x658>
 8004708:	f040 826f 	bne.w	8004bea <_dtoa_r+0x98a>
 800470c:	4b68      	ldr	r3, [pc, #416]	; (80048b0 <_dtoa_r+0x650>)
 800470e:	2200      	movs	r2, #0
 8004710:	4640      	mov	r0, r8
 8004712:	4649      	mov	r1, r9
 8004714:	f7fb ff70 	bl	80005f8 <__aeabi_dmul>
 8004718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800471c:	f7fc f9f2 	bl	8000b04 <__aeabi_dcmpge>
 8004720:	9e04      	ldr	r6, [sp, #16]
 8004722:	4637      	mov	r7, r6
 8004724:	2800      	cmp	r0, #0
 8004726:	f040 8245 	bne.w	8004bb4 <_dtoa_r+0x954>
 800472a:	9d00      	ldr	r5, [sp, #0]
 800472c:	2331      	movs	r3, #49	; 0x31
 800472e:	f805 3b01 	strb.w	r3, [r5], #1
 8004732:	f10b 0b01 	add.w	fp, fp, #1
 8004736:	e241      	b.n	8004bbc <_dtoa_r+0x95c>
 8004738:	07f2      	lsls	r2, r6, #31
 800473a:	d505      	bpl.n	8004748 <_dtoa_r+0x4e8>
 800473c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004740:	f7fb ff5a 	bl	80005f8 <__aeabi_dmul>
 8004744:	3501      	adds	r5, #1
 8004746:	2301      	movs	r3, #1
 8004748:	1076      	asrs	r6, r6, #1
 800474a:	3708      	adds	r7, #8
 800474c:	e773      	b.n	8004636 <_dtoa_r+0x3d6>
 800474e:	2502      	movs	r5, #2
 8004750:	e775      	b.n	800463e <_dtoa_r+0x3de>
 8004752:	9e04      	ldr	r6, [sp, #16]
 8004754:	465f      	mov	r7, fp
 8004756:	e792      	b.n	800467e <_dtoa_r+0x41e>
 8004758:	9900      	ldr	r1, [sp, #0]
 800475a:	4b50      	ldr	r3, [pc, #320]	; (800489c <_dtoa_r+0x63c>)
 800475c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004760:	4431      	add	r1, r6
 8004762:	9102      	str	r1, [sp, #8]
 8004764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004766:	eeb0 9a47 	vmov.f32	s18, s14
 800476a:	eef0 9a67 	vmov.f32	s19, s15
 800476e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004776:	2900      	cmp	r1, #0
 8004778:	d044      	beq.n	8004804 <_dtoa_r+0x5a4>
 800477a:	494e      	ldr	r1, [pc, #312]	; (80048b4 <_dtoa_r+0x654>)
 800477c:	2000      	movs	r0, #0
 800477e:	f7fc f865 	bl	800084c <__aeabi_ddiv>
 8004782:	ec53 2b19 	vmov	r2, r3, d9
 8004786:	f7fb fd7f 	bl	8000288 <__aeabi_dsub>
 800478a:	9d00      	ldr	r5, [sp, #0]
 800478c:	ec41 0b19 	vmov	d9, r0, r1
 8004790:	4649      	mov	r1, r9
 8004792:	4640      	mov	r0, r8
 8004794:	f7fc f9e0 	bl	8000b58 <__aeabi_d2iz>
 8004798:	4606      	mov	r6, r0
 800479a:	f7fb fec3 	bl	8000524 <__aeabi_i2d>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb fd6f 	bl	8000288 <__aeabi_dsub>
 80047aa:	3630      	adds	r6, #48	; 0x30
 80047ac:	f805 6b01 	strb.w	r6, [r5], #1
 80047b0:	ec53 2b19 	vmov	r2, r3, d9
 80047b4:	4680      	mov	r8, r0
 80047b6:	4689      	mov	r9, r1
 80047b8:	f7fc f990 	bl	8000adc <__aeabi_dcmplt>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d164      	bne.n	800488a <_dtoa_r+0x62a>
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	4937      	ldr	r1, [pc, #220]	; (80048a4 <_dtoa_r+0x644>)
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7fb fd5e 	bl	8000288 <__aeabi_dsub>
 80047cc:	ec53 2b19 	vmov	r2, r3, d9
 80047d0:	f7fc f984 	bl	8000adc <__aeabi_dcmplt>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f040 80b6 	bne.w	8004946 <_dtoa_r+0x6e6>
 80047da:	9b02      	ldr	r3, [sp, #8]
 80047dc:	429d      	cmp	r5, r3
 80047de:	f43f af7c 	beq.w	80046da <_dtoa_r+0x47a>
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <_dtoa_r+0x648>)
 80047e4:	ec51 0b19 	vmov	r0, r1, d9
 80047e8:	2200      	movs	r2, #0
 80047ea:	f7fb ff05 	bl	80005f8 <__aeabi_dmul>
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <_dtoa_r+0x648>)
 80047f0:	ec41 0b19 	vmov	d9, r0, r1
 80047f4:	2200      	movs	r2, #0
 80047f6:	4640      	mov	r0, r8
 80047f8:	4649      	mov	r1, r9
 80047fa:	f7fb fefd 	bl	80005f8 <__aeabi_dmul>
 80047fe:	4680      	mov	r8, r0
 8004800:	4689      	mov	r9, r1
 8004802:	e7c5      	b.n	8004790 <_dtoa_r+0x530>
 8004804:	ec51 0b17 	vmov	r0, r1, d7
 8004808:	f7fb fef6 	bl	80005f8 <__aeabi_dmul>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	9d00      	ldr	r5, [sp, #0]
 8004810:	930f      	str	r3, [sp, #60]	; 0x3c
 8004812:	ec41 0b19 	vmov	d9, r0, r1
 8004816:	4649      	mov	r1, r9
 8004818:	4640      	mov	r0, r8
 800481a:	f7fc f99d 	bl	8000b58 <__aeabi_d2iz>
 800481e:	4606      	mov	r6, r0
 8004820:	f7fb fe80 	bl	8000524 <__aeabi_i2d>
 8004824:	3630      	adds	r6, #48	; 0x30
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4640      	mov	r0, r8
 800482c:	4649      	mov	r1, r9
 800482e:	f7fb fd2b 	bl	8000288 <__aeabi_dsub>
 8004832:	f805 6b01 	strb.w	r6, [r5], #1
 8004836:	9b02      	ldr	r3, [sp, #8]
 8004838:	429d      	cmp	r5, r3
 800483a:	4680      	mov	r8, r0
 800483c:	4689      	mov	r9, r1
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	d124      	bne.n	800488e <_dtoa_r+0x62e>
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <_dtoa_r+0x654>)
 8004846:	ec51 0b19 	vmov	r0, r1, d9
 800484a:	f7fb fd1f 	bl	800028c <__adddf3>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4640      	mov	r0, r8
 8004854:	4649      	mov	r1, r9
 8004856:	f7fc f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800485a:	2800      	cmp	r0, #0
 800485c:	d173      	bne.n	8004946 <_dtoa_r+0x6e6>
 800485e:	ec53 2b19 	vmov	r2, r3, d9
 8004862:	4914      	ldr	r1, [pc, #80]	; (80048b4 <_dtoa_r+0x654>)
 8004864:	2000      	movs	r0, #0
 8004866:	f7fb fd0f 	bl	8000288 <__aeabi_dsub>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fc f933 	bl	8000adc <__aeabi_dcmplt>
 8004876:	2800      	cmp	r0, #0
 8004878:	f43f af2f 	beq.w	80046da <_dtoa_r+0x47a>
 800487c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800487e:	1e6b      	subs	r3, r5, #1
 8004880:	930f      	str	r3, [sp, #60]	; 0x3c
 8004882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	d0f8      	beq.n	800487c <_dtoa_r+0x61c>
 800488a:	46bb      	mov	fp, r7
 800488c:	e04a      	b.n	8004924 <_dtoa_r+0x6c4>
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <_dtoa_r+0x648>)
 8004890:	f7fb feb2 	bl	80005f8 <__aeabi_dmul>
 8004894:	4680      	mov	r8, r0
 8004896:	4689      	mov	r9, r1
 8004898:	e7bd      	b.n	8004816 <_dtoa_r+0x5b6>
 800489a:	bf00      	nop
 800489c:	08006bd0 	.word	0x08006bd0
 80048a0:	08006ba8 	.word	0x08006ba8
 80048a4:	3ff00000 	.word	0x3ff00000
 80048a8:	40240000 	.word	0x40240000
 80048ac:	401c0000 	.word	0x401c0000
 80048b0:	40140000 	.word	0x40140000
 80048b4:	3fe00000 	.word	0x3fe00000
 80048b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048bc:	9d00      	ldr	r5, [sp, #0]
 80048be:	4642      	mov	r2, r8
 80048c0:	464b      	mov	r3, r9
 80048c2:	4630      	mov	r0, r6
 80048c4:	4639      	mov	r1, r7
 80048c6:	f7fb ffc1 	bl	800084c <__aeabi_ddiv>
 80048ca:	f7fc f945 	bl	8000b58 <__aeabi_d2iz>
 80048ce:	9001      	str	r0, [sp, #4]
 80048d0:	f7fb fe28 	bl	8000524 <__aeabi_i2d>
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	f7fb fe8e 	bl	80005f8 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fb fcd0 	bl	8000288 <__aeabi_dsub>
 80048e8:	9e01      	ldr	r6, [sp, #4]
 80048ea:	9f04      	ldr	r7, [sp, #16]
 80048ec:	3630      	adds	r6, #48	; 0x30
 80048ee:	f805 6b01 	strb.w	r6, [r5], #1
 80048f2:	9e00      	ldr	r6, [sp, #0]
 80048f4:	1bae      	subs	r6, r5, r6
 80048f6:	42b7      	cmp	r7, r6
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	d134      	bne.n	8004968 <_dtoa_r+0x708>
 80048fe:	f7fb fcc5 	bl	800028c <__adddf3>
 8004902:	4642      	mov	r2, r8
 8004904:	464b      	mov	r3, r9
 8004906:	4606      	mov	r6, r0
 8004908:	460f      	mov	r7, r1
 800490a:	f7fc f905 	bl	8000b18 <__aeabi_dcmpgt>
 800490e:	b9c8      	cbnz	r0, 8004944 <_dtoa_r+0x6e4>
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fc f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800491c:	b110      	cbz	r0, 8004924 <_dtoa_r+0x6c4>
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	07db      	lsls	r3, r3, #31
 8004922:	d40f      	bmi.n	8004944 <_dtoa_r+0x6e4>
 8004924:	4651      	mov	r1, sl
 8004926:	4620      	mov	r0, r4
 8004928:	f000 fbcc 	bl	80050c4 <_Bfree>
 800492c:	2300      	movs	r3, #0
 800492e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004930:	702b      	strb	r3, [r5, #0]
 8004932:	f10b 0301 	add.w	r3, fp, #1
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800493a:	2b00      	cmp	r3, #0
 800493c:	f43f ace2 	beq.w	8004304 <_dtoa_r+0xa4>
 8004940:	601d      	str	r5, [r3, #0]
 8004942:	e4df      	b.n	8004304 <_dtoa_r+0xa4>
 8004944:	465f      	mov	r7, fp
 8004946:	462b      	mov	r3, r5
 8004948:	461d      	mov	r5, r3
 800494a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800494e:	2a39      	cmp	r2, #57	; 0x39
 8004950:	d106      	bne.n	8004960 <_dtoa_r+0x700>
 8004952:	9a00      	ldr	r2, [sp, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d1f7      	bne.n	8004948 <_dtoa_r+0x6e8>
 8004958:	9900      	ldr	r1, [sp, #0]
 800495a:	2230      	movs	r2, #48	; 0x30
 800495c:	3701      	adds	r7, #1
 800495e:	700a      	strb	r2, [r1, #0]
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	3201      	adds	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e790      	b.n	800488a <_dtoa_r+0x62a>
 8004968:	4ba3      	ldr	r3, [pc, #652]	; (8004bf8 <_dtoa_r+0x998>)
 800496a:	2200      	movs	r2, #0
 800496c:	f7fb fe44 	bl	80005f8 <__aeabi_dmul>
 8004970:	2200      	movs	r2, #0
 8004972:	2300      	movs	r3, #0
 8004974:	4606      	mov	r6, r0
 8004976:	460f      	mov	r7, r1
 8004978:	f7fc f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800497c:	2800      	cmp	r0, #0
 800497e:	d09e      	beq.n	80048be <_dtoa_r+0x65e>
 8004980:	e7d0      	b.n	8004924 <_dtoa_r+0x6c4>
 8004982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004984:	2a00      	cmp	r2, #0
 8004986:	f000 80ca 	beq.w	8004b1e <_dtoa_r+0x8be>
 800498a:	9a07      	ldr	r2, [sp, #28]
 800498c:	2a01      	cmp	r2, #1
 800498e:	f300 80ad 	bgt.w	8004aec <_dtoa_r+0x88c>
 8004992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004994:	2a00      	cmp	r2, #0
 8004996:	f000 80a5 	beq.w	8004ae4 <_dtoa_r+0x884>
 800499a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800499e:	9e08      	ldr	r6, [sp, #32]
 80049a0:	9d05      	ldr	r5, [sp, #20]
 80049a2:	9a05      	ldr	r2, [sp, #20]
 80049a4:	441a      	add	r2, r3
 80049a6:	9205      	str	r2, [sp, #20]
 80049a8:	9a06      	ldr	r2, [sp, #24]
 80049aa:	2101      	movs	r1, #1
 80049ac:	441a      	add	r2, r3
 80049ae:	4620      	mov	r0, r4
 80049b0:	9206      	str	r2, [sp, #24]
 80049b2:	f000 fc3d 	bl	8005230 <__i2b>
 80049b6:	4607      	mov	r7, r0
 80049b8:	b165      	cbz	r5, 80049d4 <_dtoa_r+0x774>
 80049ba:	9b06      	ldr	r3, [sp, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dd09      	ble.n	80049d4 <_dtoa_r+0x774>
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	9a05      	ldr	r2, [sp, #20]
 80049c4:	bfa8      	it	ge
 80049c6:	462b      	movge	r3, r5
 80049c8:	1ad2      	subs	r2, r2, r3
 80049ca:	9205      	str	r2, [sp, #20]
 80049cc:	9a06      	ldr	r2, [sp, #24]
 80049ce:	1aed      	subs	r5, r5, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	9306      	str	r3, [sp, #24]
 80049d4:	9b08      	ldr	r3, [sp, #32]
 80049d6:	b1f3      	cbz	r3, 8004a16 <_dtoa_r+0x7b6>
 80049d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80a3 	beq.w	8004b26 <_dtoa_r+0x8c6>
 80049e0:	2e00      	cmp	r6, #0
 80049e2:	dd10      	ble.n	8004a06 <_dtoa_r+0x7a6>
 80049e4:	4639      	mov	r1, r7
 80049e6:	4632      	mov	r2, r6
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 fce1 	bl	80053b0 <__pow5mult>
 80049ee:	4652      	mov	r2, sl
 80049f0:	4601      	mov	r1, r0
 80049f2:	4607      	mov	r7, r0
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fc31 	bl	800525c <__multiply>
 80049fa:	4651      	mov	r1, sl
 80049fc:	4680      	mov	r8, r0
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 fb60 	bl	80050c4 <_Bfree>
 8004a04:	46c2      	mov	sl, r8
 8004a06:	9b08      	ldr	r3, [sp, #32]
 8004a08:	1b9a      	subs	r2, r3, r6
 8004a0a:	d004      	beq.n	8004a16 <_dtoa_r+0x7b6>
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 fcce 	bl	80053b0 <__pow5mult>
 8004a14:	4682      	mov	sl, r0
 8004a16:	2101      	movs	r1, #1
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f000 fc09 	bl	8005230 <__i2b>
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	4606      	mov	r6, r0
 8004a24:	f340 8081 	ble.w	8004b2a <_dtoa_r+0x8ca>
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fcbf 	bl	80053b0 <__pow5mult>
 8004a32:	9b07      	ldr	r3, [sp, #28]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	4606      	mov	r6, r0
 8004a38:	dd7a      	ble.n	8004b30 <_dtoa_r+0x8d0>
 8004a3a:	f04f 0800 	mov.w	r8, #0
 8004a3e:	6933      	ldr	r3, [r6, #16]
 8004a40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a44:	6918      	ldr	r0, [r3, #16]
 8004a46:	f000 fba5 	bl	8005194 <__hi0bits>
 8004a4a:	f1c0 0020 	rsb	r0, r0, #32
 8004a4e:	9b06      	ldr	r3, [sp, #24]
 8004a50:	4418      	add	r0, r3
 8004a52:	f010 001f 	ands.w	r0, r0, #31
 8004a56:	f000 8094 	beq.w	8004b82 <_dtoa_r+0x922>
 8004a5a:	f1c0 0320 	rsb	r3, r0, #32
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	f340 8085 	ble.w	8004b6e <_dtoa_r+0x90e>
 8004a64:	9b05      	ldr	r3, [sp, #20]
 8004a66:	f1c0 001c 	rsb	r0, r0, #28
 8004a6a:	4403      	add	r3, r0
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	9b06      	ldr	r3, [sp, #24]
 8004a70:	4403      	add	r3, r0
 8004a72:	4405      	add	r5, r0
 8004a74:	9306      	str	r3, [sp, #24]
 8004a76:	9b05      	ldr	r3, [sp, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	dd05      	ble.n	8004a88 <_dtoa_r+0x828>
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 fcef 	bl	8005464 <__lshift>
 8004a86:	4682      	mov	sl, r0
 8004a88:	9b06      	ldr	r3, [sp, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	dd05      	ble.n	8004a9a <_dtoa_r+0x83a>
 8004a8e:	4631      	mov	r1, r6
 8004a90:	461a      	mov	r2, r3
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 fce6 	bl	8005464 <__lshift>
 8004a98:	4606      	mov	r6, r0
 8004a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d072      	beq.n	8004b86 <_dtoa_r+0x926>
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	f000 fd4a 	bl	800553c <__mcmp>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	da6c      	bge.n	8004b86 <_dtoa_r+0x926>
 8004aac:	2300      	movs	r3, #0
 8004aae:	4651      	mov	r1, sl
 8004ab0:	220a      	movs	r2, #10
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f000 fb28 	bl	8005108 <__multadd>
 8004ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004abe:	4682      	mov	sl, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 81b0 	beq.w	8004e26 <_dtoa_r+0xbc6>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4639      	mov	r1, r7
 8004aca:	220a      	movs	r2, #10
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 fb1b 	bl	8005108 <__multadd>
 8004ad2:	9b01      	ldr	r3, [sp, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	f300 8096 	bgt.w	8004c08 <_dtoa_r+0x9a8>
 8004adc:	9b07      	ldr	r3, [sp, #28]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	dc59      	bgt.n	8004b96 <_dtoa_r+0x936>
 8004ae2:	e091      	b.n	8004c08 <_dtoa_r+0x9a8>
 8004ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004aea:	e758      	b.n	800499e <_dtoa_r+0x73e>
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	1e5e      	subs	r6, r3, #1
 8004af0:	9b08      	ldr	r3, [sp, #32]
 8004af2:	42b3      	cmp	r3, r6
 8004af4:	bfbf      	itttt	lt
 8004af6:	9b08      	ldrlt	r3, [sp, #32]
 8004af8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004afa:	9608      	strlt	r6, [sp, #32]
 8004afc:	1af3      	sublt	r3, r6, r3
 8004afe:	bfb4      	ite	lt
 8004b00:	18d2      	addlt	r2, r2, r3
 8004b02:	1b9e      	subge	r6, r3, r6
 8004b04:	9b04      	ldr	r3, [sp, #16]
 8004b06:	bfbc      	itt	lt
 8004b08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004b0a:	2600      	movlt	r6, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bfb7      	itett	lt
 8004b10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004b14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004b18:	1a9d      	sublt	r5, r3, r2
 8004b1a:	2300      	movlt	r3, #0
 8004b1c:	e741      	b.n	80049a2 <_dtoa_r+0x742>
 8004b1e:	9e08      	ldr	r6, [sp, #32]
 8004b20:	9d05      	ldr	r5, [sp, #20]
 8004b22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b24:	e748      	b.n	80049b8 <_dtoa_r+0x758>
 8004b26:	9a08      	ldr	r2, [sp, #32]
 8004b28:	e770      	b.n	8004a0c <_dtoa_r+0x7ac>
 8004b2a:	9b07      	ldr	r3, [sp, #28]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	dc19      	bgt.n	8004b64 <_dtoa_r+0x904>
 8004b30:	9b02      	ldr	r3, [sp, #8]
 8004b32:	b9bb      	cbnz	r3, 8004b64 <_dtoa_r+0x904>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b3a:	b99b      	cbnz	r3, 8004b64 <_dtoa_r+0x904>
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b42:	0d1b      	lsrs	r3, r3, #20
 8004b44:	051b      	lsls	r3, r3, #20
 8004b46:	b183      	cbz	r3, 8004b6a <_dtoa_r+0x90a>
 8004b48:	9b05      	ldr	r3, [sp, #20]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	9305      	str	r3, [sp, #20]
 8004b4e:	9b06      	ldr	r3, [sp, #24]
 8004b50:	3301      	adds	r3, #1
 8004b52:	9306      	str	r3, [sp, #24]
 8004b54:	f04f 0801 	mov.w	r8, #1
 8004b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f47f af6f 	bne.w	8004a3e <_dtoa_r+0x7de>
 8004b60:	2001      	movs	r0, #1
 8004b62:	e774      	b.n	8004a4e <_dtoa_r+0x7ee>
 8004b64:	f04f 0800 	mov.w	r8, #0
 8004b68:	e7f6      	b.n	8004b58 <_dtoa_r+0x8f8>
 8004b6a:	4698      	mov	r8, r3
 8004b6c:	e7f4      	b.n	8004b58 <_dtoa_r+0x8f8>
 8004b6e:	d082      	beq.n	8004a76 <_dtoa_r+0x816>
 8004b70:	9a05      	ldr	r2, [sp, #20]
 8004b72:	331c      	adds	r3, #28
 8004b74:	441a      	add	r2, r3
 8004b76:	9205      	str	r2, [sp, #20]
 8004b78:	9a06      	ldr	r2, [sp, #24]
 8004b7a:	441a      	add	r2, r3
 8004b7c:	441d      	add	r5, r3
 8004b7e:	9206      	str	r2, [sp, #24]
 8004b80:	e779      	b.n	8004a76 <_dtoa_r+0x816>
 8004b82:	4603      	mov	r3, r0
 8004b84:	e7f4      	b.n	8004b70 <_dtoa_r+0x910>
 8004b86:	9b04      	ldr	r3, [sp, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dc37      	bgt.n	8004bfc <_dtoa_r+0x99c>
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	dd34      	ble.n	8004bfc <_dtoa_r+0x99c>
 8004b92:	9b04      	ldr	r3, [sp, #16]
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	b963      	cbnz	r3, 8004bb4 <_dtoa_r+0x954>
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	2205      	movs	r2, #5
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 fab2 	bl	8005108 <__multadd>
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	4650      	mov	r0, sl
 8004baa:	f000 fcc7 	bl	800553c <__mcmp>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f73f adbb 	bgt.w	800472a <_dtoa_r+0x4ca>
 8004bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb6:	9d00      	ldr	r5, [sp, #0]
 8004bb8:	ea6f 0b03 	mvn.w	fp, r3
 8004bbc:	f04f 0800 	mov.w	r8, #0
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 fa7e 	bl	80050c4 <_Bfree>
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	f43f aeab 	beq.w	8004924 <_dtoa_r+0x6c4>
 8004bce:	f1b8 0f00 	cmp.w	r8, #0
 8004bd2:	d005      	beq.n	8004be0 <_dtoa_r+0x980>
 8004bd4:	45b8      	cmp	r8, r7
 8004bd6:	d003      	beq.n	8004be0 <_dtoa_r+0x980>
 8004bd8:	4641      	mov	r1, r8
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fa72 	bl	80050c4 <_Bfree>
 8004be0:	4639      	mov	r1, r7
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 fa6e 	bl	80050c4 <_Bfree>
 8004be8:	e69c      	b.n	8004924 <_dtoa_r+0x6c4>
 8004bea:	2600      	movs	r6, #0
 8004bec:	4637      	mov	r7, r6
 8004bee:	e7e1      	b.n	8004bb4 <_dtoa_r+0x954>
 8004bf0:	46bb      	mov	fp, r7
 8004bf2:	4637      	mov	r7, r6
 8004bf4:	e599      	b.n	800472a <_dtoa_r+0x4ca>
 8004bf6:	bf00      	nop
 8004bf8:	40240000 	.word	0x40240000
 8004bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80c8 	beq.w	8004d94 <_dtoa_r+0xb34>
 8004c04:	9b04      	ldr	r3, [sp, #16]
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	dd05      	ble.n	8004c18 <_dtoa_r+0x9b8>
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	462a      	mov	r2, r5
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 fc27 	bl	8005464 <__lshift>
 8004c16:	4607      	mov	r7, r0
 8004c18:	f1b8 0f00 	cmp.w	r8, #0
 8004c1c:	d05b      	beq.n	8004cd6 <_dtoa_r+0xa76>
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 fa0f 	bl	8005044 <_Balloc>
 8004c26:	4605      	mov	r5, r0
 8004c28:	b928      	cbnz	r0, 8004c36 <_dtoa_r+0x9d6>
 8004c2a:	4b83      	ldr	r3, [pc, #524]	; (8004e38 <_dtoa_r+0xbd8>)
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004c32:	f7ff bb2e 	b.w	8004292 <_dtoa_r+0x32>
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	3202      	adds	r2, #2
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	f107 010c 	add.w	r1, r7, #12
 8004c40:	300c      	adds	r0, #12
 8004c42:	f000 ffab 	bl	8005b9c <memcpy>
 8004c46:	2201      	movs	r2, #1
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f000 fc0a 	bl	8005464 <__lshift>
 8004c50:	9b00      	ldr	r3, [sp, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	9308      	str	r3, [sp, #32]
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	46b8      	mov	r8, r7
 8004c66:	9306      	str	r3, [sp, #24]
 8004c68:	4607      	mov	r7, r0
 8004c6a:	9b04      	ldr	r3, [sp, #16]
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	4650      	mov	r0, sl
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	f7ff fa69 	bl	800414a <quorem>
 8004c78:	4641      	mov	r1, r8
 8004c7a:	9002      	str	r0, [sp, #8]
 8004c7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c80:	4650      	mov	r0, sl
 8004c82:	f000 fc5b 	bl	800553c <__mcmp>
 8004c86:	463a      	mov	r2, r7
 8004c88:	9005      	str	r0, [sp, #20]
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 fc71 	bl	8005574 <__mdiff>
 8004c92:	68c2      	ldr	r2, [r0, #12]
 8004c94:	4605      	mov	r5, r0
 8004c96:	bb02      	cbnz	r2, 8004cda <_dtoa_r+0xa7a>
 8004c98:	4601      	mov	r1, r0
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	f000 fc4e 	bl	800553c <__mcmp>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ca8:	f000 fa0c 	bl	80050c4 <_Bfree>
 8004cac:	9b07      	ldr	r3, [sp, #28]
 8004cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cb0:	9d04      	ldr	r5, [sp, #16]
 8004cb2:	ea43 0102 	orr.w	r1, r3, r2
 8004cb6:	9b06      	ldr	r3, [sp, #24]
 8004cb8:	4319      	orrs	r1, r3
 8004cba:	d110      	bne.n	8004cde <_dtoa_r+0xa7e>
 8004cbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cc0:	d029      	beq.n	8004d16 <_dtoa_r+0xab6>
 8004cc2:	9b05      	ldr	r3, [sp, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dd02      	ble.n	8004cce <_dtoa_r+0xa6e>
 8004cc8:	9b02      	ldr	r3, [sp, #8]
 8004cca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004cce:	9b01      	ldr	r3, [sp, #4]
 8004cd0:	f883 9000 	strb.w	r9, [r3]
 8004cd4:	e774      	b.n	8004bc0 <_dtoa_r+0x960>
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	e7ba      	b.n	8004c50 <_dtoa_r+0x9f0>
 8004cda:	2201      	movs	r2, #1
 8004cdc:	e7e1      	b.n	8004ca2 <_dtoa_r+0xa42>
 8004cde:	9b05      	ldr	r3, [sp, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	db04      	blt.n	8004cee <_dtoa_r+0xa8e>
 8004ce4:	9907      	ldr	r1, [sp, #28]
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	9906      	ldr	r1, [sp, #24]
 8004cea:	430b      	orrs	r3, r1
 8004cec:	d120      	bne.n	8004d30 <_dtoa_r+0xad0>
 8004cee:	2a00      	cmp	r2, #0
 8004cf0:	dded      	ble.n	8004cce <_dtoa_r+0xa6e>
 8004cf2:	4651      	mov	r1, sl
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f000 fbb4 	bl	8005464 <__lshift>
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4682      	mov	sl, r0
 8004d00:	f000 fc1c 	bl	800553c <__mcmp>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	dc03      	bgt.n	8004d10 <_dtoa_r+0xab0>
 8004d08:	d1e1      	bne.n	8004cce <_dtoa_r+0xa6e>
 8004d0a:	f019 0f01 	tst.w	r9, #1
 8004d0e:	d0de      	beq.n	8004cce <_dtoa_r+0xa6e>
 8004d10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d14:	d1d8      	bne.n	8004cc8 <_dtoa_r+0xa68>
 8004d16:	9a01      	ldr	r2, [sp, #4]
 8004d18:	2339      	movs	r3, #57	; 0x39
 8004d1a:	7013      	strb	r3, [r2, #0]
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	461d      	mov	r5, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d26:	2a39      	cmp	r2, #57	; 0x39
 8004d28:	d06c      	beq.n	8004e04 <_dtoa_r+0xba4>
 8004d2a:	3201      	adds	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e747      	b.n	8004bc0 <_dtoa_r+0x960>
 8004d30:	2a00      	cmp	r2, #0
 8004d32:	dd07      	ble.n	8004d44 <_dtoa_r+0xae4>
 8004d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d38:	d0ed      	beq.n	8004d16 <_dtoa_r+0xab6>
 8004d3a:	9a01      	ldr	r2, [sp, #4]
 8004d3c:	f109 0301 	add.w	r3, r9, #1
 8004d40:	7013      	strb	r3, [r2, #0]
 8004d42:	e73d      	b.n	8004bc0 <_dtoa_r+0x960>
 8004d44:	9b04      	ldr	r3, [sp, #16]
 8004d46:	9a08      	ldr	r2, [sp, #32]
 8004d48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d043      	beq.n	8004dd8 <_dtoa_r+0xb78>
 8004d50:	4651      	mov	r1, sl
 8004d52:	2300      	movs	r3, #0
 8004d54:	220a      	movs	r2, #10
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 f9d6 	bl	8005108 <__multadd>
 8004d5c:	45b8      	cmp	r8, r7
 8004d5e:	4682      	mov	sl, r0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	f04f 020a 	mov.w	r2, #10
 8004d68:	4641      	mov	r1, r8
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	d107      	bne.n	8004d7e <_dtoa_r+0xb1e>
 8004d6e:	f000 f9cb 	bl	8005108 <__multadd>
 8004d72:	4680      	mov	r8, r0
 8004d74:	4607      	mov	r7, r0
 8004d76:	9b04      	ldr	r3, [sp, #16]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	9304      	str	r3, [sp, #16]
 8004d7c:	e775      	b.n	8004c6a <_dtoa_r+0xa0a>
 8004d7e:	f000 f9c3 	bl	8005108 <__multadd>
 8004d82:	4639      	mov	r1, r7
 8004d84:	4680      	mov	r8, r0
 8004d86:	2300      	movs	r3, #0
 8004d88:	220a      	movs	r2, #10
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f000 f9bc 	bl	8005108 <__multadd>
 8004d90:	4607      	mov	r7, r0
 8004d92:	e7f0      	b.n	8004d76 <_dtoa_r+0xb16>
 8004d94:	9b04      	ldr	r3, [sp, #16]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	9d00      	ldr	r5, [sp, #0]
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4650      	mov	r0, sl
 8004d9e:	f7ff f9d4 	bl	800414a <quorem>
 8004da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	f805 9b01 	strb.w	r9, [r5], #1
 8004dac:	1aea      	subs	r2, r5, r3
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	dd07      	ble.n	8004dc4 <_dtoa_r+0xb64>
 8004db4:	4651      	mov	r1, sl
 8004db6:	2300      	movs	r3, #0
 8004db8:	220a      	movs	r2, #10
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 f9a4 	bl	8005108 <__multadd>
 8004dc0:	4682      	mov	sl, r0
 8004dc2:	e7ea      	b.n	8004d9a <_dtoa_r+0xb3a>
 8004dc4:	9b01      	ldr	r3, [sp, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfc8      	it	gt
 8004dca:	461d      	movgt	r5, r3
 8004dcc:	9b00      	ldr	r3, [sp, #0]
 8004dce:	bfd8      	it	le
 8004dd0:	2501      	movle	r5, #1
 8004dd2:	441d      	add	r5, r3
 8004dd4:	f04f 0800 	mov.w	r8, #0
 8004dd8:	4651      	mov	r1, sl
 8004dda:	2201      	movs	r2, #1
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 fb41 	bl	8005464 <__lshift>
 8004de2:	4631      	mov	r1, r6
 8004de4:	4682      	mov	sl, r0
 8004de6:	f000 fba9 	bl	800553c <__mcmp>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	dc96      	bgt.n	8004d1c <_dtoa_r+0xabc>
 8004dee:	d102      	bne.n	8004df6 <_dtoa_r+0xb96>
 8004df0:	f019 0f01 	tst.w	r9, #1
 8004df4:	d192      	bne.n	8004d1c <_dtoa_r+0xabc>
 8004df6:	462b      	mov	r3, r5
 8004df8:	461d      	mov	r5, r3
 8004dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dfe:	2a30      	cmp	r2, #48	; 0x30
 8004e00:	d0fa      	beq.n	8004df8 <_dtoa_r+0xb98>
 8004e02:	e6dd      	b.n	8004bc0 <_dtoa_r+0x960>
 8004e04:	9a00      	ldr	r2, [sp, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d189      	bne.n	8004d1e <_dtoa_r+0xabe>
 8004e0a:	f10b 0b01 	add.w	fp, fp, #1
 8004e0e:	2331      	movs	r3, #49	; 0x31
 8004e10:	e796      	b.n	8004d40 <_dtoa_r+0xae0>
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <_dtoa_r+0xbdc>)
 8004e14:	f7ff ba99 	b.w	800434a <_dtoa_r+0xea>
 8004e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f47f aa6d 	bne.w	80042fa <_dtoa_r+0x9a>
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <_dtoa_r+0xbe0>)
 8004e22:	f7ff ba92 	b.w	800434a <_dtoa_r+0xea>
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dcb5      	bgt.n	8004d98 <_dtoa_r+0xb38>
 8004e2c:	9b07      	ldr	r3, [sp, #28]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	f73f aeb1 	bgt.w	8004b96 <_dtoa_r+0x936>
 8004e34:	e7b0      	b.n	8004d98 <_dtoa_r+0xb38>
 8004e36:	bf00      	nop
 8004e38:	08006b37 	.word	0x08006b37
 8004e3c:	08006a97 	.word	0x08006a97
 8004e40:	08006abb 	.word	0x08006abb

08004e44 <_free_r>:
 8004e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d044      	beq.n	8004ed4 <_free_r+0x90>
 8004e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4e:	9001      	str	r0, [sp, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f1a1 0404 	sub.w	r4, r1, #4
 8004e56:	bfb8      	it	lt
 8004e58:	18e4      	addlt	r4, r4, r3
 8004e5a:	f000 f8e7 	bl	800502c <__malloc_lock>
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <_free_r+0x94>)
 8004e60:	9801      	ldr	r0, [sp, #4]
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	b933      	cbnz	r3, 8004e74 <_free_r+0x30>
 8004e66:	6063      	str	r3, [r4, #4]
 8004e68:	6014      	str	r4, [r2, #0]
 8004e6a:	b003      	add	sp, #12
 8004e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e70:	f000 b8e2 	b.w	8005038 <__malloc_unlock>
 8004e74:	42a3      	cmp	r3, r4
 8004e76:	d908      	bls.n	8004e8a <_free_r+0x46>
 8004e78:	6825      	ldr	r5, [r4, #0]
 8004e7a:	1961      	adds	r1, r4, r5
 8004e7c:	428b      	cmp	r3, r1
 8004e7e:	bf01      	itttt	eq
 8004e80:	6819      	ldreq	r1, [r3, #0]
 8004e82:	685b      	ldreq	r3, [r3, #4]
 8004e84:	1949      	addeq	r1, r1, r5
 8004e86:	6021      	streq	r1, [r4, #0]
 8004e88:	e7ed      	b.n	8004e66 <_free_r+0x22>
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b10b      	cbz	r3, 8004e94 <_free_r+0x50>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d9fa      	bls.n	8004e8a <_free_r+0x46>
 8004e94:	6811      	ldr	r1, [r2, #0]
 8004e96:	1855      	adds	r5, r2, r1
 8004e98:	42a5      	cmp	r5, r4
 8004e9a:	d10b      	bne.n	8004eb4 <_free_r+0x70>
 8004e9c:	6824      	ldr	r4, [r4, #0]
 8004e9e:	4421      	add	r1, r4
 8004ea0:	1854      	adds	r4, r2, r1
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	6011      	str	r1, [r2, #0]
 8004ea6:	d1e0      	bne.n	8004e6a <_free_r+0x26>
 8004ea8:	681c      	ldr	r4, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	6053      	str	r3, [r2, #4]
 8004eae:	440c      	add	r4, r1
 8004eb0:	6014      	str	r4, [r2, #0]
 8004eb2:	e7da      	b.n	8004e6a <_free_r+0x26>
 8004eb4:	d902      	bls.n	8004ebc <_free_r+0x78>
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	6003      	str	r3, [r0, #0]
 8004eba:	e7d6      	b.n	8004e6a <_free_r+0x26>
 8004ebc:	6825      	ldr	r5, [r4, #0]
 8004ebe:	1961      	adds	r1, r4, r5
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	bf04      	itt	eq
 8004ec4:	6819      	ldreq	r1, [r3, #0]
 8004ec6:	685b      	ldreq	r3, [r3, #4]
 8004ec8:	6063      	str	r3, [r4, #4]
 8004eca:	bf04      	itt	eq
 8004ecc:	1949      	addeq	r1, r1, r5
 8004ece:	6021      	streq	r1, [r4, #0]
 8004ed0:	6054      	str	r4, [r2, #4]
 8004ed2:	e7ca      	b.n	8004e6a <_free_r+0x26>
 8004ed4:	b003      	add	sp, #12
 8004ed6:	bd30      	pop	{r4, r5, pc}
 8004ed8:	200005c4 	.word	0x200005c4

08004edc <malloc>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <malloc+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f000 b823 	b.w	8004f2c <_malloc_r>
 8004ee6:	bf00      	nop
 8004ee8:	2000005c 	.word	0x2000005c

08004eec <sbrk_aligned>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4e0e      	ldr	r6, [pc, #56]	; (8004f28 <sbrk_aligned+0x3c>)
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	6831      	ldr	r1, [r6, #0]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	b911      	cbnz	r1, 8004efe <sbrk_aligned+0x12>
 8004ef8:	f000 fe40 	bl	8005b7c <_sbrk_r>
 8004efc:	6030      	str	r0, [r6, #0]
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 fe3b 	bl	8005b7c <_sbrk_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d00a      	beq.n	8004f20 <sbrk_aligned+0x34>
 8004f0a:	1cc4      	adds	r4, r0, #3
 8004f0c:	f024 0403 	bic.w	r4, r4, #3
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d007      	beq.n	8004f24 <sbrk_aligned+0x38>
 8004f14:	1a21      	subs	r1, r4, r0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fe30 	bl	8005b7c <_sbrk_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d101      	bne.n	8004f24 <sbrk_aligned+0x38>
 8004f20:	f04f 34ff 	mov.w	r4, #4294967295
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	200005c8 	.word	0x200005c8

08004f2c <_malloc_r>:
 8004f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f30:	1ccd      	adds	r5, r1, #3
 8004f32:	f025 0503 	bic.w	r5, r5, #3
 8004f36:	3508      	adds	r5, #8
 8004f38:	2d0c      	cmp	r5, #12
 8004f3a:	bf38      	it	cc
 8004f3c:	250c      	movcc	r5, #12
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	4607      	mov	r7, r0
 8004f42:	db01      	blt.n	8004f48 <_malloc_r+0x1c>
 8004f44:	42a9      	cmp	r1, r5
 8004f46:	d905      	bls.n	8004f54 <_malloc_r+0x28>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005028 <_malloc_r+0xfc>
 8004f58:	f000 f868 	bl	800502c <__malloc_lock>
 8004f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f60:	461c      	mov	r4, r3
 8004f62:	bb5c      	cbnz	r4, 8004fbc <_malloc_r+0x90>
 8004f64:	4629      	mov	r1, r5
 8004f66:	4638      	mov	r0, r7
 8004f68:	f7ff ffc0 	bl	8004eec <sbrk_aligned>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	4604      	mov	r4, r0
 8004f70:	d155      	bne.n	800501e <_malloc_r+0xf2>
 8004f72:	f8d8 4000 	ldr.w	r4, [r8]
 8004f76:	4626      	mov	r6, r4
 8004f78:	2e00      	cmp	r6, #0
 8004f7a:	d145      	bne.n	8005008 <_malloc_r+0xdc>
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	d048      	beq.n	8005012 <_malloc_r+0xe6>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	4631      	mov	r1, r6
 8004f84:	4638      	mov	r0, r7
 8004f86:	eb04 0903 	add.w	r9, r4, r3
 8004f8a:	f000 fdf7 	bl	8005b7c <_sbrk_r>
 8004f8e:	4581      	cmp	r9, r0
 8004f90:	d13f      	bne.n	8005012 <_malloc_r+0xe6>
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	1a6d      	subs	r5, r5, r1
 8004f96:	4629      	mov	r1, r5
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f7ff ffa7 	bl	8004eec <sbrk_aligned>
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d037      	beq.n	8005012 <_malloc_r+0xe6>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	442b      	add	r3, r5
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d038      	beq.n	8005022 <_malloc_r+0xf6>
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	42a2      	cmp	r2, r4
 8004fb4:	d12b      	bne.n	800500e <_malloc_r+0xe2>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	e00f      	b.n	8004fdc <_malloc_r+0xb0>
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	1b52      	subs	r2, r2, r5
 8004fc0:	d41f      	bmi.n	8005002 <_malloc_r+0xd6>
 8004fc2:	2a0b      	cmp	r2, #11
 8004fc4:	d917      	bls.n	8004ff6 <_malloc_r+0xca>
 8004fc6:	1961      	adds	r1, r4, r5
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	6025      	str	r5, [r4, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	6059      	strne	r1, [r3, #4]
 8004fd0:	6863      	ldr	r3, [r4, #4]
 8004fd2:	bf08      	it	eq
 8004fd4:	f8c8 1000 	streq.w	r1, [r8]
 8004fd8:	5162      	str	r2, [r4, r5]
 8004fda:	604b      	str	r3, [r1, #4]
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f104 060b 	add.w	r6, r4, #11
 8004fe2:	f000 f829 	bl	8005038 <__malloc_unlock>
 8004fe6:	f026 0607 	bic.w	r6, r6, #7
 8004fea:	1d23      	adds	r3, r4, #4
 8004fec:	1af2      	subs	r2, r6, r3
 8004fee:	d0ae      	beq.n	8004f4e <_malloc_r+0x22>
 8004ff0:	1b9b      	subs	r3, r3, r6
 8004ff2:	50a3      	str	r3, [r4, r2]
 8004ff4:	e7ab      	b.n	8004f4e <_malloc_r+0x22>
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	6862      	ldr	r2, [r4, #4]
 8004ffa:	d1dd      	bne.n	8004fb8 <_malloc_r+0x8c>
 8004ffc:	f8c8 2000 	str.w	r2, [r8]
 8005000:	e7ec      	b.n	8004fdc <_malloc_r+0xb0>
 8005002:	4623      	mov	r3, r4
 8005004:	6864      	ldr	r4, [r4, #4]
 8005006:	e7ac      	b.n	8004f62 <_malloc_r+0x36>
 8005008:	4634      	mov	r4, r6
 800500a:	6876      	ldr	r6, [r6, #4]
 800500c:	e7b4      	b.n	8004f78 <_malloc_r+0x4c>
 800500e:	4613      	mov	r3, r2
 8005010:	e7cc      	b.n	8004fac <_malloc_r+0x80>
 8005012:	230c      	movs	r3, #12
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	4638      	mov	r0, r7
 8005018:	f000 f80e 	bl	8005038 <__malloc_unlock>
 800501c:	e797      	b.n	8004f4e <_malloc_r+0x22>
 800501e:	6025      	str	r5, [r4, #0]
 8005020:	e7dc      	b.n	8004fdc <_malloc_r+0xb0>
 8005022:	605b      	str	r3, [r3, #4]
 8005024:	deff      	udf	#255	; 0xff
 8005026:	bf00      	nop
 8005028:	200005c4 	.word	0x200005c4

0800502c <__malloc_lock>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__malloc_lock+0x8>)
 800502e:	f7ff b88a 	b.w	8004146 <__retarget_lock_acquire_recursive>
 8005032:	bf00      	nop
 8005034:	200005c0 	.word	0x200005c0

08005038 <__malloc_unlock>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__malloc_unlock+0x8>)
 800503a:	f7ff b885 	b.w	8004148 <__retarget_lock_release_recursive>
 800503e:	bf00      	nop
 8005040:	200005c0 	.word	0x200005c0

08005044 <_Balloc>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	69c6      	ldr	r6, [r0, #28]
 8005048:	4604      	mov	r4, r0
 800504a:	460d      	mov	r5, r1
 800504c:	b976      	cbnz	r6, 800506c <_Balloc+0x28>
 800504e:	2010      	movs	r0, #16
 8005050:	f7ff ff44 	bl	8004edc <malloc>
 8005054:	4602      	mov	r2, r0
 8005056:	61e0      	str	r0, [r4, #28]
 8005058:	b920      	cbnz	r0, 8005064 <_Balloc+0x20>
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <_Balloc+0x78>)
 800505c:	4818      	ldr	r0, [pc, #96]	; (80050c0 <_Balloc+0x7c>)
 800505e:	216b      	movs	r1, #107	; 0x6b
 8005060:	f000 fdaa 	bl	8005bb8 <__assert_func>
 8005064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005068:	6006      	str	r6, [r0, #0]
 800506a:	60c6      	str	r6, [r0, #12]
 800506c:	69e6      	ldr	r6, [r4, #28]
 800506e:	68f3      	ldr	r3, [r6, #12]
 8005070:	b183      	cbz	r3, 8005094 <_Balloc+0x50>
 8005072:	69e3      	ldr	r3, [r4, #28]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800507a:	b9b8      	cbnz	r0, 80050ac <_Balloc+0x68>
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f605 	lsl.w	r6, r1, r5
 8005082:	1d72      	adds	r2, r6, #5
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	4620      	mov	r0, r4
 8005088:	f000 fdb4 	bl	8005bf4 <_calloc_r>
 800508c:	b160      	cbz	r0, 80050a8 <_Balloc+0x64>
 800508e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005092:	e00e      	b.n	80050b2 <_Balloc+0x6e>
 8005094:	2221      	movs	r2, #33	; 0x21
 8005096:	2104      	movs	r1, #4
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fdab 	bl	8005bf4 <_calloc_r>
 800509e:	69e3      	ldr	r3, [r4, #28]
 80050a0:	60f0      	str	r0, [r6, #12]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e4      	bne.n	8005072 <_Balloc+0x2e>
 80050a8:	2000      	movs	r0, #0
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	6802      	ldr	r2, [r0, #0]
 80050ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050b2:	2300      	movs	r3, #0
 80050b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050b8:	e7f7      	b.n	80050aa <_Balloc+0x66>
 80050ba:	bf00      	nop
 80050bc:	08006ac8 	.word	0x08006ac8
 80050c0:	08006b48 	.word	0x08006b48

080050c4 <_Bfree>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	69c6      	ldr	r6, [r0, #28]
 80050c8:	4605      	mov	r5, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b976      	cbnz	r6, 80050ec <_Bfree+0x28>
 80050ce:	2010      	movs	r0, #16
 80050d0:	f7ff ff04 	bl	8004edc <malloc>
 80050d4:	4602      	mov	r2, r0
 80050d6:	61e8      	str	r0, [r5, #28]
 80050d8:	b920      	cbnz	r0, 80050e4 <_Bfree+0x20>
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <_Bfree+0x3c>)
 80050dc:	4809      	ldr	r0, [pc, #36]	; (8005104 <_Bfree+0x40>)
 80050de:	218f      	movs	r1, #143	; 0x8f
 80050e0:	f000 fd6a 	bl	8005bb8 <__assert_func>
 80050e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050e8:	6006      	str	r6, [r0, #0]
 80050ea:	60c6      	str	r6, [r0, #12]
 80050ec:	b13c      	cbz	r4, 80050fe <_Bfree+0x3a>
 80050ee:	69eb      	ldr	r3, [r5, #28]
 80050f0:	6862      	ldr	r2, [r4, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050f8:	6021      	str	r1, [r4, #0]
 80050fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	08006ac8 	.word	0x08006ac8
 8005104:	08006b48 	.word	0x08006b48

08005108 <__multadd>:
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	690d      	ldr	r5, [r1, #16]
 800510e:	4607      	mov	r7, r0
 8005110:	460c      	mov	r4, r1
 8005112:	461e      	mov	r6, r3
 8005114:	f101 0c14 	add.w	ip, r1, #20
 8005118:	2000      	movs	r0, #0
 800511a:	f8dc 3000 	ldr.w	r3, [ip]
 800511e:	b299      	uxth	r1, r3
 8005120:	fb02 6101 	mla	r1, r2, r1, r6
 8005124:	0c1e      	lsrs	r6, r3, #16
 8005126:	0c0b      	lsrs	r3, r1, #16
 8005128:	fb02 3306 	mla	r3, r2, r6, r3
 800512c:	b289      	uxth	r1, r1
 800512e:	3001      	adds	r0, #1
 8005130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005134:	4285      	cmp	r5, r0
 8005136:	f84c 1b04 	str.w	r1, [ip], #4
 800513a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800513e:	dcec      	bgt.n	800511a <__multadd+0x12>
 8005140:	b30e      	cbz	r6, 8005186 <__multadd+0x7e>
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	42ab      	cmp	r3, r5
 8005146:	dc19      	bgt.n	800517c <__multadd+0x74>
 8005148:	6861      	ldr	r1, [r4, #4]
 800514a:	4638      	mov	r0, r7
 800514c:	3101      	adds	r1, #1
 800514e:	f7ff ff79 	bl	8005044 <_Balloc>
 8005152:	4680      	mov	r8, r0
 8005154:	b928      	cbnz	r0, 8005162 <__multadd+0x5a>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <__multadd+0x84>)
 800515a:	480d      	ldr	r0, [pc, #52]	; (8005190 <__multadd+0x88>)
 800515c:	21ba      	movs	r1, #186	; 0xba
 800515e:	f000 fd2b 	bl	8005bb8 <__assert_func>
 8005162:	6922      	ldr	r2, [r4, #16]
 8005164:	3202      	adds	r2, #2
 8005166:	f104 010c 	add.w	r1, r4, #12
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	300c      	adds	r0, #12
 800516e:	f000 fd15 	bl	8005b9c <memcpy>
 8005172:	4621      	mov	r1, r4
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ffa5 	bl	80050c4 <_Bfree>
 800517a:	4644      	mov	r4, r8
 800517c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005180:	3501      	adds	r5, #1
 8005182:	615e      	str	r6, [r3, #20]
 8005184:	6125      	str	r5, [r4, #16]
 8005186:	4620      	mov	r0, r4
 8005188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518c:	08006b37 	.word	0x08006b37
 8005190:	08006b48 	.word	0x08006b48

08005194 <__hi0bits>:
 8005194:	0c03      	lsrs	r3, r0, #16
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	b9d3      	cbnz	r3, 80051d0 <__hi0bits+0x3c>
 800519a:	0400      	lsls	r0, r0, #16
 800519c:	2310      	movs	r3, #16
 800519e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051a2:	bf04      	itt	eq
 80051a4:	0200      	lsleq	r0, r0, #8
 80051a6:	3308      	addeq	r3, #8
 80051a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051ac:	bf04      	itt	eq
 80051ae:	0100      	lsleq	r0, r0, #4
 80051b0:	3304      	addeq	r3, #4
 80051b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051b6:	bf04      	itt	eq
 80051b8:	0080      	lsleq	r0, r0, #2
 80051ba:	3302      	addeq	r3, #2
 80051bc:	2800      	cmp	r0, #0
 80051be:	db05      	blt.n	80051cc <__hi0bits+0x38>
 80051c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051c4:	f103 0301 	add.w	r3, r3, #1
 80051c8:	bf08      	it	eq
 80051ca:	2320      	moveq	r3, #32
 80051cc:	4618      	mov	r0, r3
 80051ce:	4770      	bx	lr
 80051d0:	2300      	movs	r3, #0
 80051d2:	e7e4      	b.n	800519e <__hi0bits+0xa>

080051d4 <__lo0bits>:
 80051d4:	6803      	ldr	r3, [r0, #0]
 80051d6:	f013 0207 	ands.w	r2, r3, #7
 80051da:	d00c      	beq.n	80051f6 <__lo0bits+0x22>
 80051dc:	07d9      	lsls	r1, r3, #31
 80051de:	d422      	bmi.n	8005226 <__lo0bits+0x52>
 80051e0:	079a      	lsls	r2, r3, #30
 80051e2:	bf49      	itett	mi
 80051e4:	085b      	lsrmi	r3, r3, #1
 80051e6:	089b      	lsrpl	r3, r3, #2
 80051e8:	6003      	strmi	r3, [r0, #0]
 80051ea:	2201      	movmi	r2, #1
 80051ec:	bf5c      	itt	pl
 80051ee:	6003      	strpl	r3, [r0, #0]
 80051f0:	2202      	movpl	r2, #2
 80051f2:	4610      	mov	r0, r2
 80051f4:	4770      	bx	lr
 80051f6:	b299      	uxth	r1, r3
 80051f8:	b909      	cbnz	r1, 80051fe <__lo0bits+0x2a>
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	2210      	movs	r2, #16
 80051fe:	b2d9      	uxtb	r1, r3
 8005200:	b909      	cbnz	r1, 8005206 <__lo0bits+0x32>
 8005202:	3208      	adds	r2, #8
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	0719      	lsls	r1, r3, #28
 8005208:	bf04      	itt	eq
 800520a:	091b      	lsreq	r3, r3, #4
 800520c:	3204      	addeq	r2, #4
 800520e:	0799      	lsls	r1, r3, #30
 8005210:	bf04      	itt	eq
 8005212:	089b      	lsreq	r3, r3, #2
 8005214:	3202      	addeq	r2, #2
 8005216:	07d9      	lsls	r1, r3, #31
 8005218:	d403      	bmi.n	8005222 <__lo0bits+0x4e>
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	f102 0201 	add.w	r2, r2, #1
 8005220:	d003      	beq.n	800522a <__lo0bits+0x56>
 8005222:	6003      	str	r3, [r0, #0]
 8005224:	e7e5      	b.n	80051f2 <__lo0bits+0x1e>
 8005226:	2200      	movs	r2, #0
 8005228:	e7e3      	b.n	80051f2 <__lo0bits+0x1e>
 800522a:	2220      	movs	r2, #32
 800522c:	e7e1      	b.n	80051f2 <__lo0bits+0x1e>
	...

08005230 <__i2b>:
 8005230:	b510      	push	{r4, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	2101      	movs	r1, #1
 8005236:	f7ff ff05 	bl	8005044 <_Balloc>
 800523a:	4602      	mov	r2, r0
 800523c:	b928      	cbnz	r0, 800524a <__i2b+0x1a>
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <__i2b+0x24>)
 8005240:	4805      	ldr	r0, [pc, #20]	; (8005258 <__i2b+0x28>)
 8005242:	f240 1145 	movw	r1, #325	; 0x145
 8005246:	f000 fcb7 	bl	8005bb8 <__assert_func>
 800524a:	2301      	movs	r3, #1
 800524c:	6144      	str	r4, [r0, #20]
 800524e:	6103      	str	r3, [r0, #16]
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	08006b37 	.word	0x08006b37
 8005258:	08006b48 	.word	0x08006b48

0800525c <__multiply>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	4691      	mov	r9, r2
 8005262:	690a      	ldr	r2, [r1, #16]
 8005264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005268:	429a      	cmp	r2, r3
 800526a:	bfb8      	it	lt
 800526c:	460b      	movlt	r3, r1
 800526e:	460c      	mov	r4, r1
 8005270:	bfbc      	itt	lt
 8005272:	464c      	movlt	r4, r9
 8005274:	4699      	movlt	r9, r3
 8005276:	6927      	ldr	r7, [r4, #16]
 8005278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800527c:	68a3      	ldr	r3, [r4, #8]
 800527e:	6861      	ldr	r1, [r4, #4]
 8005280:	eb07 060a 	add.w	r6, r7, sl
 8005284:	42b3      	cmp	r3, r6
 8005286:	b085      	sub	sp, #20
 8005288:	bfb8      	it	lt
 800528a:	3101      	addlt	r1, #1
 800528c:	f7ff feda 	bl	8005044 <_Balloc>
 8005290:	b930      	cbnz	r0, 80052a0 <__multiply+0x44>
 8005292:	4602      	mov	r2, r0
 8005294:	4b44      	ldr	r3, [pc, #272]	; (80053a8 <__multiply+0x14c>)
 8005296:	4845      	ldr	r0, [pc, #276]	; (80053ac <__multiply+0x150>)
 8005298:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800529c:	f000 fc8c 	bl	8005bb8 <__assert_func>
 80052a0:	f100 0514 	add.w	r5, r0, #20
 80052a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052a8:	462b      	mov	r3, r5
 80052aa:	2200      	movs	r2, #0
 80052ac:	4543      	cmp	r3, r8
 80052ae:	d321      	bcc.n	80052f4 <__multiply+0x98>
 80052b0:	f104 0314 	add.w	r3, r4, #20
 80052b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052b8:	f109 0314 	add.w	r3, r9, #20
 80052bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052c0:	9202      	str	r2, [sp, #8]
 80052c2:	1b3a      	subs	r2, r7, r4
 80052c4:	3a15      	subs	r2, #21
 80052c6:	f022 0203 	bic.w	r2, r2, #3
 80052ca:	3204      	adds	r2, #4
 80052cc:	f104 0115 	add.w	r1, r4, #21
 80052d0:	428f      	cmp	r7, r1
 80052d2:	bf38      	it	cc
 80052d4:	2204      	movcc	r2, #4
 80052d6:	9201      	str	r2, [sp, #4]
 80052d8:	9a02      	ldr	r2, [sp, #8]
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d80c      	bhi.n	80052fa <__multiply+0x9e>
 80052e0:	2e00      	cmp	r6, #0
 80052e2:	dd03      	ble.n	80052ec <__multiply+0x90>
 80052e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d05b      	beq.n	80053a4 <__multiply+0x148>
 80052ec:	6106      	str	r6, [r0, #16]
 80052ee:	b005      	add	sp, #20
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	f843 2b04 	str.w	r2, [r3], #4
 80052f8:	e7d8      	b.n	80052ac <__multiply+0x50>
 80052fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80052fe:	f1ba 0f00 	cmp.w	sl, #0
 8005302:	d024      	beq.n	800534e <__multiply+0xf2>
 8005304:	f104 0e14 	add.w	lr, r4, #20
 8005308:	46a9      	mov	r9, r5
 800530a:	f04f 0c00 	mov.w	ip, #0
 800530e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005312:	f8d9 1000 	ldr.w	r1, [r9]
 8005316:	fa1f fb82 	uxth.w	fp, r2
 800531a:	b289      	uxth	r1, r1
 800531c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005324:	f8d9 2000 	ldr.w	r2, [r9]
 8005328:	4461      	add	r1, ip
 800532a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800532e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005336:	b289      	uxth	r1, r1
 8005338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800533c:	4577      	cmp	r7, lr
 800533e:	f849 1b04 	str.w	r1, [r9], #4
 8005342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005346:	d8e2      	bhi.n	800530e <__multiply+0xb2>
 8005348:	9a01      	ldr	r2, [sp, #4]
 800534a:	f845 c002 	str.w	ip, [r5, r2]
 800534e:	9a03      	ldr	r2, [sp, #12]
 8005350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005354:	3304      	adds	r3, #4
 8005356:	f1b9 0f00 	cmp.w	r9, #0
 800535a:	d021      	beq.n	80053a0 <__multiply+0x144>
 800535c:	6829      	ldr	r1, [r5, #0]
 800535e:	f104 0c14 	add.w	ip, r4, #20
 8005362:	46ae      	mov	lr, r5
 8005364:	f04f 0a00 	mov.w	sl, #0
 8005368:	f8bc b000 	ldrh.w	fp, [ip]
 800536c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005370:	fb09 220b 	mla	r2, r9, fp, r2
 8005374:	4452      	add	r2, sl
 8005376:	b289      	uxth	r1, r1
 8005378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800537c:	f84e 1b04 	str.w	r1, [lr], #4
 8005380:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005388:	f8be 1000 	ldrh.w	r1, [lr]
 800538c:	fb09 110a 	mla	r1, r9, sl, r1
 8005390:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005394:	4567      	cmp	r7, ip
 8005396:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800539a:	d8e5      	bhi.n	8005368 <__multiply+0x10c>
 800539c:	9a01      	ldr	r2, [sp, #4]
 800539e:	50a9      	str	r1, [r5, r2]
 80053a0:	3504      	adds	r5, #4
 80053a2:	e799      	b.n	80052d8 <__multiply+0x7c>
 80053a4:	3e01      	subs	r6, #1
 80053a6:	e79b      	b.n	80052e0 <__multiply+0x84>
 80053a8:	08006b37 	.word	0x08006b37
 80053ac:	08006b48 	.word	0x08006b48

080053b0 <__pow5mult>:
 80053b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b4:	4615      	mov	r5, r2
 80053b6:	f012 0203 	ands.w	r2, r2, #3
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	d007      	beq.n	80053d0 <__pow5mult+0x20>
 80053c0:	4c25      	ldr	r4, [pc, #148]	; (8005458 <__pow5mult+0xa8>)
 80053c2:	3a01      	subs	r2, #1
 80053c4:	2300      	movs	r3, #0
 80053c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053ca:	f7ff fe9d 	bl	8005108 <__multadd>
 80053ce:	4607      	mov	r7, r0
 80053d0:	10ad      	asrs	r5, r5, #2
 80053d2:	d03d      	beq.n	8005450 <__pow5mult+0xa0>
 80053d4:	69f4      	ldr	r4, [r6, #28]
 80053d6:	b97c      	cbnz	r4, 80053f8 <__pow5mult+0x48>
 80053d8:	2010      	movs	r0, #16
 80053da:	f7ff fd7f 	bl	8004edc <malloc>
 80053de:	4602      	mov	r2, r0
 80053e0:	61f0      	str	r0, [r6, #28]
 80053e2:	b928      	cbnz	r0, 80053f0 <__pow5mult+0x40>
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <__pow5mult+0xac>)
 80053e6:	481e      	ldr	r0, [pc, #120]	; (8005460 <__pow5mult+0xb0>)
 80053e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80053ec:	f000 fbe4 	bl	8005bb8 <__assert_func>
 80053f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053f4:	6004      	str	r4, [r0, #0]
 80053f6:	60c4      	str	r4, [r0, #12]
 80053f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80053fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005400:	b94c      	cbnz	r4, 8005416 <__pow5mult+0x66>
 8005402:	f240 2171 	movw	r1, #625	; 0x271
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff ff12 	bl	8005230 <__i2b>
 800540c:	2300      	movs	r3, #0
 800540e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005412:	4604      	mov	r4, r0
 8005414:	6003      	str	r3, [r0, #0]
 8005416:	f04f 0900 	mov.w	r9, #0
 800541a:	07eb      	lsls	r3, r5, #31
 800541c:	d50a      	bpl.n	8005434 <__pow5mult+0x84>
 800541e:	4639      	mov	r1, r7
 8005420:	4622      	mov	r2, r4
 8005422:	4630      	mov	r0, r6
 8005424:	f7ff ff1a 	bl	800525c <__multiply>
 8005428:	4639      	mov	r1, r7
 800542a:	4680      	mov	r8, r0
 800542c:	4630      	mov	r0, r6
 800542e:	f7ff fe49 	bl	80050c4 <_Bfree>
 8005432:	4647      	mov	r7, r8
 8005434:	106d      	asrs	r5, r5, #1
 8005436:	d00b      	beq.n	8005450 <__pow5mult+0xa0>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	b938      	cbnz	r0, 800544c <__pow5mult+0x9c>
 800543c:	4622      	mov	r2, r4
 800543e:	4621      	mov	r1, r4
 8005440:	4630      	mov	r0, r6
 8005442:	f7ff ff0b 	bl	800525c <__multiply>
 8005446:	6020      	str	r0, [r4, #0]
 8005448:	f8c0 9000 	str.w	r9, [r0]
 800544c:	4604      	mov	r4, r0
 800544e:	e7e4      	b.n	800541a <__pow5mult+0x6a>
 8005450:	4638      	mov	r0, r7
 8005452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005456:	bf00      	nop
 8005458:	08006c98 	.word	0x08006c98
 800545c:	08006ac8 	.word	0x08006ac8
 8005460:	08006b48 	.word	0x08006b48

08005464 <__lshift>:
 8005464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	460c      	mov	r4, r1
 800546a:	6849      	ldr	r1, [r1, #4]
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	4607      	mov	r7, r0
 8005476:	4691      	mov	r9, r2
 8005478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800547c:	f108 0601 	add.w	r6, r8, #1
 8005480:	42b3      	cmp	r3, r6
 8005482:	db0b      	blt.n	800549c <__lshift+0x38>
 8005484:	4638      	mov	r0, r7
 8005486:	f7ff fddd 	bl	8005044 <_Balloc>
 800548a:	4605      	mov	r5, r0
 800548c:	b948      	cbnz	r0, 80054a2 <__lshift+0x3e>
 800548e:	4602      	mov	r2, r0
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <__lshift+0xd0>)
 8005492:	4829      	ldr	r0, [pc, #164]	; (8005538 <__lshift+0xd4>)
 8005494:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005498:	f000 fb8e 	bl	8005bb8 <__assert_func>
 800549c:	3101      	adds	r1, #1
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	e7ee      	b.n	8005480 <__lshift+0x1c>
 80054a2:	2300      	movs	r3, #0
 80054a4:	f100 0114 	add.w	r1, r0, #20
 80054a8:	f100 0210 	add.w	r2, r0, #16
 80054ac:	4618      	mov	r0, r3
 80054ae:	4553      	cmp	r3, sl
 80054b0:	db33      	blt.n	800551a <__lshift+0xb6>
 80054b2:	6920      	ldr	r0, [r4, #16]
 80054b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054b8:	f104 0314 	add.w	r3, r4, #20
 80054bc:	f019 091f 	ands.w	r9, r9, #31
 80054c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054c8:	d02b      	beq.n	8005522 <__lshift+0xbe>
 80054ca:	f1c9 0e20 	rsb	lr, r9, #32
 80054ce:	468a      	mov	sl, r1
 80054d0:	2200      	movs	r2, #0
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	fa00 f009 	lsl.w	r0, r0, r9
 80054d8:	4310      	orrs	r0, r2
 80054da:	f84a 0b04 	str.w	r0, [sl], #4
 80054de:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e2:	459c      	cmp	ip, r3
 80054e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80054e8:	d8f3      	bhi.n	80054d2 <__lshift+0x6e>
 80054ea:	ebac 0304 	sub.w	r3, ip, r4
 80054ee:	3b15      	subs	r3, #21
 80054f0:	f023 0303 	bic.w	r3, r3, #3
 80054f4:	3304      	adds	r3, #4
 80054f6:	f104 0015 	add.w	r0, r4, #21
 80054fa:	4584      	cmp	ip, r0
 80054fc:	bf38      	it	cc
 80054fe:	2304      	movcc	r3, #4
 8005500:	50ca      	str	r2, [r1, r3]
 8005502:	b10a      	cbz	r2, 8005508 <__lshift+0xa4>
 8005504:	f108 0602 	add.w	r6, r8, #2
 8005508:	3e01      	subs	r6, #1
 800550a:	4638      	mov	r0, r7
 800550c:	612e      	str	r6, [r5, #16]
 800550e:	4621      	mov	r1, r4
 8005510:	f7ff fdd8 	bl	80050c4 <_Bfree>
 8005514:	4628      	mov	r0, r5
 8005516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551a:	f842 0f04 	str.w	r0, [r2, #4]!
 800551e:	3301      	adds	r3, #1
 8005520:	e7c5      	b.n	80054ae <__lshift+0x4a>
 8005522:	3904      	subs	r1, #4
 8005524:	f853 2b04 	ldr.w	r2, [r3], #4
 8005528:	f841 2f04 	str.w	r2, [r1, #4]!
 800552c:	459c      	cmp	ip, r3
 800552e:	d8f9      	bhi.n	8005524 <__lshift+0xc0>
 8005530:	e7ea      	b.n	8005508 <__lshift+0xa4>
 8005532:	bf00      	nop
 8005534:	08006b37 	.word	0x08006b37
 8005538:	08006b48 	.word	0x08006b48

0800553c <__mcmp>:
 800553c:	b530      	push	{r4, r5, lr}
 800553e:	6902      	ldr	r2, [r0, #16]
 8005540:	690c      	ldr	r4, [r1, #16]
 8005542:	1b12      	subs	r2, r2, r4
 8005544:	d10e      	bne.n	8005564 <__mcmp+0x28>
 8005546:	f100 0314 	add.w	r3, r0, #20
 800554a:	3114      	adds	r1, #20
 800554c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800555c:	42a5      	cmp	r5, r4
 800555e:	d003      	beq.n	8005568 <__mcmp+0x2c>
 8005560:	d305      	bcc.n	800556e <__mcmp+0x32>
 8005562:	2201      	movs	r2, #1
 8005564:	4610      	mov	r0, r2
 8005566:	bd30      	pop	{r4, r5, pc}
 8005568:	4283      	cmp	r3, r0
 800556a:	d3f3      	bcc.n	8005554 <__mcmp+0x18>
 800556c:	e7fa      	b.n	8005564 <__mcmp+0x28>
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	e7f7      	b.n	8005564 <__mcmp+0x28>

08005574 <__mdiff>:
 8005574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	460c      	mov	r4, r1
 800557a:	4606      	mov	r6, r0
 800557c:	4611      	mov	r1, r2
 800557e:	4620      	mov	r0, r4
 8005580:	4690      	mov	r8, r2
 8005582:	f7ff ffdb 	bl	800553c <__mcmp>
 8005586:	1e05      	subs	r5, r0, #0
 8005588:	d110      	bne.n	80055ac <__mdiff+0x38>
 800558a:	4629      	mov	r1, r5
 800558c:	4630      	mov	r0, r6
 800558e:	f7ff fd59 	bl	8005044 <_Balloc>
 8005592:	b930      	cbnz	r0, 80055a2 <__mdiff+0x2e>
 8005594:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <__mdiff+0x10c>)
 8005596:	4602      	mov	r2, r0
 8005598:	f240 2137 	movw	r1, #567	; 0x237
 800559c:	4839      	ldr	r0, [pc, #228]	; (8005684 <__mdiff+0x110>)
 800559e:	f000 fb0b 	bl	8005bb8 <__assert_func>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	bfa4      	itt	ge
 80055ae:	4643      	movge	r3, r8
 80055b0:	46a0      	movge	r8, r4
 80055b2:	4630      	mov	r0, r6
 80055b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80055b8:	bfa6      	itte	ge
 80055ba:	461c      	movge	r4, r3
 80055bc:	2500      	movge	r5, #0
 80055be:	2501      	movlt	r5, #1
 80055c0:	f7ff fd40 	bl	8005044 <_Balloc>
 80055c4:	b920      	cbnz	r0, 80055d0 <__mdiff+0x5c>
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <__mdiff+0x10c>)
 80055c8:	4602      	mov	r2, r0
 80055ca:	f240 2145 	movw	r1, #581	; 0x245
 80055ce:	e7e5      	b.n	800559c <__mdiff+0x28>
 80055d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80055d4:	6926      	ldr	r6, [r4, #16]
 80055d6:	60c5      	str	r5, [r0, #12]
 80055d8:	f104 0914 	add.w	r9, r4, #20
 80055dc:	f108 0514 	add.w	r5, r8, #20
 80055e0:	f100 0e14 	add.w	lr, r0, #20
 80055e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80055e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80055ec:	f108 0210 	add.w	r2, r8, #16
 80055f0:	46f2      	mov	sl, lr
 80055f2:	2100      	movs	r1, #0
 80055f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80055f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80055fc:	fa11 f88b 	uxtah	r8, r1, fp
 8005600:	b299      	uxth	r1, r3
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	eba8 0801 	sub.w	r8, r8, r1
 8005608:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800560c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005610:	fa1f f888 	uxth.w	r8, r8
 8005614:	1419      	asrs	r1, r3, #16
 8005616:	454e      	cmp	r6, r9
 8005618:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800561c:	f84a 3b04 	str.w	r3, [sl], #4
 8005620:	d8e8      	bhi.n	80055f4 <__mdiff+0x80>
 8005622:	1b33      	subs	r3, r6, r4
 8005624:	3b15      	subs	r3, #21
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	3304      	adds	r3, #4
 800562c:	3415      	adds	r4, #21
 800562e:	42a6      	cmp	r6, r4
 8005630:	bf38      	it	cc
 8005632:	2304      	movcc	r3, #4
 8005634:	441d      	add	r5, r3
 8005636:	4473      	add	r3, lr
 8005638:	469e      	mov	lr, r3
 800563a:	462e      	mov	r6, r5
 800563c:	4566      	cmp	r6, ip
 800563e:	d30e      	bcc.n	800565e <__mdiff+0xea>
 8005640:	f10c 0203 	add.w	r2, ip, #3
 8005644:	1b52      	subs	r2, r2, r5
 8005646:	f022 0203 	bic.w	r2, r2, #3
 800564a:	3d03      	subs	r5, #3
 800564c:	45ac      	cmp	ip, r5
 800564e:	bf38      	it	cc
 8005650:	2200      	movcc	r2, #0
 8005652:	4413      	add	r3, r2
 8005654:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005658:	b17a      	cbz	r2, 800567a <__mdiff+0x106>
 800565a:	6107      	str	r7, [r0, #16]
 800565c:	e7a4      	b.n	80055a8 <__mdiff+0x34>
 800565e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005662:	fa11 f288 	uxtah	r2, r1, r8
 8005666:	1414      	asrs	r4, r2, #16
 8005668:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800566c:	b292      	uxth	r2, r2
 800566e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005672:	f84e 2b04 	str.w	r2, [lr], #4
 8005676:	1421      	asrs	r1, r4, #16
 8005678:	e7e0      	b.n	800563c <__mdiff+0xc8>
 800567a:	3f01      	subs	r7, #1
 800567c:	e7ea      	b.n	8005654 <__mdiff+0xe0>
 800567e:	bf00      	nop
 8005680:	08006b37 	.word	0x08006b37
 8005684:	08006b48 	.word	0x08006b48

08005688 <__d2b>:
 8005688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800568c:	460f      	mov	r7, r1
 800568e:	2101      	movs	r1, #1
 8005690:	ec59 8b10 	vmov	r8, r9, d0
 8005694:	4616      	mov	r6, r2
 8005696:	f7ff fcd5 	bl	8005044 <_Balloc>
 800569a:	4604      	mov	r4, r0
 800569c:	b930      	cbnz	r0, 80056ac <__d2b+0x24>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <__d2b+0xac>)
 80056a2:	4825      	ldr	r0, [pc, #148]	; (8005738 <__d2b+0xb0>)
 80056a4:	f240 310f 	movw	r1, #783	; 0x30f
 80056a8:	f000 fa86 	bl	8005bb8 <__assert_func>
 80056ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056b4:	bb2d      	cbnz	r5, 8005702 <__d2b+0x7a>
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	f1b8 0300 	subs.w	r3, r8, #0
 80056bc:	d026      	beq.n	800570c <__d2b+0x84>
 80056be:	4668      	mov	r0, sp
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	f7ff fd87 	bl	80051d4 <__lo0bits>
 80056c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80056ca:	b1e8      	cbz	r0, 8005708 <__d2b+0x80>
 80056cc:	f1c0 0320 	rsb	r3, r0, #32
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	430b      	orrs	r3, r1
 80056d6:	40c2      	lsrs	r2, r0
 80056d8:	6163      	str	r3, [r4, #20]
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	61a3      	str	r3, [r4, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf14      	ite	ne
 80056e4:	2202      	movne	r2, #2
 80056e6:	2201      	moveq	r2, #1
 80056e8:	6122      	str	r2, [r4, #16]
 80056ea:	b1bd      	cbz	r5, 800571c <__d2b+0x94>
 80056ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80056f0:	4405      	add	r5, r0
 80056f2:	603d      	str	r5, [r7, #0]
 80056f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80056f8:	6030      	str	r0, [r6, #0]
 80056fa:	4620      	mov	r0, r4
 80056fc:	b003      	add	sp, #12
 80056fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005706:	e7d6      	b.n	80056b6 <__d2b+0x2e>
 8005708:	6161      	str	r1, [r4, #20]
 800570a:	e7e7      	b.n	80056dc <__d2b+0x54>
 800570c:	a801      	add	r0, sp, #4
 800570e:	f7ff fd61 	bl	80051d4 <__lo0bits>
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	6163      	str	r3, [r4, #20]
 8005716:	3020      	adds	r0, #32
 8005718:	2201      	movs	r2, #1
 800571a:	e7e5      	b.n	80056e8 <__d2b+0x60>
 800571c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005724:	6038      	str	r0, [r7, #0]
 8005726:	6918      	ldr	r0, [r3, #16]
 8005728:	f7ff fd34 	bl	8005194 <__hi0bits>
 800572c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005730:	e7e2      	b.n	80056f8 <__d2b+0x70>
 8005732:	bf00      	nop
 8005734:	08006b37 	.word	0x08006b37
 8005738:	08006b48 	.word	0x08006b48

0800573c <__ssputs_r>:
 800573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	688e      	ldr	r6, [r1, #8]
 8005742:	461f      	mov	r7, r3
 8005744:	42be      	cmp	r6, r7
 8005746:	680b      	ldr	r3, [r1, #0]
 8005748:	4682      	mov	sl, r0
 800574a:	460c      	mov	r4, r1
 800574c:	4690      	mov	r8, r2
 800574e:	d82c      	bhi.n	80057aa <__ssputs_r+0x6e>
 8005750:	898a      	ldrh	r2, [r1, #12]
 8005752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005756:	d026      	beq.n	80057a6 <__ssputs_r+0x6a>
 8005758:	6965      	ldr	r5, [r4, #20]
 800575a:	6909      	ldr	r1, [r1, #16]
 800575c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005760:	eba3 0901 	sub.w	r9, r3, r1
 8005764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005768:	1c7b      	adds	r3, r7, #1
 800576a:	444b      	add	r3, r9
 800576c:	106d      	asrs	r5, r5, #1
 800576e:	429d      	cmp	r5, r3
 8005770:	bf38      	it	cc
 8005772:	461d      	movcc	r5, r3
 8005774:	0553      	lsls	r3, r2, #21
 8005776:	d527      	bpl.n	80057c8 <__ssputs_r+0x8c>
 8005778:	4629      	mov	r1, r5
 800577a:	f7ff fbd7 	bl	8004f2c <_malloc_r>
 800577e:	4606      	mov	r6, r0
 8005780:	b360      	cbz	r0, 80057dc <__ssputs_r+0xa0>
 8005782:	6921      	ldr	r1, [r4, #16]
 8005784:	464a      	mov	r2, r9
 8005786:	f000 fa09 	bl	8005b9c <memcpy>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	6126      	str	r6, [r4, #16]
 8005798:	6165      	str	r5, [r4, #20]
 800579a:	444e      	add	r6, r9
 800579c:	eba5 0509 	sub.w	r5, r5, r9
 80057a0:	6026      	str	r6, [r4, #0]
 80057a2:	60a5      	str	r5, [r4, #8]
 80057a4:	463e      	mov	r6, r7
 80057a6:	42be      	cmp	r6, r7
 80057a8:	d900      	bls.n	80057ac <__ssputs_r+0x70>
 80057aa:	463e      	mov	r6, r7
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	4632      	mov	r2, r6
 80057b0:	4641      	mov	r1, r8
 80057b2:	f000 f9c9 	bl	8005b48 <memmove>
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	1b9b      	subs	r3, r3, r6
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	4433      	add	r3, r6
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	2000      	movs	r0, #0
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	462a      	mov	r2, r5
 80057ca:	f000 fa3b 	bl	8005c44 <_realloc_r>
 80057ce:	4606      	mov	r6, r0
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d1e0      	bne.n	8005796 <__ssputs_r+0x5a>
 80057d4:	6921      	ldr	r1, [r4, #16]
 80057d6:	4650      	mov	r0, sl
 80057d8:	f7ff fb34 	bl	8004e44 <_free_r>
 80057dc:	230c      	movs	r3, #12
 80057de:	f8ca 3000 	str.w	r3, [sl]
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	f04f 30ff 	mov.w	r0, #4294967295
 80057ee:	e7e9      	b.n	80057c4 <__ssputs_r+0x88>

080057f0 <_svfiprintf_r>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	4698      	mov	r8, r3
 80057f6:	898b      	ldrh	r3, [r1, #12]
 80057f8:	061b      	lsls	r3, r3, #24
 80057fa:	b09d      	sub	sp, #116	; 0x74
 80057fc:	4607      	mov	r7, r0
 80057fe:	460d      	mov	r5, r1
 8005800:	4614      	mov	r4, r2
 8005802:	d50e      	bpl.n	8005822 <_svfiprintf_r+0x32>
 8005804:	690b      	ldr	r3, [r1, #16]
 8005806:	b963      	cbnz	r3, 8005822 <_svfiprintf_r+0x32>
 8005808:	2140      	movs	r1, #64	; 0x40
 800580a:	f7ff fb8f 	bl	8004f2c <_malloc_r>
 800580e:	6028      	str	r0, [r5, #0]
 8005810:	6128      	str	r0, [r5, #16]
 8005812:	b920      	cbnz	r0, 800581e <_svfiprintf_r+0x2e>
 8005814:	230c      	movs	r3, #12
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	e0d0      	b.n	80059c0 <_svfiprintf_r+0x1d0>
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	616b      	str	r3, [r5, #20]
 8005822:	2300      	movs	r3, #0
 8005824:	9309      	str	r3, [sp, #36]	; 0x24
 8005826:	2320      	movs	r3, #32
 8005828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800582c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005830:	2330      	movs	r3, #48	; 0x30
 8005832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80059d8 <_svfiprintf_r+0x1e8>
 8005836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800583a:	f04f 0901 	mov.w	r9, #1
 800583e:	4623      	mov	r3, r4
 8005840:	469a      	mov	sl, r3
 8005842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005846:	b10a      	cbz	r2, 800584c <_svfiprintf_r+0x5c>
 8005848:	2a25      	cmp	r2, #37	; 0x25
 800584a:	d1f9      	bne.n	8005840 <_svfiprintf_r+0x50>
 800584c:	ebba 0b04 	subs.w	fp, sl, r4
 8005850:	d00b      	beq.n	800586a <_svfiprintf_r+0x7a>
 8005852:	465b      	mov	r3, fp
 8005854:	4622      	mov	r2, r4
 8005856:	4629      	mov	r1, r5
 8005858:	4638      	mov	r0, r7
 800585a:	f7ff ff6f 	bl	800573c <__ssputs_r>
 800585e:	3001      	adds	r0, #1
 8005860:	f000 80a9 	beq.w	80059b6 <_svfiprintf_r+0x1c6>
 8005864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005866:	445a      	add	r2, fp
 8005868:	9209      	str	r2, [sp, #36]	; 0x24
 800586a:	f89a 3000 	ldrb.w	r3, [sl]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80a1 	beq.w	80059b6 <_svfiprintf_r+0x1c6>
 8005874:	2300      	movs	r3, #0
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800587e:	f10a 0a01 	add.w	sl, sl, #1
 8005882:	9304      	str	r3, [sp, #16]
 8005884:	9307      	str	r3, [sp, #28]
 8005886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800588a:	931a      	str	r3, [sp, #104]	; 0x68
 800588c:	4654      	mov	r4, sl
 800588e:	2205      	movs	r2, #5
 8005890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005894:	4850      	ldr	r0, [pc, #320]	; (80059d8 <_svfiprintf_r+0x1e8>)
 8005896:	f7fa fc9b 	bl	80001d0 <memchr>
 800589a:	9a04      	ldr	r2, [sp, #16]
 800589c:	b9d8      	cbnz	r0, 80058d6 <_svfiprintf_r+0xe6>
 800589e:	06d0      	lsls	r0, r2, #27
 80058a0:	bf44      	itt	mi
 80058a2:	2320      	movmi	r3, #32
 80058a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058a8:	0711      	lsls	r1, r2, #28
 80058aa:	bf44      	itt	mi
 80058ac:	232b      	movmi	r3, #43	; 0x2b
 80058ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b2:	f89a 3000 	ldrb.w	r3, [sl]
 80058b6:	2b2a      	cmp	r3, #42	; 0x2a
 80058b8:	d015      	beq.n	80058e6 <_svfiprintf_r+0xf6>
 80058ba:	9a07      	ldr	r2, [sp, #28]
 80058bc:	4654      	mov	r4, sl
 80058be:	2000      	movs	r0, #0
 80058c0:	f04f 0c0a 	mov.w	ip, #10
 80058c4:	4621      	mov	r1, r4
 80058c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ca:	3b30      	subs	r3, #48	; 0x30
 80058cc:	2b09      	cmp	r3, #9
 80058ce:	d94d      	bls.n	800596c <_svfiprintf_r+0x17c>
 80058d0:	b1b0      	cbz	r0, 8005900 <_svfiprintf_r+0x110>
 80058d2:	9207      	str	r2, [sp, #28]
 80058d4:	e014      	b.n	8005900 <_svfiprintf_r+0x110>
 80058d6:	eba0 0308 	sub.w	r3, r0, r8
 80058da:	fa09 f303 	lsl.w	r3, r9, r3
 80058de:	4313      	orrs	r3, r2
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	46a2      	mov	sl, r4
 80058e4:	e7d2      	b.n	800588c <_svfiprintf_r+0x9c>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	1d19      	adds	r1, r3, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	9103      	str	r1, [sp, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bfbb      	ittet	lt
 80058f2:	425b      	neglt	r3, r3
 80058f4:	f042 0202 	orrlt.w	r2, r2, #2
 80058f8:	9307      	strge	r3, [sp, #28]
 80058fa:	9307      	strlt	r3, [sp, #28]
 80058fc:	bfb8      	it	lt
 80058fe:	9204      	strlt	r2, [sp, #16]
 8005900:	7823      	ldrb	r3, [r4, #0]
 8005902:	2b2e      	cmp	r3, #46	; 0x2e
 8005904:	d10c      	bne.n	8005920 <_svfiprintf_r+0x130>
 8005906:	7863      	ldrb	r3, [r4, #1]
 8005908:	2b2a      	cmp	r3, #42	; 0x2a
 800590a:	d134      	bne.n	8005976 <_svfiprintf_r+0x186>
 800590c:	9b03      	ldr	r3, [sp, #12]
 800590e:	1d1a      	adds	r2, r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	9203      	str	r2, [sp, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	bfb8      	it	lt
 8005918:	f04f 33ff 	movlt.w	r3, #4294967295
 800591c:	3402      	adds	r4, #2
 800591e:	9305      	str	r3, [sp, #20]
 8005920:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80059e8 <_svfiprintf_r+0x1f8>
 8005924:	7821      	ldrb	r1, [r4, #0]
 8005926:	2203      	movs	r2, #3
 8005928:	4650      	mov	r0, sl
 800592a:	f7fa fc51 	bl	80001d0 <memchr>
 800592e:	b138      	cbz	r0, 8005940 <_svfiprintf_r+0x150>
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	eba0 000a 	sub.w	r0, r0, sl
 8005936:	2240      	movs	r2, #64	; 0x40
 8005938:	4082      	lsls	r2, r0
 800593a:	4313      	orrs	r3, r2
 800593c:	3401      	adds	r4, #1
 800593e:	9304      	str	r3, [sp, #16]
 8005940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005944:	4825      	ldr	r0, [pc, #148]	; (80059dc <_svfiprintf_r+0x1ec>)
 8005946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800594a:	2206      	movs	r2, #6
 800594c:	f7fa fc40 	bl	80001d0 <memchr>
 8005950:	2800      	cmp	r0, #0
 8005952:	d038      	beq.n	80059c6 <_svfiprintf_r+0x1d6>
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <_svfiprintf_r+0x1f0>)
 8005956:	bb1b      	cbnz	r3, 80059a0 <_svfiprintf_r+0x1b0>
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	3307      	adds	r3, #7
 800595c:	f023 0307 	bic.w	r3, r3, #7
 8005960:	3308      	adds	r3, #8
 8005962:	9303      	str	r3, [sp, #12]
 8005964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005966:	4433      	add	r3, r6
 8005968:	9309      	str	r3, [sp, #36]	; 0x24
 800596a:	e768      	b.n	800583e <_svfiprintf_r+0x4e>
 800596c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005970:	460c      	mov	r4, r1
 8005972:	2001      	movs	r0, #1
 8005974:	e7a6      	b.n	80058c4 <_svfiprintf_r+0xd4>
 8005976:	2300      	movs	r3, #0
 8005978:	3401      	adds	r4, #1
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	4619      	mov	r1, r3
 800597e:	f04f 0c0a 	mov.w	ip, #10
 8005982:	4620      	mov	r0, r4
 8005984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005988:	3a30      	subs	r2, #48	; 0x30
 800598a:	2a09      	cmp	r2, #9
 800598c:	d903      	bls.n	8005996 <_svfiprintf_r+0x1a6>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0c6      	beq.n	8005920 <_svfiprintf_r+0x130>
 8005992:	9105      	str	r1, [sp, #20]
 8005994:	e7c4      	b.n	8005920 <_svfiprintf_r+0x130>
 8005996:	fb0c 2101 	mla	r1, ip, r1, r2
 800599a:	4604      	mov	r4, r0
 800599c:	2301      	movs	r3, #1
 800599e:	e7f0      	b.n	8005982 <_svfiprintf_r+0x192>
 80059a0:	ab03      	add	r3, sp, #12
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	462a      	mov	r2, r5
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <_svfiprintf_r+0x1f4>)
 80059a8:	a904      	add	r1, sp, #16
 80059aa:	4638      	mov	r0, r7
 80059ac:	f7fd fe62 	bl	8003674 <_printf_float>
 80059b0:	1c42      	adds	r2, r0, #1
 80059b2:	4606      	mov	r6, r0
 80059b4:	d1d6      	bne.n	8005964 <_svfiprintf_r+0x174>
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	065b      	lsls	r3, r3, #25
 80059ba:	f53f af2d 	bmi.w	8005818 <_svfiprintf_r+0x28>
 80059be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059c0:	b01d      	add	sp, #116	; 0x74
 80059c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c6:	ab03      	add	r3, sp, #12
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	462a      	mov	r2, r5
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <_svfiprintf_r+0x1f4>)
 80059ce:	a904      	add	r1, sp, #16
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7fe f8f3 	bl	8003bbc <_printf_i>
 80059d6:	e7eb      	b.n	80059b0 <_svfiprintf_r+0x1c0>
 80059d8:	08006ca4 	.word	0x08006ca4
 80059dc:	08006cae 	.word	0x08006cae
 80059e0:	08003675 	.word	0x08003675
 80059e4:	0800573d 	.word	0x0800573d
 80059e8:	08006caa 	.word	0x08006caa

080059ec <__sflush_r>:
 80059ec:	898a      	ldrh	r2, [r1, #12]
 80059ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f2:	4605      	mov	r5, r0
 80059f4:	0710      	lsls	r0, r2, #28
 80059f6:	460c      	mov	r4, r1
 80059f8:	d458      	bmi.n	8005aac <__sflush_r+0xc0>
 80059fa:	684b      	ldr	r3, [r1, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dc05      	bgt.n	8005a0c <__sflush_r+0x20>
 8005a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dc02      	bgt.n	8005a0c <__sflush_r+0x20>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d0f9      	beq.n	8005a06 <__sflush_r+0x1a>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a18:	682f      	ldr	r7, [r5, #0]
 8005a1a:	6a21      	ldr	r1, [r4, #32]
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	d032      	beq.n	8005a86 <__sflush_r+0x9a>
 8005a20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	075a      	lsls	r2, r3, #29
 8005a26:	d505      	bpl.n	8005a34 <__sflush_r+0x48>
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	1ac0      	subs	r0, r0, r3
 8005a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a2e:	b10b      	cbz	r3, 8005a34 <__sflush_r+0x48>
 8005a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a32:	1ac0      	subs	r0, r0, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	4602      	mov	r2, r0
 8005a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3a:	6a21      	ldr	r1, [r4, #32]
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b0      	blx	r6
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	d106      	bne.n	8005a54 <__sflush_r+0x68>
 8005a46:	6829      	ldr	r1, [r5, #0]
 8005a48:	291d      	cmp	r1, #29
 8005a4a:	d82b      	bhi.n	8005aa4 <__sflush_r+0xb8>
 8005a4c:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <__sflush_r+0x108>)
 8005a4e:	410a      	asrs	r2, r1
 8005a50:	07d6      	lsls	r6, r2, #31
 8005a52:	d427      	bmi.n	8005aa4 <__sflush_r+0xb8>
 8005a54:	2200      	movs	r2, #0
 8005a56:	6062      	str	r2, [r4, #4]
 8005a58:	04d9      	lsls	r1, r3, #19
 8005a5a:	6922      	ldr	r2, [r4, #16]
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	d504      	bpl.n	8005a6a <__sflush_r+0x7e>
 8005a60:	1c42      	adds	r2, r0, #1
 8005a62:	d101      	bne.n	8005a68 <__sflush_r+0x7c>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b903      	cbnz	r3, 8005a6a <__sflush_r+0x7e>
 8005a68:	6560      	str	r0, [r4, #84]	; 0x54
 8005a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a6c:	602f      	str	r7, [r5, #0]
 8005a6e:	2900      	cmp	r1, #0
 8005a70:	d0c9      	beq.n	8005a06 <__sflush_r+0x1a>
 8005a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a76:	4299      	cmp	r1, r3
 8005a78:	d002      	beq.n	8005a80 <__sflush_r+0x94>
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7ff f9e2 	bl	8004e44 <_free_r>
 8005a80:	2000      	movs	r0, #0
 8005a82:	6360      	str	r0, [r4, #52]	; 0x34
 8005a84:	e7c0      	b.n	8005a08 <__sflush_r+0x1c>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b0      	blx	r6
 8005a8c:	1c41      	adds	r1, r0, #1
 8005a8e:	d1c8      	bne.n	8005a22 <__sflush_r+0x36>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0c5      	beq.n	8005a22 <__sflush_r+0x36>
 8005a96:	2b1d      	cmp	r3, #29
 8005a98:	d001      	beq.n	8005a9e <__sflush_r+0xb2>
 8005a9a:	2b16      	cmp	r3, #22
 8005a9c:	d101      	bne.n	8005aa2 <__sflush_r+0xb6>
 8005a9e:	602f      	str	r7, [r5, #0]
 8005aa0:	e7b1      	b.n	8005a06 <__sflush_r+0x1a>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	e7ad      	b.n	8005a08 <__sflush_r+0x1c>
 8005aac:	690f      	ldr	r7, [r1, #16]
 8005aae:	2f00      	cmp	r7, #0
 8005ab0:	d0a9      	beq.n	8005a06 <__sflush_r+0x1a>
 8005ab2:	0793      	lsls	r3, r2, #30
 8005ab4:	680e      	ldr	r6, [r1, #0]
 8005ab6:	bf08      	it	eq
 8005ab8:	694b      	ldreq	r3, [r1, #20]
 8005aba:	600f      	str	r7, [r1, #0]
 8005abc:	bf18      	it	ne
 8005abe:	2300      	movne	r3, #0
 8005ac0:	eba6 0807 	sub.w	r8, r6, r7
 8005ac4:	608b      	str	r3, [r1, #8]
 8005ac6:	f1b8 0f00 	cmp.w	r8, #0
 8005aca:	dd9c      	ble.n	8005a06 <__sflush_r+0x1a>
 8005acc:	6a21      	ldr	r1, [r4, #32]
 8005ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ad0:	4643      	mov	r3, r8
 8005ad2:	463a      	mov	r2, r7
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b0      	blx	r6
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	dc06      	bgt.n	8005aea <__sflush_r+0xfe>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	e78e      	b.n	8005a08 <__sflush_r+0x1c>
 8005aea:	4407      	add	r7, r0
 8005aec:	eba8 0800 	sub.w	r8, r8, r0
 8005af0:	e7e9      	b.n	8005ac6 <__sflush_r+0xda>
 8005af2:	bf00      	nop
 8005af4:	dfbffffe 	.word	0xdfbffffe

08005af8 <_fflush_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	690b      	ldr	r3, [r1, #16]
 8005afc:	4605      	mov	r5, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	b913      	cbnz	r3, 8005b08 <_fflush_r+0x10>
 8005b02:	2500      	movs	r5, #0
 8005b04:	4628      	mov	r0, r5
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	b118      	cbz	r0, 8005b12 <_fflush_r+0x1a>
 8005b0a:	6a03      	ldr	r3, [r0, #32]
 8005b0c:	b90b      	cbnz	r3, 8005b12 <_fflush_r+0x1a>
 8005b0e:	f7fe fa03 	bl	8003f18 <__sinit>
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f3      	beq.n	8005b02 <_fflush_r+0xa>
 8005b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d404      	bmi.n	8005b2a <_fflush_r+0x32>
 8005b20:	0599      	lsls	r1, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_fflush_r+0x32>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f7fe fb0e 	bl	8004146 <__retarget_lock_acquire_recursive>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7ff ff5d 	bl	80059ec <__sflush_r>
 8005b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	4605      	mov	r5, r0
 8005b38:	d4e4      	bmi.n	8005b04 <_fflush_r+0xc>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d4e1      	bmi.n	8005b04 <_fflush_r+0xc>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f7fe fb01 	bl	8004148 <__retarget_lock_release_recursive>
 8005b46:	e7dd      	b.n	8005b04 <_fflush_r+0xc>

08005b48 <memmove>:
 8005b48:	4288      	cmp	r0, r1
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	eb01 0402 	add.w	r4, r1, r2
 8005b50:	d902      	bls.n	8005b58 <memmove+0x10>
 8005b52:	4284      	cmp	r4, r0
 8005b54:	4623      	mov	r3, r4
 8005b56:	d807      	bhi.n	8005b68 <memmove+0x20>
 8005b58:	1e43      	subs	r3, r0, #1
 8005b5a:	42a1      	cmp	r1, r4
 8005b5c:	d008      	beq.n	8005b70 <memmove+0x28>
 8005b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b66:	e7f8      	b.n	8005b5a <memmove+0x12>
 8005b68:	4402      	add	r2, r0
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	428a      	cmp	r2, r1
 8005b6e:	d100      	bne.n	8005b72 <memmove+0x2a>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b7a:	e7f7      	b.n	8005b6c <memmove+0x24>

08005b7c <_sbrk_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_sbrk_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fc ff60 	bl	8002a4c <_sbrk>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_sbrk_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_sbrk_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200005bc 	.word	0x200005bc

08005b9c <memcpy>:
 8005b9c:	440a      	add	r2, r1
 8005b9e:	4291      	cmp	r1, r2
 8005ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba4:	d100      	bne.n	8005ba8 <memcpy+0xc>
 8005ba6:	4770      	bx	lr
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb2:	4291      	cmp	r1, r2
 8005bb4:	d1f9      	bne.n	8005baa <memcpy+0xe>
 8005bb6:	bd10      	pop	{r4, pc}

08005bb8 <__assert_func>:
 8005bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bba:	4614      	mov	r4, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <__assert_func+0x2c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	68d8      	ldr	r0, [r3, #12]
 8005bc6:	b14c      	cbz	r4, 8005bdc <__assert_func+0x24>
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <__assert_func+0x30>)
 8005bca:	9100      	str	r1, [sp, #0]
 8005bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bd0:	4906      	ldr	r1, [pc, #24]	; (8005bec <__assert_func+0x34>)
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f000 f872 	bl	8005cbc <fiprintf>
 8005bd8:	f000 f882 	bl	8005ce0 <abort>
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <__assert_func+0x38>)
 8005bde:	461c      	mov	r4, r3
 8005be0:	e7f3      	b.n	8005bca <__assert_func+0x12>
 8005be2:	bf00      	nop
 8005be4:	2000005c 	.word	0x2000005c
 8005be8:	08006cbf 	.word	0x08006cbf
 8005bec:	08006ccc 	.word	0x08006ccc
 8005bf0:	08006cfa 	.word	0x08006cfa

08005bf4 <_calloc_r>:
 8005bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bf6:	fba1 2402 	umull	r2, r4, r1, r2
 8005bfa:	b94c      	cbnz	r4, 8005c10 <_calloc_r+0x1c>
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	9201      	str	r2, [sp, #4]
 8005c00:	f7ff f994 	bl	8004f2c <_malloc_r>
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	4605      	mov	r5, r0
 8005c08:	b930      	cbnz	r0, 8005c18 <_calloc_r+0x24>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	b003      	add	sp, #12
 8005c0e:	bd30      	pop	{r4, r5, pc}
 8005c10:	220c      	movs	r2, #12
 8005c12:	6002      	str	r2, [r0, #0]
 8005c14:	2500      	movs	r5, #0
 8005c16:	e7f8      	b.n	8005c0a <_calloc_r+0x16>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f7fe fa16 	bl	800404a <memset>
 8005c1e:	e7f4      	b.n	8005c0a <_calloc_r+0x16>

08005c20 <__ascii_mbtowc>:
 8005c20:	b082      	sub	sp, #8
 8005c22:	b901      	cbnz	r1, 8005c26 <__ascii_mbtowc+0x6>
 8005c24:	a901      	add	r1, sp, #4
 8005c26:	b142      	cbz	r2, 8005c3a <__ascii_mbtowc+0x1a>
 8005c28:	b14b      	cbz	r3, 8005c3e <__ascii_mbtowc+0x1e>
 8005c2a:	7813      	ldrb	r3, [r2, #0]
 8005c2c:	600b      	str	r3, [r1, #0]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	1e10      	subs	r0, r2, #0
 8005c32:	bf18      	it	ne
 8005c34:	2001      	movne	r0, #1
 8005c36:	b002      	add	sp, #8
 8005c38:	4770      	bx	lr
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	e7fb      	b.n	8005c36 <__ascii_mbtowc+0x16>
 8005c3e:	f06f 0001 	mvn.w	r0, #1
 8005c42:	e7f8      	b.n	8005c36 <__ascii_mbtowc+0x16>

08005c44 <_realloc_r>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	b921      	cbnz	r1, 8005c5a <_realloc_r+0x16>
 8005c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	4611      	mov	r1, r2
 8005c56:	f7ff b969 	b.w	8004f2c <_malloc_r>
 8005c5a:	b92a      	cbnz	r2, 8005c68 <_realloc_r+0x24>
 8005c5c:	f7ff f8f2 	bl	8004e44 <_free_r>
 8005c60:	4625      	mov	r5, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	f000 f841 	bl	8005cee <_malloc_usable_size_r>
 8005c6c:	4284      	cmp	r4, r0
 8005c6e:	4607      	mov	r7, r0
 8005c70:	d802      	bhi.n	8005c78 <_realloc_r+0x34>
 8005c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c76:	d812      	bhi.n	8005c9e <_realloc_r+0x5a>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f7ff f956 	bl	8004f2c <_malloc_r>
 8005c80:	4605      	mov	r5, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0ed      	beq.n	8005c62 <_realloc_r+0x1e>
 8005c86:	42bc      	cmp	r4, r7
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	bf28      	it	cs
 8005c8e:	463a      	movcs	r2, r7
 8005c90:	f7ff ff84 	bl	8005b9c <memcpy>
 8005c94:	4631      	mov	r1, r6
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff f8d4 	bl	8004e44 <_free_r>
 8005c9c:	e7e1      	b.n	8005c62 <_realloc_r+0x1e>
 8005c9e:	4635      	mov	r5, r6
 8005ca0:	e7df      	b.n	8005c62 <_realloc_r+0x1e>

08005ca2 <__ascii_wctomb>:
 8005ca2:	b149      	cbz	r1, 8005cb8 <__ascii_wctomb+0x16>
 8005ca4:	2aff      	cmp	r2, #255	; 0xff
 8005ca6:	bf85      	ittet	hi
 8005ca8:	238a      	movhi	r3, #138	; 0x8a
 8005caa:	6003      	strhi	r3, [r0, #0]
 8005cac:	700a      	strbls	r2, [r1, #0]
 8005cae:	f04f 30ff 	movhi.w	r0, #4294967295
 8005cb2:	bf98      	it	ls
 8005cb4:	2001      	movls	r0, #1
 8005cb6:	4770      	bx	lr
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4770      	bx	lr

08005cbc <fiprintf>:
 8005cbc:	b40e      	push	{r1, r2, r3}
 8005cbe:	b503      	push	{r0, r1, lr}
 8005cc0:	4601      	mov	r1, r0
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	4805      	ldr	r0, [pc, #20]	; (8005cdc <fiprintf+0x20>)
 8005cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	f000 f83f 	bl	8005d50 <_vfiprintf_r>
 8005cd2:	b002      	add	sp, #8
 8005cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd8:	b003      	add	sp, #12
 8005cda:	4770      	bx	lr
 8005cdc:	2000005c 	.word	0x2000005c

08005ce0 <abort>:
 8005ce0:	b508      	push	{r3, lr}
 8005ce2:	2006      	movs	r0, #6
 8005ce4:	f000 fa0c 	bl	8006100 <raise>
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7fc fe37 	bl	800295c <_exit>

08005cee <_malloc_usable_size_r>:
 8005cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf2:	1f18      	subs	r0, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfbc      	itt	lt
 8005cf8:	580b      	ldrlt	r3, [r1, r0]
 8005cfa:	18c0      	addlt	r0, r0, r3
 8005cfc:	4770      	bx	lr

08005cfe <__sfputc_r>:
 8005cfe:	6893      	ldr	r3, [r2, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	b410      	push	{r4}
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	da08      	bge.n	8005d1c <__sfputc_r+0x1e>
 8005d0a:	6994      	ldr	r4, [r2, #24]
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	db01      	blt.n	8005d14 <__sfputc_r+0x16>
 8005d10:	290a      	cmp	r1, #10
 8005d12:	d103      	bne.n	8005d1c <__sfputc_r+0x1e>
 8005d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d18:	f000 b934 	b.w	8005f84 <__swbuf_r>
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	1c58      	adds	r0, r3, #1
 8005d20:	6010      	str	r0, [r2, #0]
 8005d22:	7019      	strb	r1, [r3, #0]
 8005d24:	4608      	mov	r0, r1
 8005d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <__sfputs_r>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	4614      	mov	r4, r2
 8005d34:	18d5      	adds	r5, r2, r3
 8005d36:	42ac      	cmp	r4, r5
 8005d38:	d101      	bne.n	8005d3e <__sfputs_r+0x12>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e007      	b.n	8005d4e <__sfputs_r+0x22>
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	463a      	mov	r2, r7
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffda 	bl	8005cfe <__sfputc_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d1f3      	bne.n	8005d36 <__sfputs_r+0xa>
 8005d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d50 <_vfiprintf_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	460d      	mov	r5, r1
 8005d56:	b09d      	sub	sp, #116	; 0x74
 8005d58:	4614      	mov	r4, r2
 8005d5a:	4698      	mov	r8, r3
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	b118      	cbz	r0, 8005d68 <_vfiprintf_r+0x18>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <_vfiprintf_r+0x18>
 8005d64:	f7fe f8d8 	bl	8003f18 <__sinit>
 8005d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d6a:	07d9      	lsls	r1, r3, #31
 8005d6c:	d405      	bmi.n	8005d7a <_vfiprintf_r+0x2a>
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	059a      	lsls	r2, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <_vfiprintf_r+0x2a>
 8005d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d76:	f7fe f9e6 	bl	8004146 <__retarget_lock_acquire_recursive>
 8005d7a:	89ab      	ldrh	r3, [r5, #12]
 8005d7c:	071b      	lsls	r3, r3, #28
 8005d7e:	d501      	bpl.n	8005d84 <_vfiprintf_r+0x34>
 8005d80:	692b      	ldr	r3, [r5, #16]
 8005d82:	b99b      	cbnz	r3, 8005dac <_vfiprintf_r+0x5c>
 8005d84:	4629      	mov	r1, r5
 8005d86:	4630      	mov	r0, r6
 8005d88:	f000 f93a 	bl	8006000 <__swsetup_r>
 8005d8c:	b170      	cbz	r0, 8005dac <_vfiprintf_r+0x5c>
 8005d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d90:	07dc      	lsls	r4, r3, #31
 8005d92:	d504      	bpl.n	8005d9e <_vfiprintf_r+0x4e>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	b01d      	add	sp, #116	; 0x74
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	0598      	lsls	r0, r3, #22
 8005da2:	d4f7      	bmi.n	8005d94 <_vfiprintf_r+0x44>
 8005da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da6:	f7fe f9cf 	bl	8004148 <__retarget_lock_release_recursive>
 8005daa:	e7f3      	b.n	8005d94 <_vfiprintf_r+0x44>
 8005dac:	2300      	movs	r3, #0
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	2320      	movs	r3, #32
 8005db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dba:	2330      	movs	r3, #48	; 0x30
 8005dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005f70 <_vfiprintf_r+0x220>
 8005dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc4:	f04f 0901 	mov.w	r9, #1
 8005dc8:	4623      	mov	r3, r4
 8005dca:	469a      	mov	sl, r3
 8005dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd0:	b10a      	cbz	r2, 8005dd6 <_vfiprintf_r+0x86>
 8005dd2:	2a25      	cmp	r2, #37	; 0x25
 8005dd4:	d1f9      	bne.n	8005dca <_vfiprintf_r+0x7a>
 8005dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dda:	d00b      	beq.n	8005df4 <_vfiprintf_r+0xa4>
 8005ddc:	465b      	mov	r3, fp
 8005dde:	4622      	mov	r2, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ffa2 	bl	8005d2c <__sfputs_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	f000 80a9 	beq.w	8005f40 <_vfiprintf_r+0x1f0>
 8005dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005df0:	445a      	add	r2, fp
 8005df2:	9209      	str	r2, [sp, #36]	; 0x24
 8005df4:	f89a 3000 	ldrb.w	r3, [sl]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a1 	beq.w	8005f40 <_vfiprintf_r+0x1f0>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295
 8005e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e08:	f10a 0a01 	add.w	sl, sl, #1
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	9307      	str	r3, [sp, #28]
 8005e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e14:	931a      	str	r3, [sp, #104]	; 0x68
 8005e16:	4654      	mov	r4, sl
 8005e18:	2205      	movs	r2, #5
 8005e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1e:	4854      	ldr	r0, [pc, #336]	; (8005f70 <_vfiprintf_r+0x220>)
 8005e20:	f7fa f9d6 	bl	80001d0 <memchr>
 8005e24:	9a04      	ldr	r2, [sp, #16]
 8005e26:	b9d8      	cbnz	r0, 8005e60 <_vfiprintf_r+0x110>
 8005e28:	06d1      	lsls	r1, r2, #27
 8005e2a:	bf44      	itt	mi
 8005e2c:	2320      	movmi	r3, #32
 8005e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e32:	0713      	lsls	r3, r2, #28
 8005e34:	bf44      	itt	mi
 8005e36:	232b      	movmi	r3, #43	; 0x2b
 8005e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e40:	2b2a      	cmp	r3, #42	; 0x2a
 8005e42:	d015      	beq.n	8005e70 <_vfiprintf_r+0x120>
 8005e44:	9a07      	ldr	r2, [sp, #28]
 8005e46:	4654      	mov	r4, sl
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f04f 0c0a 	mov.w	ip, #10
 8005e4e:	4621      	mov	r1, r4
 8005e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e54:	3b30      	subs	r3, #48	; 0x30
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	d94d      	bls.n	8005ef6 <_vfiprintf_r+0x1a6>
 8005e5a:	b1b0      	cbz	r0, 8005e8a <_vfiprintf_r+0x13a>
 8005e5c:	9207      	str	r2, [sp, #28]
 8005e5e:	e014      	b.n	8005e8a <_vfiprintf_r+0x13a>
 8005e60:	eba0 0308 	sub.w	r3, r0, r8
 8005e64:	fa09 f303 	lsl.w	r3, r9, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	9304      	str	r3, [sp, #16]
 8005e6c:	46a2      	mov	sl, r4
 8005e6e:	e7d2      	b.n	8005e16 <_vfiprintf_r+0xc6>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	1d19      	adds	r1, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9103      	str	r1, [sp, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfbb      	ittet	lt
 8005e7c:	425b      	neglt	r3, r3
 8005e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e82:	9307      	strge	r3, [sp, #28]
 8005e84:	9307      	strlt	r3, [sp, #28]
 8005e86:	bfb8      	it	lt
 8005e88:	9204      	strlt	r2, [sp, #16]
 8005e8a:	7823      	ldrb	r3, [r4, #0]
 8005e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e8e:	d10c      	bne.n	8005eaa <_vfiprintf_r+0x15a>
 8005e90:	7863      	ldrb	r3, [r4, #1]
 8005e92:	2b2a      	cmp	r3, #42	; 0x2a
 8005e94:	d134      	bne.n	8005f00 <_vfiprintf_r+0x1b0>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	1d1a      	adds	r2, r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	9203      	str	r2, [sp, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ea6:	3402      	adds	r4, #2
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f80 <_vfiprintf_r+0x230>
 8005eae:	7821      	ldrb	r1, [r4, #0]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	f7fa f98c 	bl	80001d0 <memchr>
 8005eb8:	b138      	cbz	r0, 8005eca <_vfiprintf_r+0x17a>
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	eba0 000a 	sub.w	r0, r0, sl
 8005ec0:	2240      	movs	r2, #64	; 0x40
 8005ec2:	4082      	lsls	r2, r0
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	3401      	adds	r4, #1
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ece:	4829      	ldr	r0, [pc, #164]	; (8005f74 <_vfiprintf_r+0x224>)
 8005ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed4:	2206      	movs	r2, #6
 8005ed6:	f7fa f97b 	bl	80001d0 <memchr>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d03f      	beq.n	8005f5e <_vfiprintf_r+0x20e>
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <_vfiprintf_r+0x228>)
 8005ee0:	bb1b      	cbnz	r3, 8005f2a <_vfiprintf_r+0x1da>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	3308      	adds	r3, #8
 8005eec:	9303      	str	r3, [sp, #12]
 8005eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef0:	443b      	add	r3, r7
 8005ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef4:	e768      	b.n	8005dc8 <_vfiprintf_r+0x78>
 8005ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efa:	460c      	mov	r4, r1
 8005efc:	2001      	movs	r0, #1
 8005efe:	e7a6      	b.n	8005e4e <_vfiprintf_r+0xfe>
 8005f00:	2300      	movs	r3, #0
 8005f02:	3401      	adds	r4, #1
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	4619      	mov	r1, r3
 8005f08:	f04f 0c0a 	mov.w	ip, #10
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f12:	3a30      	subs	r2, #48	; 0x30
 8005f14:	2a09      	cmp	r2, #9
 8005f16:	d903      	bls.n	8005f20 <_vfiprintf_r+0x1d0>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0c6      	beq.n	8005eaa <_vfiprintf_r+0x15a>
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	e7c4      	b.n	8005eaa <_vfiprintf_r+0x15a>
 8005f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f24:	4604      	mov	r4, r0
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7f0      	b.n	8005f0c <_vfiprintf_r+0x1bc>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <_vfiprintf_r+0x22c>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7fd fb9d 	bl	8003674 <_printf_float>
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	1c78      	adds	r0, r7, #1
 8005f3e:	d1d6      	bne.n	8005eee <_vfiprintf_r+0x19e>
 8005f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f42:	07d9      	lsls	r1, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_vfiprintf_r+0x202>
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	059a      	lsls	r2, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_vfiprintf_r+0x202>
 8005f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f4e:	f7fe f8fb 	bl	8004148 <__retarget_lock_release_recursive>
 8005f52:	89ab      	ldrh	r3, [r5, #12]
 8005f54:	065b      	lsls	r3, r3, #25
 8005f56:	f53f af1d 	bmi.w	8005d94 <_vfiprintf_r+0x44>
 8005f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f5c:	e71c      	b.n	8005d98 <_vfiprintf_r+0x48>
 8005f5e:	ab03      	add	r3, sp, #12
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	462a      	mov	r2, r5
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <_vfiprintf_r+0x22c>)
 8005f66:	a904      	add	r1, sp, #16
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7fd fe27 	bl	8003bbc <_printf_i>
 8005f6e:	e7e4      	b.n	8005f3a <_vfiprintf_r+0x1ea>
 8005f70:	08006ca4 	.word	0x08006ca4
 8005f74:	08006cae 	.word	0x08006cae
 8005f78:	08003675 	.word	0x08003675
 8005f7c:	08005d2d 	.word	0x08005d2d
 8005f80:	08006caa 	.word	0x08006caa

08005f84 <__swbuf_r>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	460e      	mov	r6, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	b118      	cbz	r0, 8005f96 <__swbuf_r+0x12>
 8005f8e:	6a03      	ldr	r3, [r0, #32]
 8005f90:	b90b      	cbnz	r3, 8005f96 <__swbuf_r+0x12>
 8005f92:	f7fd ffc1 	bl	8003f18 <__sinit>
 8005f96:	69a3      	ldr	r3, [r4, #24]
 8005f98:	60a3      	str	r3, [r4, #8]
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	071a      	lsls	r2, r3, #28
 8005f9e:	d525      	bpl.n	8005fec <__swbuf_r+0x68>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	b31b      	cbz	r3, 8005fec <__swbuf_r+0x68>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	6922      	ldr	r2, [r4, #16]
 8005fa8:	1a98      	subs	r0, r3, r2
 8005faa:	6963      	ldr	r3, [r4, #20]
 8005fac:	b2f6      	uxtb	r6, r6
 8005fae:	4283      	cmp	r3, r0
 8005fb0:	4637      	mov	r7, r6
 8005fb2:	dc04      	bgt.n	8005fbe <__swbuf_r+0x3a>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7ff fd9e 	bl	8005af8 <_fflush_r>
 8005fbc:	b9e0      	cbnz	r0, 8005ff8 <__swbuf_r+0x74>
 8005fbe:	68a3      	ldr	r3, [r4, #8]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	60a3      	str	r3, [r4, #8]
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	6022      	str	r2, [r4, #0]
 8005fca:	701e      	strb	r6, [r3, #0]
 8005fcc:	6962      	ldr	r2, [r4, #20]
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d004      	beq.n	8005fde <__swbuf_r+0x5a>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	07db      	lsls	r3, r3, #31
 8005fd8:	d506      	bpl.n	8005fe8 <__swbuf_r+0x64>
 8005fda:	2e0a      	cmp	r6, #10
 8005fdc:	d104      	bne.n	8005fe8 <__swbuf_r+0x64>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f7ff fd89 	bl	8005af8 <_fflush_r>
 8005fe6:	b938      	cbnz	r0, 8005ff8 <__swbuf_r+0x74>
 8005fe8:	4638      	mov	r0, r7
 8005fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f806 	bl	8006000 <__swsetup_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0d5      	beq.n	8005fa4 <__swbuf_r+0x20>
 8005ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8005ffc:	e7f4      	b.n	8005fe8 <__swbuf_r+0x64>
	...

08006000 <__swsetup_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4b2a      	ldr	r3, [pc, #168]	; (80060ac <__swsetup_r+0xac>)
 8006004:	4605      	mov	r5, r0
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	460c      	mov	r4, r1
 800600a:	b118      	cbz	r0, 8006014 <__swsetup_r+0x14>
 800600c:	6a03      	ldr	r3, [r0, #32]
 800600e:	b90b      	cbnz	r3, 8006014 <__swsetup_r+0x14>
 8006010:	f7fd ff82 	bl	8003f18 <__sinit>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601a:	0718      	lsls	r0, r3, #28
 800601c:	d422      	bmi.n	8006064 <__swsetup_r+0x64>
 800601e:	06d9      	lsls	r1, r3, #27
 8006020:	d407      	bmi.n	8006032 <__swsetup_r+0x32>
 8006022:	2309      	movs	r3, #9
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	e034      	b.n	800609c <__swsetup_r+0x9c>
 8006032:	0758      	lsls	r0, r3, #29
 8006034:	d512      	bpl.n	800605c <__swsetup_r+0x5c>
 8006036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006038:	b141      	cbz	r1, 800604c <__swsetup_r+0x4c>
 800603a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800603e:	4299      	cmp	r1, r3
 8006040:	d002      	beq.n	8006048 <__swsetup_r+0x48>
 8006042:	4628      	mov	r0, r5
 8006044:	f7fe fefe 	bl	8004e44 <_free_r>
 8006048:	2300      	movs	r3, #0
 800604a:	6363      	str	r3, [r4, #52]	; 0x34
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	2300      	movs	r3, #0
 8006056:	6063      	str	r3, [r4, #4]
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f043 0308 	orr.w	r3, r3, #8
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b94b      	cbnz	r3, 800607c <__swsetup_r+0x7c>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800606e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006072:	d003      	beq.n	800607c <__swsetup_r+0x7c>
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f884 	bl	8006184 <__smakebuf_r>
 800607c:	89a0      	ldrh	r0, [r4, #12]
 800607e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006082:	f010 0301 	ands.w	r3, r0, #1
 8006086:	d00a      	beq.n	800609e <__swsetup_r+0x9e>
 8006088:	2300      	movs	r3, #0
 800608a:	60a3      	str	r3, [r4, #8]
 800608c:	6963      	ldr	r3, [r4, #20]
 800608e:	425b      	negs	r3, r3
 8006090:	61a3      	str	r3, [r4, #24]
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	b943      	cbnz	r3, 80060a8 <__swsetup_r+0xa8>
 8006096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800609a:	d1c4      	bne.n	8006026 <__swsetup_r+0x26>
 800609c:	bd38      	pop	{r3, r4, r5, pc}
 800609e:	0781      	lsls	r1, r0, #30
 80060a0:	bf58      	it	pl
 80060a2:	6963      	ldrpl	r3, [r4, #20]
 80060a4:	60a3      	str	r3, [r4, #8]
 80060a6:	e7f4      	b.n	8006092 <__swsetup_r+0x92>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e7f7      	b.n	800609c <__swsetup_r+0x9c>
 80060ac:	2000005c 	.word	0x2000005c

080060b0 <_raise_r>:
 80060b0:	291f      	cmp	r1, #31
 80060b2:	b538      	push	{r3, r4, r5, lr}
 80060b4:	4604      	mov	r4, r0
 80060b6:	460d      	mov	r5, r1
 80060b8:	d904      	bls.n	80060c4 <_raise_r+0x14>
 80060ba:	2316      	movs	r3, #22
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	f04f 30ff 	mov.w	r0, #4294967295
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80060c6:	b112      	cbz	r2, 80060ce <_raise_r+0x1e>
 80060c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060cc:	b94b      	cbnz	r3, 80060e2 <_raise_r+0x32>
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 f830 	bl	8006134 <_getpid_r>
 80060d4:	462a      	mov	r2, r5
 80060d6:	4601      	mov	r1, r0
 80060d8:	4620      	mov	r0, r4
 80060da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060de:	f000 b817 	b.w	8006110 <_kill_r>
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d00a      	beq.n	80060fc <_raise_r+0x4c>
 80060e6:	1c59      	adds	r1, r3, #1
 80060e8:	d103      	bne.n	80060f2 <_raise_r+0x42>
 80060ea:	2316      	movs	r3, #22
 80060ec:	6003      	str	r3, [r0, #0]
 80060ee:	2001      	movs	r0, #1
 80060f0:	e7e7      	b.n	80060c2 <_raise_r+0x12>
 80060f2:	2400      	movs	r4, #0
 80060f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060f8:	4628      	mov	r0, r5
 80060fa:	4798      	blx	r3
 80060fc:	2000      	movs	r0, #0
 80060fe:	e7e0      	b.n	80060c2 <_raise_r+0x12>

08006100 <raise>:
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <raise+0xc>)
 8006102:	4601      	mov	r1, r0
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	f7ff bfd3 	b.w	80060b0 <_raise_r>
 800610a:	bf00      	nop
 800610c:	2000005c 	.word	0x2000005c

08006110 <_kill_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	; (8006130 <_kill_r+0x20>)
 8006114:	2300      	movs	r3, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	f7fc fc0d 	bl	800293c <_kill>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d102      	bne.n	800612c <_kill_r+0x1c>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	b103      	cbz	r3, 800612c <_kill_r+0x1c>
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	bf00      	nop
 8006130:	200005bc 	.word	0x200005bc

08006134 <_getpid_r>:
 8006134:	f7fc bbfa 	b.w	800292c <_getpid>

08006138 <__swhatbuf_r>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	460c      	mov	r4, r1
 800613c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006140:	2900      	cmp	r1, #0
 8006142:	b096      	sub	sp, #88	; 0x58
 8006144:	4615      	mov	r5, r2
 8006146:	461e      	mov	r6, r3
 8006148:	da0d      	bge.n	8006166 <__swhatbuf_r+0x2e>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	bf0c      	ite	eq
 8006156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800615a:	2340      	movne	r3, #64	; 0x40
 800615c:	2000      	movs	r0, #0
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	b016      	add	sp, #88	; 0x58
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	466a      	mov	r2, sp
 8006168:	f000 f848 	bl	80061fc <_fstat_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	dbec      	blt.n	800614a <__swhatbuf_r+0x12>
 8006170:	9901      	ldr	r1, [sp, #4]
 8006172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800617a:	4259      	negs	r1, r3
 800617c:	4159      	adcs	r1, r3
 800617e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006182:	e7eb      	b.n	800615c <__swhatbuf_r+0x24>

08006184 <__smakebuf_r>:
 8006184:	898b      	ldrh	r3, [r1, #12]
 8006186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006188:	079d      	lsls	r5, r3, #30
 800618a:	4606      	mov	r6, r0
 800618c:	460c      	mov	r4, r1
 800618e:	d507      	bpl.n	80061a0 <__smakebuf_r+0x1c>
 8006190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	6123      	str	r3, [r4, #16]
 8006198:	2301      	movs	r3, #1
 800619a:	6163      	str	r3, [r4, #20]
 800619c:	b002      	add	sp, #8
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	ab01      	add	r3, sp, #4
 80061a2:	466a      	mov	r2, sp
 80061a4:	f7ff ffc8 	bl	8006138 <__swhatbuf_r>
 80061a8:	9900      	ldr	r1, [sp, #0]
 80061aa:	4605      	mov	r5, r0
 80061ac:	4630      	mov	r0, r6
 80061ae:	f7fe febd 	bl	8004f2c <_malloc_r>
 80061b2:	b948      	cbnz	r0, 80061c8 <__smakebuf_r+0x44>
 80061b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b8:	059a      	lsls	r2, r3, #22
 80061ba:	d4ef      	bmi.n	800619c <__smakebuf_r+0x18>
 80061bc:	f023 0303 	bic.w	r3, r3, #3
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	81a3      	strh	r3, [r4, #12]
 80061c6:	e7e3      	b.n	8006190 <__smakebuf_r+0xc>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	6020      	str	r0, [r4, #0]
 80061cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	6163      	str	r3, [r4, #20]
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	6120      	str	r0, [r4, #16]
 80061da:	b15b      	cbz	r3, 80061f4 <__smakebuf_r+0x70>
 80061dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f81d 	bl	8006220 <_isatty_r>
 80061e6:	b128      	cbz	r0, 80061f4 <__smakebuf_r+0x70>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	431d      	orrs	r5, r3
 80061f8:	81a5      	strh	r5, [r4, #12]
 80061fa:	e7cf      	b.n	800619c <__smakebuf_r+0x18>

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	; (800621c <_fstat_r+0x20>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fc fbf6 	bl	80029fa <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	200005bc 	.word	0x200005bc

08006220 <_isatty_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_isatty_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fc fbf5 	bl	8002a1a <_isatty>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_isatty_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_isatty_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	200005bc 	.word	0x200005bc

08006240 <powf>:
 8006240:	b508      	push	{r3, lr}
 8006242:	ed2d 8b04 	vpush	{d8-d9}
 8006246:	eeb0 8a60 	vmov.f32	s16, s1
 800624a:	eeb0 9a40 	vmov.f32	s18, s0
 800624e:	f000 f85b 	bl	8006308 <__ieee754_powf>
 8006252:	eeb4 8a48 	vcmp.f32	s16, s16
 8006256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625a:	eef0 8a40 	vmov.f32	s17, s0
 800625e:	d63e      	bvs.n	80062de <powf+0x9e>
 8006260:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006268:	d112      	bne.n	8006290 <powf+0x50>
 800626a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006272:	d039      	beq.n	80062e8 <powf+0xa8>
 8006274:	eeb0 0a48 	vmov.f32	s0, s16
 8006278:	f000 f839 	bl	80062ee <finitef>
 800627c:	b378      	cbz	r0, 80062de <powf+0x9e>
 800627e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006286:	d52a      	bpl.n	80062de <powf+0x9e>
 8006288:	f7fd ff32 	bl	80040f0 <__errno>
 800628c:	2322      	movs	r3, #34	; 0x22
 800628e:	e014      	b.n	80062ba <powf+0x7a>
 8006290:	f000 f82d 	bl	80062ee <finitef>
 8006294:	b998      	cbnz	r0, 80062be <powf+0x7e>
 8006296:	eeb0 0a49 	vmov.f32	s0, s18
 800629a:	f000 f828 	bl	80062ee <finitef>
 800629e:	b170      	cbz	r0, 80062be <powf+0x7e>
 80062a0:	eeb0 0a48 	vmov.f32	s0, s16
 80062a4:	f000 f823 	bl	80062ee <finitef>
 80062a8:	b148      	cbz	r0, 80062be <powf+0x7e>
 80062aa:	eef4 8a68 	vcmp.f32	s17, s17
 80062ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b2:	d7e9      	bvc.n	8006288 <powf+0x48>
 80062b4:	f7fd ff1c 	bl	80040f0 <__errno>
 80062b8:	2321      	movs	r3, #33	; 0x21
 80062ba:	6003      	str	r3, [r0, #0]
 80062bc:	e00f      	b.n	80062de <powf+0x9e>
 80062be:	eef5 8a40 	vcmp.f32	s17, #0.0
 80062c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c6:	d10a      	bne.n	80062de <powf+0x9e>
 80062c8:	eeb0 0a49 	vmov.f32	s0, s18
 80062cc:	f000 f80f 	bl	80062ee <finitef>
 80062d0:	b128      	cbz	r0, 80062de <powf+0x9e>
 80062d2:	eeb0 0a48 	vmov.f32	s0, s16
 80062d6:	f000 f80a 	bl	80062ee <finitef>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1d4      	bne.n	8006288 <powf+0x48>
 80062de:	eeb0 0a68 	vmov.f32	s0, s17
 80062e2:	ecbd 8b04 	vpop	{d8-d9}
 80062e6:	bd08      	pop	{r3, pc}
 80062e8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80062ec:	e7f7      	b.n	80062de <powf+0x9e>

080062ee <finitef>:
 80062ee:	b082      	sub	sp, #8
 80062f0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80062f4:	9801      	ldr	r0, [sp, #4]
 80062f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80062fa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80062fe:	bfac      	ite	ge
 8006300:	2000      	movge	r0, #0
 8006302:	2001      	movlt	r0, #1
 8006304:	b002      	add	sp, #8
 8006306:	4770      	bx	lr

08006308 <__ieee754_powf>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	ee10 4a90 	vmov	r4, s1
 8006310:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8006314:	ed2d 8b02 	vpush	{d8}
 8006318:	ee10 7a10 	vmov	r7, s0
 800631c:	eeb0 8a40 	vmov.f32	s16, s0
 8006320:	eef0 8a60 	vmov.f32	s17, s1
 8006324:	d10c      	bne.n	8006340 <__ieee754_powf+0x38>
 8006326:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800632a:	007f      	lsls	r7, r7, #1
 800632c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8006330:	f240 8292 	bls.w	8006858 <__ieee754_powf+0x550>
 8006334:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006338:	ecbd 8b02 	vpop	{d8}
 800633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006340:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8006344:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006348:	dcf4      	bgt.n	8006334 <__ieee754_powf+0x2c>
 800634a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800634e:	dd08      	ble.n	8006362 <__ieee754_powf+0x5a>
 8006350:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006354:	d1ee      	bne.n	8006334 <__ieee754_powf+0x2c>
 8006356:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800635a:	0064      	lsls	r4, r4, #1
 800635c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006360:	e7e6      	b.n	8006330 <__ieee754_powf+0x28>
 8006362:	2f00      	cmp	r7, #0
 8006364:	da20      	bge.n	80063a8 <__ieee754_powf+0xa0>
 8006366:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800636a:	da2d      	bge.n	80063c8 <__ieee754_powf+0xc0>
 800636c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006370:	f2c0 827b 	blt.w	800686a <__ieee754_powf+0x562>
 8006374:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006378:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800637c:	fa48 f603 	asr.w	r6, r8, r3
 8006380:	fa06 f303 	lsl.w	r3, r6, r3
 8006384:	4543      	cmp	r3, r8
 8006386:	f040 8270 	bne.w	800686a <__ieee754_powf+0x562>
 800638a:	f006 0601 	and.w	r6, r6, #1
 800638e:	f1c6 0602 	rsb	r6, r6, #2
 8006392:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006396:	d11f      	bne.n	80063d8 <__ieee754_powf+0xd0>
 8006398:	2c00      	cmp	r4, #0
 800639a:	f280 8263 	bge.w	8006864 <__ieee754_powf+0x55c>
 800639e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80063a2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80063a6:	e7c7      	b.n	8006338 <__ieee754_powf+0x30>
 80063a8:	2600      	movs	r6, #0
 80063aa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80063ae:	d1f0      	bne.n	8006392 <__ieee754_powf+0x8a>
 80063b0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80063b4:	f000 8250 	beq.w	8006858 <__ieee754_powf+0x550>
 80063b8:	dd08      	ble.n	80063cc <__ieee754_powf+0xc4>
 80063ba:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80066c0 <__ieee754_powf+0x3b8>
 80063be:	2c00      	cmp	r4, #0
 80063c0:	bfa8      	it	ge
 80063c2:	eeb0 0a68 	vmovge.f32	s0, s17
 80063c6:	e7b7      	b.n	8006338 <__ieee754_powf+0x30>
 80063c8:	2602      	movs	r6, #2
 80063ca:	e7ee      	b.n	80063aa <__ieee754_powf+0xa2>
 80063cc:	2c00      	cmp	r4, #0
 80063ce:	f280 8246 	bge.w	800685e <__ieee754_powf+0x556>
 80063d2:	eeb1 0a68 	vneg.f32	s0, s17
 80063d6:	e7af      	b.n	8006338 <__ieee754_powf+0x30>
 80063d8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80063dc:	d102      	bne.n	80063e4 <__ieee754_powf+0xdc>
 80063de:	ee28 0a08 	vmul.f32	s0, s16, s16
 80063e2:	e7a9      	b.n	8006338 <__ieee754_powf+0x30>
 80063e4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80063e8:	eeb0 0a48 	vmov.f32	s0, s16
 80063ec:	d107      	bne.n	80063fe <__ieee754_powf+0xf6>
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	db05      	blt.n	80063fe <__ieee754_powf+0xf6>
 80063f2:	ecbd 8b02 	vpop	{d8}
 80063f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	f000 badf 	b.w	80069bc <__ieee754_sqrtf>
 80063fe:	f000 fa4d 	bl	800689c <fabsf>
 8006402:	b125      	cbz	r5, 800640e <__ieee754_powf+0x106>
 8006404:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8006408:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800640c:	d115      	bne.n	800643a <__ieee754_powf+0x132>
 800640e:	2c00      	cmp	r4, #0
 8006410:	bfbc      	itt	lt
 8006412:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006416:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800641a:	2f00      	cmp	r7, #0
 800641c:	da8c      	bge.n	8006338 <__ieee754_powf+0x30>
 800641e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8006422:	4335      	orrs	r5, r6
 8006424:	d104      	bne.n	8006430 <__ieee754_powf+0x128>
 8006426:	ee70 7a40 	vsub.f32	s15, s0, s0
 800642a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800642e:	e783      	b.n	8006338 <__ieee754_powf+0x30>
 8006430:	2e01      	cmp	r6, #1
 8006432:	d181      	bne.n	8006338 <__ieee754_powf+0x30>
 8006434:	eeb1 0a40 	vneg.f32	s0, s0
 8006438:	e77e      	b.n	8006338 <__ieee754_powf+0x30>
 800643a:	0ff8      	lsrs	r0, r7, #31
 800643c:	3801      	subs	r0, #1
 800643e:	ea56 0300 	orrs.w	r3, r6, r0
 8006442:	d104      	bne.n	800644e <__ieee754_powf+0x146>
 8006444:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006448:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800644c:	e774      	b.n	8006338 <__ieee754_powf+0x30>
 800644e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8006452:	dd73      	ble.n	800653c <__ieee754_powf+0x234>
 8006454:	4b9b      	ldr	r3, [pc, #620]	; (80066c4 <__ieee754_powf+0x3bc>)
 8006456:	429d      	cmp	r5, r3
 8006458:	dc08      	bgt.n	800646c <__ieee754_powf+0x164>
 800645a:	2c00      	cmp	r4, #0
 800645c:	da0b      	bge.n	8006476 <__ieee754_powf+0x16e>
 800645e:	2000      	movs	r0, #0
 8006460:	ecbd 8b02 	vpop	{d8}
 8006464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	f000 baa2 	b.w	80069b0 <__math_oflowf>
 800646c:	4b96      	ldr	r3, [pc, #600]	; (80066c8 <__ieee754_powf+0x3c0>)
 800646e:	429d      	cmp	r5, r3
 8006470:	dd08      	ble.n	8006484 <__ieee754_powf+0x17c>
 8006472:	2c00      	cmp	r4, #0
 8006474:	dcf3      	bgt.n	800645e <__ieee754_powf+0x156>
 8006476:	2000      	movs	r0, #0
 8006478:	ecbd 8b02 	vpop	{d8}
 800647c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	f000 ba90 	b.w	80069a4 <__math_uflowf>
 8006484:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006488:	ee30 0a67 	vsub.f32	s0, s0, s15
 800648c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80066cc <__ieee754_powf+0x3c4>
 8006490:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006494:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006498:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800649c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80064a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80064a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a8:	eddf 7a89 	vldr	s15, [pc, #548]	; 80066d0 <__ieee754_powf+0x3c8>
 80064ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80064b0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80066d4 <__ieee754_powf+0x3cc>
 80064b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80064b8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80066d8 <__ieee754_powf+0x3d0>
 80064bc:	eef0 6a67 	vmov.f32	s13, s15
 80064c0:	eee0 6a07 	vfma.f32	s13, s0, s14
 80064c4:	ee16 3a90 	vmov	r3, s13
 80064c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80064cc:	f023 030f 	bic.w	r3, r3, #15
 80064d0:	ee06 3a90 	vmov	s13, r3
 80064d4:	eee0 6a47 	vfms.f32	s13, s0, s14
 80064d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064dc:	3e01      	subs	r6, #1
 80064de:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80064e2:	4306      	orrs	r6, r0
 80064e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80064e8:	f024 040f 	bic.w	r4, r4, #15
 80064ec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80064f0:	bf08      	it	eq
 80064f2:	eeb0 8a47 	vmoveq.f32	s16, s14
 80064f6:	ee07 4a10 	vmov	s14, r4
 80064fa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80064fe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eee7 0a27 	vfma.f32	s1, s14, s15
 800650a:	ee07 4a10 	vmov	s14, r4
 800650e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006512:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006516:	ee17 1a10 	vmov	r1, s14
 800651a:	2900      	cmp	r1, #0
 800651c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006520:	f340 817c 	ble.w	800681c <__ieee754_powf+0x514>
 8006524:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006528:	f340 80f8 	ble.w	800671c <__ieee754_powf+0x414>
 800652c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006534:	bf4c      	ite	mi
 8006536:	2001      	movmi	r0, #1
 8006538:	2000      	movpl	r0, #0
 800653a:	e791      	b.n	8006460 <__ieee754_powf+0x158>
 800653c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8006540:	bf01      	itttt	eq
 8006542:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80066dc <__ieee754_powf+0x3d4>
 8006546:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800654a:	f06f 0317 	mvneq.w	r3, #23
 800654e:	ee17 5a90 	vmoveq	r5, s15
 8006552:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8006556:	bf18      	it	ne
 8006558:	2300      	movne	r3, #0
 800655a:	3a7f      	subs	r2, #127	; 0x7f
 800655c:	441a      	add	r2, r3
 800655e:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <__ieee754_powf+0x3d8>)
 8006560:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8006564:	429d      	cmp	r5, r3
 8006566:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800656a:	dd06      	ble.n	800657a <__ieee754_powf+0x272>
 800656c:	4b5d      	ldr	r3, [pc, #372]	; (80066e4 <__ieee754_powf+0x3dc>)
 800656e:	429d      	cmp	r5, r3
 8006570:	f340 80a4 	ble.w	80066bc <__ieee754_powf+0x3b4>
 8006574:	3201      	adds	r2, #1
 8006576:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800657a:	2500      	movs	r5, #0
 800657c:	4b5a      	ldr	r3, [pc, #360]	; (80066e8 <__ieee754_powf+0x3e0>)
 800657e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006582:	ee07 1a10 	vmov	s14, r1
 8006586:	edd3 5a00 	vldr	s11, [r3]
 800658a:	4b58      	ldr	r3, [pc, #352]	; (80066ec <__ieee754_powf+0x3e4>)
 800658c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006594:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8006598:	1049      	asrs	r1, r1, #1
 800659a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800659e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80065a2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80065a6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80065aa:	ee07 1a90 	vmov	s15, r1
 80065ae:	ee26 5a24 	vmul.f32	s10, s12, s9
 80065b2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80065b6:	ee15 7a10 	vmov	r7, s10
 80065ba:	401f      	ands	r7, r3
 80065bc:	ee06 7a90 	vmov	s13, r7
 80065c0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80065c4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80065c8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80065cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80065d0:	eddf 5a47 	vldr	s11, [pc, #284]	; 80066f0 <__ieee754_powf+0x3e8>
 80065d4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80066f4 <__ieee754_powf+0x3ec>
 80065d8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80065dc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80066f8 <__ieee754_powf+0x3f0>
 80065e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80065e4:	eddf 5a39 	vldr	s11, [pc, #228]	; 80066cc <__ieee754_powf+0x3c4>
 80065e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80065ec:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80066fc <__ieee754_powf+0x3f4>
 80065f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80065f4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006700 <__ieee754_powf+0x3f8>
 80065f8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80065fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006600:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006604:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006608:	ee27 7a06 	vmul.f32	s14, s14, s12
 800660c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8006610:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006614:	eef0 5a67 	vmov.f32	s11, s15
 8006618:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800661c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006620:	ee15 1a90 	vmov	r1, s11
 8006624:	4019      	ands	r1, r3
 8006626:	ee05 1a90 	vmov	s11, r1
 800662a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800662e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8006632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006636:	ee67 7a85 	vmul.f32	s15, s15, s10
 800663a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800663e:	eeb0 6a67 	vmov.f32	s12, s15
 8006642:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006646:	ee16 1a10 	vmov	r1, s12
 800664a:	4019      	ands	r1, r3
 800664c:	ee07 1a10 	vmov	s14, r1
 8006650:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006654:	ee06 1a10 	vmov	s12, r1
 8006658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800665c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006704 <__ieee754_powf+0x3fc>
 8006660:	4929      	ldr	r1, [pc, #164]	; (8006708 <__ieee754_powf+0x400>)
 8006662:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800670c <__ieee754_powf+0x404>
 8006666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800666a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006710 <__ieee754_powf+0x408>
 800666e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006672:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006676:	ed91 7a00 	vldr	s14, [r1]
 800667a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800667e:	ee07 2a10 	vmov	s14, r2
 8006682:	eef0 6a67 	vmov.f32	s13, s15
 8006686:	4a23      	ldr	r2, [pc, #140]	; (8006714 <__ieee754_powf+0x40c>)
 8006688:	eee6 6a25 	vfma.f32	s13, s12, s11
 800668c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006690:	ed92 5a00 	vldr	s10, [r2]
 8006694:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006698:	ee76 6a85 	vadd.f32	s13, s13, s10
 800669c:	ee76 6a87 	vadd.f32	s13, s13, s14
 80066a0:	ee16 2a90 	vmov	r2, s13
 80066a4:	4013      	ands	r3, r2
 80066a6:	ee06 3a90 	vmov	s13, r3
 80066aa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80066ae:	ee37 7a45 	vsub.f32	s14, s14, s10
 80066b2:	eea6 7a65 	vfms.f32	s14, s12, s11
 80066b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066ba:	e70f      	b.n	80064dc <__ieee754_powf+0x1d4>
 80066bc:	2501      	movs	r5, #1
 80066be:	e75d      	b.n	800657c <__ieee754_powf+0x274>
 80066c0:	00000000 	.word	0x00000000
 80066c4:	3f7ffff3 	.word	0x3f7ffff3
 80066c8:	3f800007 	.word	0x3f800007
 80066cc:	3eaaaaab 	.word	0x3eaaaaab
 80066d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80066d4:	36eca570 	.word	0x36eca570
 80066d8:	3fb8aa00 	.word	0x3fb8aa00
 80066dc:	4b800000 	.word	0x4b800000
 80066e0:	001cc471 	.word	0x001cc471
 80066e4:	005db3d6 	.word	0x005db3d6
 80066e8:	08006dfc 	.word	0x08006dfc
 80066ec:	fffff000 	.word	0xfffff000
 80066f0:	3e6c3255 	.word	0x3e6c3255
 80066f4:	3e53f142 	.word	0x3e53f142
 80066f8:	3e8ba305 	.word	0x3e8ba305
 80066fc:	3edb6db7 	.word	0x3edb6db7
 8006700:	3f19999a 	.word	0x3f19999a
 8006704:	3f76384f 	.word	0x3f76384f
 8006708:	08006e0c 	.word	0x08006e0c
 800670c:	3f763800 	.word	0x3f763800
 8006710:	369dc3a0 	.word	0x369dc3a0
 8006714:	08006e04 	.word	0x08006e04
 8006718:	3338aa3c 	.word	0x3338aa3c
 800671c:	f040 8093 	bne.w	8006846 <__ieee754_powf+0x53e>
 8006720:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006718 <__ieee754_powf+0x410>
 8006724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006728:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800672c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006734:	f73f aefa 	bgt.w	800652c <__ieee754_powf+0x224>
 8006738:	15db      	asrs	r3, r3, #23
 800673a:	3b7e      	subs	r3, #126	; 0x7e
 800673c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006740:	4118      	asrs	r0, r3
 8006742:	4408      	add	r0, r1
 8006744:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006748:	4a49      	ldr	r2, [pc, #292]	; (8006870 <__ieee754_powf+0x568>)
 800674a:	3b7f      	subs	r3, #127	; 0x7f
 800674c:	411a      	asrs	r2, r3
 800674e:	4002      	ands	r2, r0
 8006750:	ee07 2a10 	vmov	s14, r2
 8006754:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006758:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800675c:	f1c3 0317 	rsb	r3, r3, #23
 8006760:	4118      	asrs	r0, r3
 8006762:	2900      	cmp	r1, #0
 8006764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006768:	bfb8      	it	lt
 800676a:	4240      	neglt	r0, r0
 800676c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006770:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006874 <__ieee754_powf+0x56c>
 8006774:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006878 <__ieee754_powf+0x570>
 8006778:	ee17 3a10 	vmov	r3, s14
 800677c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006780:	f023 030f 	bic.w	r3, r3, #15
 8006784:	ee07 3a10 	vmov	s14, r3
 8006788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800678c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006790:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006794:	eddf 7a39 	vldr	s15, [pc, #228]	; 800687c <__ieee754_powf+0x574>
 8006798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80067a0:	eef0 6a67 	vmov.f32	s13, s15
 80067a4:	eee7 6a06 	vfma.f32	s13, s14, s12
 80067a8:	eef0 5a66 	vmov.f32	s11, s13
 80067ac:	eee7 5a46 	vfms.f32	s11, s14, s12
 80067b0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80067b4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80067b8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006880 <__ieee754_powf+0x578>
 80067bc:	eddf 5a31 	vldr	s11, [pc, #196]	; 8006884 <__ieee754_powf+0x57c>
 80067c0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80067c4:	eddf 5a30 	vldr	s11, [pc, #192]	; 8006888 <__ieee754_powf+0x580>
 80067c8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80067cc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800688c <__ieee754_powf+0x584>
 80067d0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80067d4:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006890 <__ieee754_powf+0x588>
 80067d8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80067dc:	eeb0 6a66 	vmov.f32	s12, s13
 80067e0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80067e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067e8:	ee66 5a86 	vmul.f32	s11, s13, s12
 80067ec:	ee36 6a47 	vsub.f32	s12, s12, s14
 80067f0:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80067f4:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80067f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006800:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006804:	ee10 3a10 	vmov	r3, s0
 8006808:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800680c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006810:	da1f      	bge.n	8006852 <__ieee754_powf+0x54a>
 8006812:	f000 f84b 	bl	80068ac <scalbnf>
 8006816:	ee20 0a08 	vmul.f32	s0, s0, s16
 800681a:	e58d      	b.n	8006338 <__ieee754_powf+0x30>
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <__ieee754_powf+0x58c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	dd07      	ble.n	8006832 <__ieee754_powf+0x52a>
 8006822:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682a:	bf4c      	ite	mi
 800682c:	2001      	movmi	r0, #1
 800682e:	2000      	movpl	r0, #0
 8006830:	e622      	b.n	8006478 <__ieee754_powf+0x170>
 8006832:	d108      	bne.n	8006846 <__ieee754_powf+0x53e>
 8006834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006838:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	f6ff af7a 	blt.w	8006738 <__ieee754_powf+0x430>
 8006844:	e7ed      	b.n	8006822 <__ieee754_powf+0x51a>
 8006846:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800684a:	f73f af75 	bgt.w	8006738 <__ieee754_powf+0x430>
 800684e:	2000      	movs	r0, #0
 8006850:	e78c      	b.n	800676c <__ieee754_powf+0x464>
 8006852:	ee00 3a10 	vmov	s0, r3
 8006856:	e7de      	b.n	8006816 <__ieee754_powf+0x50e>
 8006858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800685c:	e56c      	b.n	8006338 <__ieee754_powf+0x30>
 800685e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006898 <__ieee754_powf+0x590>
 8006862:	e569      	b.n	8006338 <__ieee754_powf+0x30>
 8006864:	eeb0 0a48 	vmov.f32	s0, s16
 8006868:	e566      	b.n	8006338 <__ieee754_powf+0x30>
 800686a:	2600      	movs	r6, #0
 800686c:	e591      	b.n	8006392 <__ieee754_powf+0x8a>
 800686e:	bf00      	nop
 8006870:	ff800000 	.word	0xff800000
 8006874:	3f317218 	.word	0x3f317218
 8006878:	3f317200 	.word	0x3f317200
 800687c:	35bfbe8c 	.word	0x35bfbe8c
 8006880:	b5ddea0e 	.word	0xb5ddea0e
 8006884:	3331bb4c 	.word	0x3331bb4c
 8006888:	388ab355 	.word	0x388ab355
 800688c:	bb360b61 	.word	0xbb360b61
 8006890:	3e2aaaab 	.word	0x3e2aaaab
 8006894:	43160000 	.word	0x43160000
 8006898:	00000000 	.word	0x00000000

0800689c <fabsf>:
 800689c:	ee10 3a10 	vmov	r3, s0
 80068a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	ee00 3a10 	vmov	s0, r3
 80068a8:	4770      	bx	lr
	...

080068ac <scalbnf>:
 80068ac:	ee10 3a10 	vmov	r3, s0
 80068b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80068b4:	d02b      	beq.n	800690e <scalbnf+0x62>
 80068b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80068ba:	d302      	bcc.n	80068c2 <scalbnf+0x16>
 80068bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80068c0:	4770      	bx	lr
 80068c2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80068c6:	d123      	bne.n	8006910 <scalbnf+0x64>
 80068c8:	4b24      	ldr	r3, [pc, #144]	; (800695c <scalbnf+0xb0>)
 80068ca:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006960 <scalbnf+0xb4>
 80068ce:	4298      	cmp	r0, r3
 80068d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80068d4:	db17      	blt.n	8006906 <scalbnf+0x5a>
 80068d6:	ee10 3a10 	vmov	r3, s0
 80068da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80068de:	3a19      	subs	r2, #25
 80068e0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80068e4:	4288      	cmp	r0, r1
 80068e6:	dd15      	ble.n	8006914 <scalbnf+0x68>
 80068e8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006964 <scalbnf+0xb8>
 80068ec:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006968 <scalbnf+0xbc>
 80068f0:	ee10 3a10 	vmov	r3, s0
 80068f4:	eeb0 7a67 	vmov.f32	s14, s15
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfb8      	it	lt
 80068fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8006900:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006904:	4770      	bx	lr
 8006906:	eddf 7a19 	vldr	s15, [pc, #100]	; 800696c <scalbnf+0xc0>
 800690a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800690e:	4770      	bx	lr
 8006910:	0dd2      	lsrs	r2, r2, #23
 8006912:	e7e5      	b.n	80068e0 <scalbnf+0x34>
 8006914:	4410      	add	r0, r2
 8006916:	28fe      	cmp	r0, #254	; 0xfe
 8006918:	dce6      	bgt.n	80068e8 <scalbnf+0x3c>
 800691a:	2800      	cmp	r0, #0
 800691c:	dd06      	ble.n	800692c <scalbnf+0x80>
 800691e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006922:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006926:	ee00 3a10 	vmov	s0, r3
 800692a:	4770      	bx	lr
 800692c:	f110 0f16 	cmn.w	r0, #22
 8006930:	da09      	bge.n	8006946 <scalbnf+0x9a>
 8006932:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800696c <scalbnf+0xc0>
 8006936:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006970 <scalbnf+0xc4>
 800693a:	ee10 3a10 	vmov	r3, s0
 800693e:	eeb0 7a67 	vmov.f32	s14, s15
 8006942:	2b00      	cmp	r3, #0
 8006944:	e7d9      	b.n	80068fa <scalbnf+0x4e>
 8006946:	3019      	adds	r0, #25
 8006948:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800694c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006950:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006974 <scalbnf+0xc8>
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	e7d7      	b.n	800690a <scalbnf+0x5e>
 800695a:	bf00      	nop
 800695c:	ffff3cb0 	.word	0xffff3cb0
 8006960:	4c000000 	.word	0x4c000000
 8006964:	7149f2ca 	.word	0x7149f2ca
 8006968:	f149f2ca 	.word	0xf149f2ca
 800696c:	0da24260 	.word	0x0da24260
 8006970:	8da24260 	.word	0x8da24260
 8006974:	33000000 	.word	0x33000000

08006978 <with_errnof>:
 8006978:	b513      	push	{r0, r1, r4, lr}
 800697a:	4604      	mov	r4, r0
 800697c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006980:	f7fd fbb6 	bl	80040f0 <__errno>
 8006984:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006988:	6004      	str	r4, [r0, #0]
 800698a:	b002      	add	sp, #8
 800698c:	bd10      	pop	{r4, pc}

0800698e <xflowf>:
 800698e:	b130      	cbz	r0, 800699e <xflowf+0x10>
 8006990:	eef1 7a40 	vneg.f32	s15, s0
 8006994:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006998:	2022      	movs	r0, #34	; 0x22
 800699a:	f7ff bfed 	b.w	8006978 <with_errnof>
 800699e:	eef0 7a40 	vmov.f32	s15, s0
 80069a2:	e7f7      	b.n	8006994 <xflowf+0x6>

080069a4 <__math_uflowf>:
 80069a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80069ac <__math_uflowf+0x8>
 80069a8:	f7ff bff1 	b.w	800698e <xflowf>
 80069ac:	10000000 	.word	0x10000000

080069b0 <__math_oflowf>:
 80069b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80069b8 <__math_oflowf+0x8>
 80069b4:	f7ff bfeb 	b.w	800698e <xflowf>
 80069b8:	70000000 	.word	0x70000000

080069bc <__ieee754_sqrtf>:
 80069bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80069c0:	4770      	bx	lr
	...

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
