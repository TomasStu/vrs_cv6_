
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004660  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  080047f0  080047f0  000147f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b6c  08004b6c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b6c  08004b6c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b6c  08004b6c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001cc  08004d40  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004d40  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c06  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010cf  00000000  00000000  00023e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00024f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003cd  00000000  00000000  00025468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cba  00000000  00000000  00025835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004c0f  00000000  00000000  000284ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073a57  00000000  00000000  0002d0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002478  00000000  00000000  000a0b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000a2fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047d8 	.word	0x080047d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	080047d8 	.word	0x080047d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	fab3 f383 	clz	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	605a      	str	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b089      	sub	sp, #36	; 0x24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c80:	bf00      	nop
 8000c82:	3724      	adds	r7, #36	; 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa93 f3a3 	rbit	r3, r3
 8000ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	613b      	str	r3, [r7, #16]
  return(result);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	210f      	movs	r1, #15
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b088      	sub	sp, #32
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000dc6:	e048      	b.n	8000e5a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fede 	bl	8000ba8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d003      	beq.n	8000dfc <LL_GPIO_Init+0x5e>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d106      	bne.n	8000e0a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	461a      	mov	r2, r3
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff14 	bl	8000c32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff3a 	bl	8000c8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d119      	bne.n	8000e54 <LL_GPIO_Init+0xb6>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d807      	bhi.n	8000e46 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff51 	bl	8000ce6 <LL_GPIO_SetAFPin_0_7>
 8000e44:	e006      	b.n	8000e54 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff76 	bl	8000d40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1af      	bne.n	8000dc8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <LL_GPIO_Init+0xda>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d107      	bne.n	8000e88 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff febd 	bl	8000c02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 0201 	bic.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0219      	lsls	r1, r3, #8
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	430b      	orrs	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f14:	f023 0307 	bic.w	r3, r3, #7
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	609a      	str	r2, [r3, #8]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	611a      	str	r2, [r3, #16]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	605a      	str	r2, [r3, #4]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff65 	bl	8000eb2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6899      	ldr	r1, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff6d 	bl	8000ed2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb6 	bl	8000f70 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff44 	bl	8000e92 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa0 	bl	8000f50 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6919      	ldr	r1, [r3, #16]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	461a      	mov	r2, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff70 	bl	8000f00 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff81 	bl	8000f30 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffa9 	bl	8000f8c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ffb6 	bl	8000fb2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <LL_InitTick+0x30>)
 8001064:	3b01      	subs	r3, #1
 8001066:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <LL_InitTick+0x30>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <LL_InitTick+0x30>)
 8001070:	2205      	movs	r2, #5
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e010 	.word	0xe000e010

08001084 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800108c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffdd 	bl	8001050 <LL_InitTick>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <LL_mDelay+0x48>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80010ae:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b6:	d00c      	beq.n	80010d2 <LL_mDelay+0x32>
  {
    Delay++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80010be:	e008      	b.n	80010d2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <LL_mDelay+0x48>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <LL_mDelay+0x32>
    {
      Delay--;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f3      	bne.n	80010c0 <LL_mDelay+0x20>
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <LL_SetSystemCoreClock+0x1c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <LL_GPIO_SetPinMode>:
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	613b      	str	r3, [r7, #16]
  return(result);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2103      	movs	r1, #3
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	61bb      	str	r3, [r7, #24]
  return(result);
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	431a      	orrs	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80011bc:	f7ff ffa6 	bl	800110c <LL_AHB1_GRP1_EnableClock>

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2108      	movs	r1, #8
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_GPIO_Init+0x24>)
 80011c6:	f7ff ffb9 	bl	800113c <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80011ca:	2108      	movs	r1, #8
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <MX_GPIO_Init+0x24>)
 80011ce:	f7ff ffe2 	bl	8001196 <LL_GPIO_SetOutputPin>

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	48000400 	.word	0x48000400

080011dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <NVIC_EnableIRQ+0x30>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	da0b      	bge.n	8001258 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <NVIC_SetPriority+0x4c>)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	3b04      	subs	r3, #4
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001256:	e009      	b.n	800126c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <NVIC_SetPriority+0x50>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000e100 	.word	0xe000e100

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_I2C_Enable>:
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_I2C_EnableClockStretching>:
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_I2C_DisableGeneralCall>:
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_I2C_SetOwnAddress2>:
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800135a:	f023 0306 	bic.w	r3, r3, #6
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	430a      	orrs	r2, r1
 8001364:	431a      	orrs	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	60da      	str	r2, [r3, #12]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_I2C_DisableOwnAddress2>:
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_I2C_EnableIT_RX>:
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f043 0204 	orr.w	r2, r3, #4
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_I2C_DisableIT_RX>:
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0204 	bic.w	r2, r3, #4
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_I2C_IsActiveFlag_TXIS>:
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	bf0c      	ite	eq
 80013ea:	2301      	moveq	r3, #1
 80013ec:	2300      	movne	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_I2C_IsActiveFlag_RXNE>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b04      	cmp	r3, #4
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_I2C_IsActiveFlag_STOP>:
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	2b20      	cmp	r3, #32
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_I2C_ClearFlag_NACK>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	61da      	str	r2, [r3, #28]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_I2C_ClearFlag_STOP>:
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f043 0220 	orr.w	r2, r3, #32
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	61da      	str	r2, [r3, #28]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_I2C_EnableAutoEndMode>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	0d5b      	lsrs	r3, r3, #21
 80014be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <LL_I2C_HandleTransfer+0x48>)
 80014c4:	430b      	orrs	r3, r1
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4319      	orrs	r1, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	041b      	lsls	r3, r3, #16
 80014d4:	4319      	orrs	r1, r3
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4319      	orrs	r1, r3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	430b      	orrs	r3, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	03ff7bff 	.word	0x03ff7bff

080014f4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	b2db      	uxtb	r3, r3
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_AHB1_GRP1_EnableClock>:
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	4907      	ldr	r1, [pc, #28]	; (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000

0800155c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <LL_APB1_GRP1_EnableClock+0x2c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80015b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015ba:	f7ff ffb7 	bl	800152c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80015ca:	2301      	movs	r3, #1
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80015d2:	2304      	movs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4821      	ldr	r0, [pc, #132]	; (8001660 <MX_I2C1_Init+0xd4>)
 80015dc:	f7ff fbdf 	bl	8000d9e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80015e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80015e4:	f7ff ffba 	bl	800155c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015e8:	f7ff fdf8 	bl	80011dc <NVIC_GetPriorityGrouping>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe44 	bl	8001280 <NVIC_EncodePriority>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	201f      	movs	r0, #31
 80015fe:	f7ff fe15 	bl	800122c <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001602:	201f      	movs	r0, #31
 8001604:	f7ff fdf8 	bl	80011f8 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_I2C1_Init+0xd8>)
 800160a:	f7ff ff3d 	bl	8001488 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800160e:	4815      	ldr	r0, [pc, #84]	; (8001664 <MX_I2C1_Init+0xd8>)
 8001610:	f7ff feb1 	bl	8001376 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_I2C1_Init+0xd8>)
 8001616:	f7ff fe86 	bl	8001326 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_I2C1_Init+0xd8>)
 800161c:	f7ff fe73 	bl	8001306 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_I2C1_Init+0xdc>)
 8001626:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_I2C1_Init+0xd8>)
 8001644:	f7ff fcc8 	bl	8000fd8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_I2C1_Init+0xd8>)
 800164e:	f7ff fe7a 	bl	8001346 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C1_Init+0xd8>)
 8001654:	f7ff fe47 	bl	80012e6 <LL_I2C_Enable>
}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	48000400 	.word	0x48000400
 8001664:	40005400 	.word	0x40005400
 8001668:	2000090e 	.word	0x2000090e

0800166c <i2c_master_read_byte>:


uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af02      	add	r7, sp, #8
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
	// Enable It from I2C
	LL_I2C_EnableIT_RX(I2C1);
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <i2c_master_read_byte+0xa8>)
 800167e:	f7ff fe8a 	bl	8001396 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001682:	79f9      	ldrb	r1, [r7, #7]
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <i2c_master_read_byte+0xac>)
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	2200      	movs	r2, #0
 8001692:	4820      	ldr	r0, [pc, #128]	; (8001714 <i2c_master_read_byte+0xa8>)
 8001694:	f7ff ff08 	bl	80014a8 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001698:	e00a      	b.n	80016b0 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800169a:	481e      	ldr	r0, [pc, #120]	; (8001714 <i2c_master_read_byte+0xa8>)
 800169c:	f7ff fe9b 	bl	80013d6 <LL_I2C_IsActiveFlag_TXIS>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	4619      	mov	r1, r3
 80016aa:	481a      	ldr	r0, [pc, #104]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016ac:	f7ff ff2f 	bl	800150e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80016b0:	4818      	ldr	r0, [pc, #96]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016b2:	f7ff feb6 	bl	8001422 <LL_I2C_IsActiveFlag_STOP>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ee      	beq.n	800169a <i2c_master_read_byte+0x2e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80016bc:	4815      	ldr	r0, [pc, #84]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016be:	f7ff fed3 	bl	8001468 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80016c2:	bf00      	nop
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016c6:	f7ff feac 	bl	8001422 <LL_I2C_IsActiveFlag_STOP>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80016d0:	79f9      	ldrb	r1, [r7, #7]
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <i2c_master_read_byte+0xb0>)
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	2200      	movs	r2, #0
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016e2:	f7ff fee1 	bl	80014a8 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80016e6:	bf00      	nop
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016ea:	f7ff fe9a 	bl	8001422 <LL_I2C_IsActiveFlag_STOP>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f9      	beq.n	80016e8 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016f6:	f7ff fe5e 	bl	80013b6 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <i2c_master_read_byte+0xa8>)
 80016fc:	f7ff feb4 	bl	8001468 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <i2c_master_read_byte+0xa8>)
 8001702:	f7ff fea1 	bl	8001448 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <i2c_master_read_byte+0xb4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	80002000 	.word	0x80002000
 800171c:	80002400 	.word	0x80002400
 8001720:	200001e8 	.word	0x200001e8

08001724 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <I2C1_EV_IRQHandler+0x24>)
 800172a:	f7ff fe67 	bl	80013fc <LL_I2C_IsActiveFlag_RXNE>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <I2C1_EV_IRQHandler+0x24>)
 8001736:	f7ff fedd 	bl	80014f4 <LL_I2C_ReceiveData8>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <I2C1_EV_IRQHandler+0x28>)
 8001740:	701a      	strb	r2, [r3, #0]
	}
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	200001e8 	.word	0x200001e8

08001750 <NVIC_SetPriorityGrouping>:
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_RCC_HSI_Enable+0x1c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <LL_RCC_HSI_Enable+0x1c>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <LL_RCC_HSI_IsReady+0x20>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <LL_RCC_SetSysClkSource+0x24>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 0203 	bic.w	r2, r3, #3
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <LL_RCC_SetSysClkSource+0x24>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000

08001830 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <LL_RCC_GetSysClkSource+0x18>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <LL_RCC_SetAHBPrescaler+0x24>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <LL_RCC_SetAHBPrescaler+0x24>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000

08001874 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <LL_RCC_SetAPB1Prescaler+0x24>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001884:	4904      	ldr	r1, [pc, #16]	; (8001898 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000

0800189c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0e1b      	lsrs	r3, r3, #24
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018de:	4904      	ldr	r1, [pc, #16]	; (80018f0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000

080018f4 <LL_APB1_GRP1_EnableClock>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <LL_APB1_GRP1_EnableClock+0x2c>)
 800190a:	69da      	ldr	r2, [r3, #28]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000

08001924 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <LL_APB2_GRP1_EnableClock+0x2c>)
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4313      	orrs	r3, r2
 8001936:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <LL_APB2_GRP1_EnableClock+0x2c>)
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <LL_FLASH_SetLatency+0x24>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 0207 	bic.w	r2, r3, #7
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <LL_FLASH_SetLatency+0x24>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40022000 	.word	0x40022000

0800197c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <LL_FLASH_GetLatency+0x18>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000

08001998 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d106      	bne.n	80019b4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80019b2:	e005      	b.n	80019c0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	405a      	eors	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	615a      	str	r2, [r3, #20]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <main>:

void SystemClock_Config(void);


int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff ff93 	bl	8001924 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a02:	f7ff ff77 	bl	80018f4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f7ff fea2 	bl	8001750 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001a0c:	f000 f816 	bl	8001a3c <SystemClock_Config>

  MX_GPIO_Init();
 8001a10:	f7ff fbd0 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a14:	f7ff fdba 	bl	800158c <MX_I2C1_Init>

  while (1)
  {
	  if(i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS, LSM6DS0_WHO_AM_I_ADDRES) == LSM6DS0_WHO_AM_I_VALUE)
 8001a18:	210f      	movs	r1, #15
 8001a1a:	20d6      	movs	r0, #214	; 0xd6
 8001a1c:	f7ff fe26 	bl	800166c <i2c_master_read_byte>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b68      	cmp	r3, #104	; 0x68
 8001a24:	d103      	bne.n	8001a2e <main+0x3a>
	  {
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8001a26:	2108      	movs	r1, #8
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <main+0x44>)
 8001a2a:	f7ff ffd1 	bl	80019d0 <LL_GPIO_TogglePin>
	  }

	  LL_mDelay(100);
 8001a2e:	2064      	movs	r0, #100	; 0x64
 8001a30:	f7ff fb36 	bl	80010a0 <LL_mDelay>
	  if(i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS, LSM6DS0_WHO_AM_I_ADDRES) == LSM6DS0_WHO_AM_I_VALUE)
 8001a34:	e7f0      	b.n	8001a18 <main+0x24>
 8001a36:	bf00      	nop
 8001a38:	48000400 	.word	0x48000400

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff ff87 	bl	8001954 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001a46:	f7ff ff99 	bl	800197c <LL_FLASH_GetLatency>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001a50:	f000 f82e 	bl	8001ab0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001a54:	f7ff fea0 	bl	8001798 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a58:	bf00      	nop
 8001a5a:	f7ff fead 	bl	80017b8 <LL_RCC_HSI_IsReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d1fa      	bne.n	8001a5a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a64:	2010      	movs	r0, #16
 8001a66:	f7ff feb9 	bl	80017dc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff feee 	bl	800184c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff feff 	bl	8001874 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff ff10 	bl	800189c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fec3 	bl	8001808 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001a82:	bf00      	nop
 8001a84:	f7ff fed4 	bl	8001830 <LL_RCC_GetSysClkSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1fa      	bne.n	8001a84 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <SystemClock_Config+0x70>)
 8001a90:	f7ff faf8 	bl	8001084 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a94:	2004      	movs	r0, #4
 8001a96:	f7ff ff7f 	bl	8001998 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <SystemClock_Config+0x70>)
 8001a9c:	f7ff fb26 	bl	80010ec <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001aa0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001aa4:	f7ff ff0e 	bl	80018c4 <LL_RCC_SetI2CClockSource>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LL_DMA_DisableChannel+0x3c>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	3a01      	subs	r2, #1
 8001ade:	4907      	ldr	r1, [pc, #28]	; (8001afc <LL_DMA_DisableChannel+0x3c>)
 8001ae0:	5c8a      	ldrb	r2, [r1, r2]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	440a      	add	r2, r1
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	080047f0 	.word	0x080047f0

08001b00 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b36:	605a      	str	r2, [r3, #4]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	2b40      	cmp	r3, #64	; 0x40
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <HardFault_Handler+0x4>

08001b7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <UsageFault_Handler+0x4>

08001b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <DMA1_Channel7_IRQHandler+0x30>)
 8001bce:	f7ff ff97 	bl	8001b00 <LL_DMA_IsActiveFlag_TC7>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10d      	bne.n	8001bf4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001bd8:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <DMA1_Channel7_IRQHandler+0x30>)
 8001bda:	f7ff ffa5 	bl	8001b28 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001bde:	bf00      	nop
 8001be0:	4806      	ldr	r0, [pc, #24]	; (8001bfc <DMA1_Channel7_IRQHandler+0x34>)
 8001be2:	f7ff ffaf 	bl	8001b44 <LL_USART_IsActiveFlag_TC>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f9      	beq.n	8001be0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001bec:	2107      	movs	r1, #7
 8001bee:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <DMA1_Channel7_IRQHandler+0x30>)
 8001bf0:	f7ff ff66 	bl	8001ac0 <LL_DMA_DisableChannel>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40004400 	.word	0x40004400

08001c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_kill>:

int _kill(int pid, int sig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c1a:	f000 fedf 	bl	80029dc <__errno>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2216      	movs	r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
	return -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_exit>:

void _exit (int status)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ffe7 	bl	8001c10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c42:	e7fe      	b.n	8001c42 <_exit+0x12>

08001c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e00a      	b.n	8001c6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c56:	f3af 8000 	nop.w
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	b2ca      	uxtb	r2, r1
 8001c64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbf0      	blt.n	8001c56 <_read+0x12>
	}

return len;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e009      	b.n	8001ca4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	60ba      	str	r2, [r7, #8]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf1      	blt.n	8001c90 <_write+0x12>
	}
	return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_close>:

int _close(int file)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cde:	605a      	str	r2, [r3, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_isatty>:

int _isatty(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x50>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x16>
		heap_end = &end;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <_sbrk+0x50>)
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <_sbrk+0x54>)
 8001d34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <_sbrk+0x50>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <_sbrk+0x50>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	466a      	mov	r2, sp
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d907      	bls.n	8001d5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d4a:	f000 fe47 	bl	80029dc <__errno>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	220c      	movs	r2, #12
 8001d52:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e006      	b.n	8001d68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <_sbrk+0x50>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <_sbrk+0x50>)
 8001d64:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200001ec 	.word	0x200001ec
 8001d74:	20000340 	.word	0x20000340

08001d78 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <SystemInit+0x84>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <SystemInit+0x84>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <SystemInit+0x88>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <SystemInit+0x88>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <SystemInit+0x88>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4918      	ldr	r1, [pc, #96]	; (8001e00 <SystemInit+0x88>)
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <SystemInit+0x8c>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <SystemInit+0x88>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <SystemInit+0x88>)
 8001daa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <SystemInit+0x88>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <SystemInit+0x88>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <SystemInit+0x88>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <SystemInit+0x88>)
 8001dc6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dca:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <SystemInit+0x88>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <SystemInit+0x88>)
 8001dd2:	f023 030f 	bic.w	r3, r3, #15
 8001dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <SystemInit+0x88>)
 8001dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ddc:	4908      	ldr	r1, [pc, #32]	; (8001e00 <SystemInit+0x88>)
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <SystemInit+0x90>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x88>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SystemInit+0x84>)
 8001dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df0:	609a      	str	r2, [r3, #8]
#endif
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	f87fc00c 	.word	0xf87fc00c
 8001e08:	ff00fccc 	.word	0xff00fccc

08001e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e12:	e003      	b.n	8001e1c <LoopCopyDataInit>

08001e14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e1a:	3104      	adds	r1, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e1c:	480b      	ldr	r0, [pc, #44]	; (8001e4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e24:	d3f6      	bcc.n	8001e14 <CopyDataInit>
	ldr	r2, =_sbss
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e28:	e002      	b.n	8001e30 <LoopFillZerobss>

08001e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e2c:	f842 3b04 	str.w	r3, [r2], #4

08001e30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <LoopForever+0x16>)
	cmp	r2, r3
 8001e32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e34:	d3f9      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e36:	f7ff ff9f 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f000 fdd5 	bl	80029e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e3e:	f7ff fdd9 	bl	80019f4 <main>

08001e42 <LoopForever>:

LoopForever:
    b LoopForever
 8001e42:	e7fe      	b.n	8001e42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e44:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001e48:	08004b74 	.word	0x08004b74
	ldr	r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e50:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8001e54:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8001e58:	2000033c 	.word	0x2000033c

08001e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_2_IRQHandler>

08001e5e <__cvt>:
 8001e5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e62:	ec55 4b10 	vmov	r4, r5, d0
 8001e66:	2d00      	cmp	r5, #0
 8001e68:	460e      	mov	r6, r1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	bfbb      	ittet	lt
 8001e70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001e74:	461d      	movlt	r5, r3
 8001e76:	2300      	movge	r3, #0
 8001e78:	232d      	movlt	r3, #45	; 0x2d
 8001e7a:	700b      	strb	r3, [r1, #0]
 8001e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001e82:	4691      	mov	r9, r2
 8001e84:	f023 0820 	bic.w	r8, r3, #32
 8001e88:	bfbc      	itt	lt
 8001e8a:	4622      	movlt	r2, r4
 8001e8c:	4614      	movlt	r4, r2
 8001e8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001e92:	d005      	beq.n	8001ea0 <__cvt+0x42>
 8001e94:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001e98:	d100      	bne.n	8001e9c <__cvt+0x3e>
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	e000      	b.n	8001ea2 <__cvt+0x44>
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	ab03      	add	r3, sp, #12
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	ab02      	add	r3, sp, #8
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	ec45 4b10 	vmov	d0, r4, r5
 8001eae:	4653      	mov	r3, sl
 8001eb0:	4632      	mov	r2, r6
 8001eb2:	f000 fe49 	bl	8002b48 <_dtoa_r>
 8001eb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001eba:	4607      	mov	r7, r0
 8001ebc:	d102      	bne.n	8001ec4 <__cvt+0x66>
 8001ebe:	f019 0f01 	tst.w	r9, #1
 8001ec2:	d022      	beq.n	8001f0a <__cvt+0xac>
 8001ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ec8:	eb07 0906 	add.w	r9, r7, r6
 8001ecc:	d110      	bne.n	8001ef0 <__cvt+0x92>
 8001ece:	783b      	ldrb	r3, [r7, #0]
 8001ed0:	2b30      	cmp	r3, #48	; 0x30
 8001ed2:	d10a      	bne.n	8001eea <__cvt+0x8c>
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ee0:	b918      	cbnz	r0, 8001eea <__cvt+0x8c>
 8001ee2:	f1c6 0601 	rsb	r6, r6, #1
 8001ee6:	f8ca 6000 	str.w	r6, [sl]
 8001eea:	f8da 3000 	ldr.w	r3, [sl]
 8001eee:	4499      	add	r9, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 8001efc:	b108      	cbz	r0, 8001f02 <__cvt+0xa4>
 8001efe:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f02:	2230      	movs	r2, #48	; 0x30
 8001f04:	9b03      	ldr	r3, [sp, #12]
 8001f06:	454b      	cmp	r3, r9
 8001f08:	d307      	bcc.n	8001f1a <__cvt+0xbc>
 8001f0a:	9b03      	ldr	r3, [sp, #12]
 8001f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f0e:	1bdb      	subs	r3, r3, r7
 8001f10:	4638      	mov	r0, r7
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	b004      	add	sp, #16
 8001f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	9103      	str	r1, [sp, #12]
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e7f0      	b.n	8001f04 <__cvt+0xa6>

08001f22 <__exponent>:
 8001f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f24:	4603      	mov	r3, r0
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bfb8      	it	lt
 8001f2a:	4249      	neglt	r1, r1
 8001f2c:	f803 2b02 	strb.w	r2, [r3], #2
 8001f30:	bfb4      	ite	lt
 8001f32:	222d      	movlt	r2, #45	; 0x2d
 8001f34:	222b      	movge	r2, #43	; 0x2b
 8001f36:	2909      	cmp	r1, #9
 8001f38:	7042      	strb	r2, [r0, #1]
 8001f3a:	dd2a      	ble.n	8001f92 <__exponent+0x70>
 8001f3c:	f10d 0207 	add.w	r2, sp, #7
 8001f40:	4617      	mov	r7, r2
 8001f42:	260a      	movs	r6, #10
 8001f44:	4694      	mov	ip, r2
 8001f46:	fb91 f5f6 	sdiv	r5, r1, r6
 8001f4a:	fb06 1415 	mls	r4, r6, r5, r1
 8001f4e:	3430      	adds	r4, #48	; 0x30
 8001f50:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8001f54:	460c      	mov	r4, r1
 8001f56:	2c63      	cmp	r4, #99	; 0x63
 8001f58:	f102 32ff 	add.w	r2, r2, #4294967295
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	dcf1      	bgt.n	8001f44 <__exponent+0x22>
 8001f60:	3130      	adds	r1, #48	; 0x30
 8001f62:	f1ac 0402 	sub.w	r4, ip, #2
 8001f66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001f6a:	1c41      	adds	r1, r0, #1
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	42ba      	cmp	r2, r7
 8001f70:	d30a      	bcc.n	8001f88 <__exponent+0x66>
 8001f72:	f10d 0209 	add.w	r2, sp, #9
 8001f76:	eba2 020c 	sub.w	r2, r2, ip
 8001f7a:	42bc      	cmp	r4, r7
 8001f7c:	bf88      	it	hi
 8001f7e:	2200      	movhi	r2, #0
 8001f80:	4413      	add	r3, r2
 8001f82:	1a18      	subs	r0, r3, r0
 8001f84:	b003      	add	sp, #12
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f88:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001f8c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8001f90:	e7ed      	b.n	8001f6e <__exponent+0x4c>
 8001f92:	2330      	movs	r3, #48	; 0x30
 8001f94:	3130      	adds	r1, #48	; 0x30
 8001f96:	7083      	strb	r3, [r0, #2]
 8001f98:	70c1      	strb	r1, [r0, #3]
 8001f9a:	1d03      	adds	r3, r0, #4
 8001f9c:	e7f1      	b.n	8001f82 <__exponent+0x60>
	...

08001fa0 <_printf_float>:
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	ed2d 8b02 	vpush	{d8}
 8001fa8:	b08d      	sub	sp, #52	; 0x34
 8001faa:	460c      	mov	r4, r1
 8001fac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001fb0:	4616      	mov	r6, r2
 8001fb2:	461f      	mov	r7, r3
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	f000 fcc7 	bl	8002948 <_localeconv_r>
 8001fba:	f8d0 a000 	ldr.w	sl, [r0]
 8001fbe:	4650      	mov	r0, sl
 8001fc0:	f7fe f956 	bl	8000270 <strlen>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	9305      	str	r3, [sp, #20]
 8001fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8001fd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8001fd4:	3307      	adds	r3, #7
 8001fd6:	f023 0307 	bic.w	r3, r3, #7
 8001fda:	f103 0208 	add.w	r2, r3, #8
 8001fde:	f8c8 2000 	str.w	r2, [r8]
 8001fe2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001fe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001fea:	9307      	str	r3, [sp, #28]
 8001fec:	f8cd 8018 	str.w	r8, [sp, #24]
 8001ff0:	ee08 0a10 	vmov	s16, r0
 8001ff4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8001ff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <_printf_float+0x2d8>)
 8001ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8002002:	f7fe fd93 	bl	8000b2c <__aeabi_dcmpun>
 8002006:	bb88      	cbnz	r0, 800206c <_printf_float+0xcc>
 8002008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800200c:	4b9a      	ldr	r3, [pc, #616]	; (8002278 <_printf_float+0x2d8>)
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	f7fe fd6d 	bl	8000af0 <__aeabi_dcmple>
 8002016:	bb48      	cbnz	r0, 800206c <_printf_float+0xcc>
 8002018:	2200      	movs	r2, #0
 800201a:	2300      	movs	r3, #0
 800201c:	4640      	mov	r0, r8
 800201e:	4649      	mov	r1, r9
 8002020:	f7fe fd5c 	bl	8000adc <__aeabi_dcmplt>
 8002024:	b110      	cbz	r0, 800202c <_printf_float+0x8c>
 8002026:	232d      	movs	r3, #45	; 0x2d
 8002028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800202c:	4a93      	ldr	r2, [pc, #588]	; (800227c <_printf_float+0x2dc>)
 800202e:	4b94      	ldr	r3, [pc, #592]	; (8002280 <_printf_float+0x2e0>)
 8002030:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002034:	bf94      	ite	ls
 8002036:	4690      	movls	r8, r2
 8002038:	4698      	movhi	r8, r3
 800203a:	2303      	movs	r3, #3
 800203c:	6123      	str	r3, [r4, #16]
 800203e:	9b05      	ldr	r3, [sp, #20]
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	f04f 0900 	mov.w	r9, #0
 800204a:	9700      	str	r7, [sp, #0]
 800204c:	4633      	mov	r3, r6
 800204e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002050:	4621      	mov	r1, r4
 8002052:	4628      	mov	r0, r5
 8002054:	f000 f9da 	bl	800240c <_printf_common>
 8002058:	3001      	adds	r0, #1
 800205a:	f040 8090 	bne.w	800217e <_printf_float+0x1de>
 800205e:	f04f 30ff 	mov.w	r0, #4294967295
 8002062:	b00d      	add	sp, #52	; 0x34
 8002064:	ecbd 8b02 	vpop	{d8}
 8002068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800206c:	4642      	mov	r2, r8
 800206e:	464b      	mov	r3, r9
 8002070:	4640      	mov	r0, r8
 8002072:	4649      	mov	r1, r9
 8002074:	f7fe fd5a 	bl	8000b2c <__aeabi_dcmpun>
 8002078:	b140      	cbz	r0, 800208c <_printf_float+0xec>
 800207a:	464b      	mov	r3, r9
 800207c:	2b00      	cmp	r3, #0
 800207e:	bfbc      	itt	lt
 8002080:	232d      	movlt	r3, #45	; 0x2d
 8002082:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002086:	4a7f      	ldr	r2, [pc, #508]	; (8002284 <_printf_float+0x2e4>)
 8002088:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <_printf_float+0x2e8>)
 800208a:	e7d1      	b.n	8002030 <_printf_float+0x90>
 800208c:	6863      	ldr	r3, [r4, #4]
 800208e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002092:	9206      	str	r2, [sp, #24]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	d13f      	bne.n	8002118 <_printf_float+0x178>
 8002098:	2306      	movs	r3, #6
 800209a:	6063      	str	r3, [r4, #4]
 800209c:	9b05      	ldr	r3, [sp, #20]
 800209e:	6861      	ldr	r1, [r4, #4]
 80020a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020a4:	2300      	movs	r3, #0
 80020a6:	9303      	str	r3, [sp, #12]
 80020a8:	ab0a      	add	r3, sp, #40	; 0x28
 80020aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80020ae:	ab09      	add	r3, sp, #36	; 0x24
 80020b0:	ec49 8b10 	vmov	d0, r8, r9
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	6022      	str	r2, [r4, #0]
 80020b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80020bc:	4628      	mov	r0, r5
 80020be:	f7ff fece 	bl	8001e5e <__cvt>
 80020c2:	9b06      	ldr	r3, [sp, #24]
 80020c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020c6:	2b47      	cmp	r3, #71	; 0x47
 80020c8:	4680      	mov	r8, r0
 80020ca:	d108      	bne.n	80020de <_printf_float+0x13e>
 80020cc:	1cc8      	adds	r0, r1, #3
 80020ce:	db02      	blt.n	80020d6 <_printf_float+0x136>
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	4299      	cmp	r1, r3
 80020d4:	dd41      	ble.n	800215a <_printf_float+0x1ba>
 80020d6:	f1ab 0302 	sub.w	r3, fp, #2
 80020da:	fa5f fb83 	uxtb.w	fp, r3
 80020de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80020e2:	d820      	bhi.n	8002126 <_printf_float+0x186>
 80020e4:	3901      	subs	r1, #1
 80020e6:	465a      	mov	r2, fp
 80020e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80020ec:	9109      	str	r1, [sp, #36]	; 0x24
 80020ee:	f7ff ff18 	bl	8001f22 <__exponent>
 80020f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020f4:	1813      	adds	r3, r2, r0
 80020f6:	2a01      	cmp	r2, #1
 80020f8:	4681      	mov	r9, r0
 80020fa:	6123      	str	r3, [r4, #16]
 80020fc:	dc02      	bgt.n	8002104 <_printf_float+0x164>
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	07d2      	lsls	r2, r2, #31
 8002102:	d501      	bpl.n	8002108 <_printf_float+0x168>
 8002104:	3301      	adds	r3, #1
 8002106:	6123      	str	r3, [r4, #16]
 8002108:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800210c:	2b00      	cmp	r3, #0
 800210e:	d09c      	beq.n	800204a <_printf_float+0xaa>
 8002110:	232d      	movs	r3, #45	; 0x2d
 8002112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002116:	e798      	b.n	800204a <_printf_float+0xaa>
 8002118:	9a06      	ldr	r2, [sp, #24]
 800211a:	2a47      	cmp	r2, #71	; 0x47
 800211c:	d1be      	bne.n	800209c <_printf_float+0xfc>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1bc      	bne.n	800209c <_printf_float+0xfc>
 8002122:	2301      	movs	r3, #1
 8002124:	e7b9      	b.n	800209a <_printf_float+0xfa>
 8002126:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800212a:	d118      	bne.n	800215e <_printf_float+0x1be>
 800212c:	2900      	cmp	r1, #0
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	dd0b      	ble.n	800214a <_printf_float+0x1aa>
 8002132:	6121      	str	r1, [r4, #16]
 8002134:	b913      	cbnz	r3, 800213c <_printf_float+0x19c>
 8002136:	6822      	ldr	r2, [r4, #0]
 8002138:	07d0      	lsls	r0, r2, #31
 800213a:	d502      	bpl.n	8002142 <_printf_float+0x1a2>
 800213c:	3301      	adds	r3, #1
 800213e:	440b      	add	r3, r1
 8002140:	6123      	str	r3, [r4, #16]
 8002142:	65a1      	str	r1, [r4, #88]	; 0x58
 8002144:	f04f 0900 	mov.w	r9, #0
 8002148:	e7de      	b.n	8002108 <_printf_float+0x168>
 800214a:	b913      	cbnz	r3, 8002152 <_printf_float+0x1b2>
 800214c:	6822      	ldr	r2, [r4, #0]
 800214e:	07d2      	lsls	r2, r2, #31
 8002150:	d501      	bpl.n	8002156 <_printf_float+0x1b6>
 8002152:	3302      	adds	r3, #2
 8002154:	e7f4      	b.n	8002140 <_printf_float+0x1a0>
 8002156:	2301      	movs	r3, #1
 8002158:	e7f2      	b.n	8002140 <_printf_float+0x1a0>
 800215a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800215e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002160:	4299      	cmp	r1, r3
 8002162:	db05      	blt.n	8002170 <_printf_float+0x1d0>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	6121      	str	r1, [r4, #16]
 8002168:	07d8      	lsls	r0, r3, #31
 800216a:	d5ea      	bpl.n	8002142 <_printf_float+0x1a2>
 800216c:	1c4b      	adds	r3, r1, #1
 800216e:	e7e7      	b.n	8002140 <_printf_float+0x1a0>
 8002170:	2900      	cmp	r1, #0
 8002172:	bfd4      	ite	le
 8002174:	f1c1 0202 	rsble	r2, r1, #2
 8002178:	2201      	movgt	r2, #1
 800217a:	4413      	add	r3, r2
 800217c:	e7e0      	b.n	8002140 <_printf_float+0x1a0>
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	055a      	lsls	r2, r3, #21
 8002182:	d407      	bmi.n	8002194 <_printf_float+0x1f4>
 8002184:	6923      	ldr	r3, [r4, #16]
 8002186:	4642      	mov	r2, r8
 8002188:	4631      	mov	r1, r6
 800218a:	4628      	mov	r0, r5
 800218c:	47b8      	blx	r7
 800218e:	3001      	adds	r0, #1
 8002190:	d12c      	bne.n	80021ec <_printf_float+0x24c>
 8002192:	e764      	b.n	800205e <_printf_float+0xbe>
 8002194:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002198:	f240 80e0 	bls.w	800235c <_printf_float+0x3bc>
 800219c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80021a0:	2200      	movs	r2, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	f7fe fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d034      	beq.n	8002216 <_printf_float+0x276>
 80021ac:	4a37      	ldr	r2, [pc, #220]	; (800228c <_printf_float+0x2ec>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	4631      	mov	r1, r6
 80021b2:	4628      	mov	r0, r5
 80021b4:	47b8      	blx	r7
 80021b6:	3001      	adds	r0, #1
 80021b8:	f43f af51 	beq.w	800205e <_printf_float+0xbe>
 80021bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80021c0:	429a      	cmp	r2, r3
 80021c2:	db02      	blt.n	80021ca <_printf_float+0x22a>
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	07d8      	lsls	r0, r3, #31
 80021c8:	d510      	bpl.n	80021ec <_printf_float+0x24c>
 80021ca:	ee18 3a10 	vmov	r3, s16
 80021ce:	4652      	mov	r2, sl
 80021d0:	4631      	mov	r1, r6
 80021d2:	4628      	mov	r0, r5
 80021d4:	47b8      	blx	r7
 80021d6:	3001      	adds	r0, #1
 80021d8:	f43f af41 	beq.w	800205e <_printf_float+0xbe>
 80021dc:	f04f 0800 	mov.w	r8, #0
 80021e0:	f104 091a 	add.w	r9, r4, #26
 80021e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	4543      	cmp	r3, r8
 80021ea:	dc09      	bgt.n	8002200 <_printf_float+0x260>
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	079b      	lsls	r3, r3, #30
 80021f0:	f100 8107 	bmi.w	8002402 <_printf_float+0x462>
 80021f4:	68e0      	ldr	r0, [r4, #12]
 80021f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021f8:	4298      	cmp	r0, r3
 80021fa:	bfb8      	it	lt
 80021fc:	4618      	movlt	r0, r3
 80021fe:	e730      	b.n	8002062 <_printf_float+0xc2>
 8002200:	2301      	movs	r3, #1
 8002202:	464a      	mov	r2, r9
 8002204:	4631      	mov	r1, r6
 8002206:	4628      	mov	r0, r5
 8002208:	47b8      	blx	r7
 800220a:	3001      	adds	r0, #1
 800220c:	f43f af27 	beq.w	800205e <_printf_float+0xbe>
 8002210:	f108 0801 	add.w	r8, r8, #1
 8002214:	e7e6      	b.n	80021e4 <_printf_float+0x244>
 8002216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	dc39      	bgt.n	8002290 <_printf_float+0x2f0>
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <_printf_float+0x2ec>)
 800221e:	2301      	movs	r3, #1
 8002220:	4631      	mov	r1, r6
 8002222:	4628      	mov	r0, r5
 8002224:	47b8      	blx	r7
 8002226:	3001      	adds	r0, #1
 8002228:	f43f af19 	beq.w	800205e <_printf_float+0xbe>
 800222c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002230:	4313      	orrs	r3, r2
 8002232:	d102      	bne.n	800223a <_printf_float+0x29a>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	07d9      	lsls	r1, r3, #31
 8002238:	d5d8      	bpl.n	80021ec <_printf_float+0x24c>
 800223a:	ee18 3a10 	vmov	r3, s16
 800223e:	4652      	mov	r2, sl
 8002240:	4631      	mov	r1, r6
 8002242:	4628      	mov	r0, r5
 8002244:	47b8      	blx	r7
 8002246:	3001      	adds	r0, #1
 8002248:	f43f af09 	beq.w	800205e <_printf_float+0xbe>
 800224c:	f04f 0900 	mov.w	r9, #0
 8002250:	f104 0a1a 	add.w	sl, r4, #26
 8002254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002256:	425b      	negs	r3, r3
 8002258:	454b      	cmp	r3, r9
 800225a:	dc01      	bgt.n	8002260 <_printf_float+0x2c0>
 800225c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800225e:	e792      	b.n	8002186 <_printf_float+0x1e6>
 8002260:	2301      	movs	r3, #1
 8002262:	4652      	mov	r2, sl
 8002264:	4631      	mov	r1, r6
 8002266:	4628      	mov	r0, r5
 8002268:	47b8      	blx	r7
 800226a:	3001      	adds	r0, #1
 800226c:	f43f aef7 	beq.w	800205e <_printf_float+0xbe>
 8002270:	f109 0901 	add.w	r9, r9, #1
 8002274:	e7ee      	b.n	8002254 <_printf_float+0x2b4>
 8002276:	bf00      	nop
 8002278:	7fefffff 	.word	0x7fefffff
 800227c:	080047f7 	.word	0x080047f7
 8002280:	080047fb 	.word	0x080047fb
 8002284:	080047ff 	.word	0x080047ff
 8002288:	08004803 	.word	0x08004803
 800228c:	08004807 	.word	0x08004807
 8002290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002292:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002294:	429a      	cmp	r2, r3
 8002296:	bfa8      	it	ge
 8002298:	461a      	movge	r2, r3
 800229a:	2a00      	cmp	r2, #0
 800229c:	4691      	mov	r9, r2
 800229e:	dc37      	bgt.n	8002310 <_printf_float+0x370>
 80022a0:	f04f 0b00 	mov.w	fp, #0
 80022a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022a8:	f104 021a 	add.w	r2, r4, #26
 80022ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022ae:	9305      	str	r3, [sp, #20]
 80022b0:	eba3 0309 	sub.w	r3, r3, r9
 80022b4:	455b      	cmp	r3, fp
 80022b6:	dc33      	bgt.n	8002320 <_printf_float+0x380>
 80022b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022bc:	429a      	cmp	r2, r3
 80022be:	db3b      	blt.n	8002338 <_printf_float+0x398>
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	07da      	lsls	r2, r3, #31
 80022c4:	d438      	bmi.n	8002338 <_printf_float+0x398>
 80022c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80022ca:	eba2 0903 	sub.w	r9, r2, r3
 80022ce:	9b05      	ldr	r3, [sp, #20]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	4591      	cmp	r9, r2
 80022d4:	bfa8      	it	ge
 80022d6:	4691      	movge	r9, r2
 80022d8:	f1b9 0f00 	cmp.w	r9, #0
 80022dc:	dc35      	bgt.n	800234a <_printf_float+0x3aa>
 80022de:	f04f 0800 	mov.w	r8, #0
 80022e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022e6:	f104 0a1a 	add.w	sl, r4, #26
 80022ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	eba3 0309 	sub.w	r3, r3, r9
 80022f4:	4543      	cmp	r3, r8
 80022f6:	f77f af79 	ble.w	80021ec <_printf_float+0x24c>
 80022fa:	2301      	movs	r3, #1
 80022fc:	4652      	mov	r2, sl
 80022fe:	4631      	mov	r1, r6
 8002300:	4628      	mov	r0, r5
 8002302:	47b8      	blx	r7
 8002304:	3001      	adds	r0, #1
 8002306:	f43f aeaa 	beq.w	800205e <_printf_float+0xbe>
 800230a:	f108 0801 	add.w	r8, r8, #1
 800230e:	e7ec      	b.n	80022ea <_printf_float+0x34a>
 8002310:	4613      	mov	r3, r2
 8002312:	4631      	mov	r1, r6
 8002314:	4642      	mov	r2, r8
 8002316:	4628      	mov	r0, r5
 8002318:	47b8      	blx	r7
 800231a:	3001      	adds	r0, #1
 800231c:	d1c0      	bne.n	80022a0 <_printf_float+0x300>
 800231e:	e69e      	b.n	800205e <_printf_float+0xbe>
 8002320:	2301      	movs	r3, #1
 8002322:	4631      	mov	r1, r6
 8002324:	4628      	mov	r0, r5
 8002326:	9205      	str	r2, [sp, #20]
 8002328:	47b8      	blx	r7
 800232a:	3001      	adds	r0, #1
 800232c:	f43f ae97 	beq.w	800205e <_printf_float+0xbe>
 8002330:	9a05      	ldr	r2, [sp, #20]
 8002332:	f10b 0b01 	add.w	fp, fp, #1
 8002336:	e7b9      	b.n	80022ac <_printf_float+0x30c>
 8002338:	ee18 3a10 	vmov	r3, s16
 800233c:	4652      	mov	r2, sl
 800233e:	4631      	mov	r1, r6
 8002340:	4628      	mov	r0, r5
 8002342:	47b8      	blx	r7
 8002344:	3001      	adds	r0, #1
 8002346:	d1be      	bne.n	80022c6 <_printf_float+0x326>
 8002348:	e689      	b.n	800205e <_printf_float+0xbe>
 800234a:	9a05      	ldr	r2, [sp, #20]
 800234c:	464b      	mov	r3, r9
 800234e:	4442      	add	r2, r8
 8002350:	4631      	mov	r1, r6
 8002352:	4628      	mov	r0, r5
 8002354:	47b8      	blx	r7
 8002356:	3001      	adds	r0, #1
 8002358:	d1c1      	bne.n	80022de <_printf_float+0x33e>
 800235a:	e680      	b.n	800205e <_printf_float+0xbe>
 800235c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800235e:	2a01      	cmp	r2, #1
 8002360:	dc01      	bgt.n	8002366 <_printf_float+0x3c6>
 8002362:	07db      	lsls	r3, r3, #31
 8002364:	d53a      	bpl.n	80023dc <_printf_float+0x43c>
 8002366:	2301      	movs	r3, #1
 8002368:	4642      	mov	r2, r8
 800236a:	4631      	mov	r1, r6
 800236c:	4628      	mov	r0, r5
 800236e:	47b8      	blx	r7
 8002370:	3001      	adds	r0, #1
 8002372:	f43f ae74 	beq.w	800205e <_printf_float+0xbe>
 8002376:	ee18 3a10 	vmov	r3, s16
 800237a:	4652      	mov	r2, sl
 800237c:	4631      	mov	r1, r6
 800237e:	4628      	mov	r0, r5
 8002380:	47b8      	blx	r7
 8002382:	3001      	adds	r0, #1
 8002384:	f43f ae6b 	beq.w	800205e <_printf_float+0xbe>
 8002388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800238c:	2200      	movs	r2, #0
 800238e:	2300      	movs	r3, #0
 8002390:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002394:	f7fe fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8002398:	b9d8      	cbnz	r0, 80023d2 <_printf_float+0x432>
 800239a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800239e:	f108 0201 	add.w	r2, r8, #1
 80023a2:	4631      	mov	r1, r6
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b8      	blx	r7
 80023a8:	3001      	adds	r0, #1
 80023aa:	d10e      	bne.n	80023ca <_printf_float+0x42a>
 80023ac:	e657      	b.n	800205e <_printf_float+0xbe>
 80023ae:	2301      	movs	r3, #1
 80023b0:	4652      	mov	r2, sl
 80023b2:	4631      	mov	r1, r6
 80023b4:	4628      	mov	r0, r5
 80023b6:	47b8      	blx	r7
 80023b8:	3001      	adds	r0, #1
 80023ba:	f43f ae50 	beq.w	800205e <_printf_float+0xbe>
 80023be:	f108 0801 	add.w	r8, r8, #1
 80023c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	4543      	cmp	r3, r8
 80023c8:	dcf1      	bgt.n	80023ae <_printf_float+0x40e>
 80023ca:	464b      	mov	r3, r9
 80023cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80023d0:	e6da      	b.n	8002188 <_printf_float+0x1e8>
 80023d2:	f04f 0800 	mov.w	r8, #0
 80023d6:	f104 0a1a 	add.w	sl, r4, #26
 80023da:	e7f2      	b.n	80023c2 <_printf_float+0x422>
 80023dc:	2301      	movs	r3, #1
 80023de:	4642      	mov	r2, r8
 80023e0:	e7df      	b.n	80023a2 <_printf_float+0x402>
 80023e2:	2301      	movs	r3, #1
 80023e4:	464a      	mov	r2, r9
 80023e6:	4631      	mov	r1, r6
 80023e8:	4628      	mov	r0, r5
 80023ea:	47b8      	blx	r7
 80023ec:	3001      	adds	r0, #1
 80023ee:	f43f ae36 	beq.w	800205e <_printf_float+0xbe>
 80023f2:	f108 0801 	add.w	r8, r8, #1
 80023f6:	68e3      	ldr	r3, [r4, #12]
 80023f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80023fa:	1a5b      	subs	r3, r3, r1
 80023fc:	4543      	cmp	r3, r8
 80023fe:	dcf0      	bgt.n	80023e2 <_printf_float+0x442>
 8002400:	e6f8      	b.n	80021f4 <_printf_float+0x254>
 8002402:	f04f 0800 	mov.w	r8, #0
 8002406:	f104 0919 	add.w	r9, r4, #25
 800240a:	e7f4      	b.n	80023f6 <_printf_float+0x456>

0800240c <_printf_common>:
 800240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002410:	4616      	mov	r6, r2
 8002412:	4699      	mov	r9, r3
 8002414:	688a      	ldr	r2, [r1, #8]
 8002416:	690b      	ldr	r3, [r1, #16]
 8002418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800241c:	4293      	cmp	r3, r2
 800241e:	bfb8      	it	lt
 8002420:	4613      	movlt	r3, r2
 8002422:	6033      	str	r3, [r6, #0]
 8002424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002428:	4607      	mov	r7, r0
 800242a:	460c      	mov	r4, r1
 800242c:	b10a      	cbz	r2, 8002432 <_printf_common+0x26>
 800242e:	3301      	adds	r3, #1
 8002430:	6033      	str	r3, [r6, #0]
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	0699      	lsls	r1, r3, #26
 8002436:	bf42      	ittt	mi
 8002438:	6833      	ldrmi	r3, [r6, #0]
 800243a:	3302      	addmi	r3, #2
 800243c:	6033      	strmi	r3, [r6, #0]
 800243e:	6825      	ldr	r5, [r4, #0]
 8002440:	f015 0506 	ands.w	r5, r5, #6
 8002444:	d106      	bne.n	8002454 <_printf_common+0x48>
 8002446:	f104 0a19 	add.w	sl, r4, #25
 800244a:	68e3      	ldr	r3, [r4, #12]
 800244c:	6832      	ldr	r2, [r6, #0]
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	42ab      	cmp	r3, r5
 8002452:	dc26      	bgt.n	80024a2 <_printf_common+0x96>
 8002454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002458:	1e13      	subs	r3, r2, #0
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	bf18      	it	ne
 800245e:	2301      	movne	r3, #1
 8002460:	0692      	lsls	r2, r2, #26
 8002462:	d42b      	bmi.n	80024bc <_printf_common+0xb0>
 8002464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002468:	4649      	mov	r1, r9
 800246a:	4638      	mov	r0, r7
 800246c:	47c0      	blx	r8
 800246e:	3001      	adds	r0, #1
 8002470:	d01e      	beq.n	80024b0 <_printf_common+0xa4>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	6922      	ldr	r2, [r4, #16]
 8002476:	f003 0306 	and.w	r3, r3, #6
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf02      	ittt	eq
 800247e:	68e5      	ldreq	r5, [r4, #12]
 8002480:	6833      	ldreq	r3, [r6, #0]
 8002482:	1aed      	subeq	r5, r5, r3
 8002484:	68a3      	ldr	r3, [r4, #8]
 8002486:	bf0c      	ite	eq
 8002488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800248c:	2500      	movne	r5, #0
 800248e:	4293      	cmp	r3, r2
 8002490:	bfc4      	itt	gt
 8002492:	1a9b      	subgt	r3, r3, r2
 8002494:	18ed      	addgt	r5, r5, r3
 8002496:	2600      	movs	r6, #0
 8002498:	341a      	adds	r4, #26
 800249a:	42b5      	cmp	r5, r6
 800249c:	d11a      	bne.n	80024d4 <_printf_common+0xc8>
 800249e:	2000      	movs	r0, #0
 80024a0:	e008      	b.n	80024b4 <_printf_common+0xa8>
 80024a2:	2301      	movs	r3, #1
 80024a4:	4652      	mov	r2, sl
 80024a6:	4649      	mov	r1, r9
 80024a8:	4638      	mov	r0, r7
 80024aa:	47c0      	blx	r8
 80024ac:	3001      	adds	r0, #1
 80024ae:	d103      	bne.n	80024b8 <_printf_common+0xac>
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b8:	3501      	adds	r5, #1
 80024ba:	e7c6      	b.n	800244a <_printf_common+0x3e>
 80024bc:	18e1      	adds	r1, r4, r3
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	2030      	movs	r0, #48	; 0x30
 80024c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024c6:	4422      	add	r2, r4
 80024c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024d0:	3302      	adds	r3, #2
 80024d2:	e7c7      	b.n	8002464 <_printf_common+0x58>
 80024d4:	2301      	movs	r3, #1
 80024d6:	4622      	mov	r2, r4
 80024d8:	4649      	mov	r1, r9
 80024da:	4638      	mov	r0, r7
 80024dc:	47c0      	blx	r8
 80024de:	3001      	adds	r0, #1
 80024e0:	d0e6      	beq.n	80024b0 <_printf_common+0xa4>
 80024e2:	3601      	adds	r6, #1
 80024e4:	e7d9      	b.n	800249a <_printf_common+0x8e>
	...

080024e8 <_printf_i>:
 80024e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024ec:	7e0f      	ldrb	r7, [r1, #24]
 80024ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024f0:	2f78      	cmp	r7, #120	; 0x78
 80024f2:	4691      	mov	r9, r2
 80024f4:	4680      	mov	r8, r0
 80024f6:	460c      	mov	r4, r1
 80024f8:	469a      	mov	sl, r3
 80024fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024fe:	d807      	bhi.n	8002510 <_printf_i+0x28>
 8002500:	2f62      	cmp	r7, #98	; 0x62
 8002502:	d80a      	bhi.n	800251a <_printf_i+0x32>
 8002504:	2f00      	cmp	r7, #0
 8002506:	f000 80d4 	beq.w	80026b2 <_printf_i+0x1ca>
 800250a:	2f58      	cmp	r7, #88	; 0x58
 800250c:	f000 80c0 	beq.w	8002690 <_printf_i+0x1a8>
 8002510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002518:	e03a      	b.n	8002590 <_printf_i+0xa8>
 800251a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800251e:	2b15      	cmp	r3, #21
 8002520:	d8f6      	bhi.n	8002510 <_printf_i+0x28>
 8002522:	a101      	add	r1, pc, #4	; (adr r1, 8002528 <_printf_i+0x40>)
 8002524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002528:	08002581 	.word	0x08002581
 800252c:	08002595 	.word	0x08002595
 8002530:	08002511 	.word	0x08002511
 8002534:	08002511 	.word	0x08002511
 8002538:	08002511 	.word	0x08002511
 800253c:	08002511 	.word	0x08002511
 8002540:	08002595 	.word	0x08002595
 8002544:	08002511 	.word	0x08002511
 8002548:	08002511 	.word	0x08002511
 800254c:	08002511 	.word	0x08002511
 8002550:	08002511 	.word	0x08002511
 8002554:	08002699 	.word	0x08002699
 8002558:	080025c1 	.word	0x080025c1
 800255c:	08002653 	.word	0x08002653
 8002560:	08002511 	.word	0x08002511
 8002564:	08002511 	.word	0x08002511
 8002568:	080026bb 	.word	0x080026bb
 800256c:	08002511 	.word	0x08002511
 8002570:	080025c1 	.word	0x080025c1
 8002574:	08002511 	.word	0x08002511
 8002578:	08002511 	.word	0x08002511
 800257c:	0800265b 	.word	0x0800265b
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	1d1a      	adds	r2, r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	602a      	str	r2, [r5, #0]
 8002588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800258c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002590:	2301      	movs	r3, #1
 8002592:	e09f      	b.n	80026d4 <_printf_i+0x1ec>
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	682b      	ldr	r3, [r5, #0]
 8002598:	0607      	lsls	r7, r0, #24
 800259a:	f103 0104 	add.w	r1, r3, #4
 800259e:	6029      	str	r1, [r5, #0]
 80025a0:	d501      	bpl.n	80025a6 <_printf_i+0xbe>
 80025a2:	681e      	ldr	r6, [r3, #0]
 80025a4:	e003      	b.n	80025ae <_printf_i+0xc6>
 80025a6:	0646      	lsls	r6, r0, #25
 80025a8:	d5fb      	bpl.n	80025a2 <_printf_i+0xba>
 80025aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80025ae:	2e00      	cmp	r6, #0
 80025b0:	da03      	bge.n	80025ba <_printf_i+0xd2>
 80025b2:	232d      	movs	r3, #45	; 0x2d
 80025b4:	4276      	negs	r6, r6
 80025b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ba:	485a      	ldr	r0, [pc, #360]	; (8002724 <_printf_i+0x23c>)
 80025bc:	230a      	movs	r3, #10
 80025be:	e012      	b.n	80025e6 <_printf_i+0xfe>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	6820      	ldr	r0, [r4, #0]
 80025c4:	1d19      	adds	r1, r3, #4
 80025c6:	6029      	str	r1, [r5, #0]
 80025c8:	0605      	lsls	r5, r0, #24
 80025ca:	d501      	bpl.n	80025d0 <_printf_i+0xe8>
 80025cc:	681e      	ldr	r6, [r3, #0]
 80025ce:	e002      	b.n	80025d6 <_printf_i+0xee>
 80025d0:	0641      	lsls	r1, r0, #25
 80025d2:	d5fb      	bpl.n	80025cc <_printf_i+0xe4>
 80025d4:	881e      	ldrh	r6, [r3, #0]
 80025d6:	4853      	ldr	r0, [pc, #332]	; (8002724 <_printf_i+0x23c>)
 80025d8:	2f6f      	cmp	r7, #111	; 0x6f
 80025da:	bf0c      	ite	eq
 80025dc:	2308      	moveq	r3, #8
 80025de:	230a      	movne	r3, #10
 80025e0:	2100      	movs	r1, #0
 80025e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025e6:	6865      	ldr	r5, [r4, #4]
 80025e8:	60a5      	str	r5, [r4, #8]
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	bfa2      	ittt	ge
 80025ee:	6821      	ldrge	r1, [r4, #0]
 80025f0:	f021 0104 	bicge.w	r1, r1, #4
 80025f4:	6021      	strge	r1, [r4, #0]
 80025f6:	b90e      	cbnz	r6, 80025fc <_printf_i+0x114>
 80025f8:	2d00      	cmp	r5, #0
 80025fa:	d04b      	beq.n	8002694 <_printf_i+0x1ac>
 80025fc:	4615      	mov	r5, r2
 80025fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8002602:	fb03 6711 	mls	r7, r3, r1, r6
 8002606:	5dc7      	ldrb	r7, [r0, r7]
 8002608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800260c:	4637      	mov	r7, r6
 800260e:	42bb      	cmp	r3, r7
 8002610:	460e      	mov	r6, r1
 8002612:	d9f4      	bls.n	80025fe <_printf_i+0x116>
 8002614:	2b08      	cmp	r3, #8
 8002616:	d10b      	bne.n	8002630 <_printf_i+0x148>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	07de      	lsls	r6, r3, #31
 800261c:	d508      	bpl.n	8002630 <_printf_i+0x148>
 800261e:	6923      	ldr	r3, [r4, #16]
 8002620:	6861      	ldr	r1, [r4, #4]
 8002622:	4299      	cmp	r1, r3
 8002624:	bfde      	ittt	le
 8002626:	2330      	movle	r3, #48	; 0x30
 8002628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800262c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002630:	1b52      	subs	r2, r2, r5
 8002632:	6122      	str	r2, [r4, #16]
 8002634:	f8cd a000 	str.w	sl, [sp]
 8002638:	464b      	mov	r3, r9
 800263a:	aa03      	add	r2, sp, #12
 800263c:	4621      	mov	r1, r4
 800263e:	4640      	mov	r0, r8
 8002640:	f7ff fee4 	bl	800240c <_printf_common>
 8002644:	3001      	adds	r0, #1
 8002646:	d14a      	bne.n	80026de <_printf_i+0x1f6>
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	b004      	add	sp, #16
 800264e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	4833      	ldr	r0, [pc, #204]	; (8002728 <_printf_i+0x240>)
 800265c:	2778      	movs	r7, #120	; 0x78
 800265e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	6829      	ldr	r1, [r5, #0]
 8002666:	061f      	lsls	r7, r3, #24
 8002668:	f851 6b04 	ldr.w	r6, [r1], #4
 800266c:	d402      	bmi.n	8002674 <_printf_i+0x18c>
 800266e:	065f      	lsls	r7, r3, #25
 8002670:	bf48      	it	mi
 8002672:	b2b6      	uxthmi	r6, r6
 8002674:	07df      	lsls	r7, r3, #31
 8002676:	bf48      	it	mi
 8002678:	f043 0320 	orrmi.w	r3, r3, #32
 800267c:	6029      	str	r1, [r5, #0]
 800267e:	bf48      	it	mi
 8002680:	6023      	strmi	r3, [r4, #0]
 8002682:	b91e      	cbnz	r6, 800268c <_printf_i+0x1a4>
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	f023 0320 	bic.w	r3, r3, #32
 800268a:	6023      	str	r3, [r4, #0]
 800268c:	2310      	movs	r3, #16
 800268e:	e7a7      	b.n	80025e0 <_printf_i+0xf8>
 8002690:	4824      	ldr	r0, [pc, #144]	; (8002724 <_printf_i+0x23c>)
 8002692:	e7e4      	b.n	800265e <_printf_i+0x176>
 8002694:	4615      	mov	r5, r2
 8002696:	e7bd      	b.n	8002614 <_printf_i+0x12c>
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	6826      	ldr	r6, [r4, #0]
 800269c:	6961      	ldr	r1, [r4, #20]
 800269e:	1d18      	adds	r0, r3, #4
 80026a0:	6028      	str	r0, [r5, #0]
 80026a2:	0635      	lsls	r5, r6, #24
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	d501      	bpl.n	80026ac <_printf_i+0x1c4>
 80026a8:	6019      	str	r1, [r3, #0]
 80026aa:	e002      	b.n	80026b2 <_printf_i+0x1ca>
 80026ac:	0670      	lsls	r0, r6, #25
 80026ae:	d5fb      	bpl.n	80026a8 <_printf_i+0x1c0>
 80026b0:	8019      	strh	r1, [r3, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	6123      	str	r3, [r4, #16]
 80026b6:	4615      	mov	r5, r2
 80026b8:	e7bc      	b.n	8002634 <_printf_i+0x14c>
 80026ba:	682b      	ldr	r3, [r5, #0]
 80026bc:	1d1a      	adds	r2, r3, #4
 80026be:	602a      	str	r2, [r5, #0]
 80026c0:	681d      	ldr	r5, [r3, #0]
 80026c2:	6862      	ldr	r2, [r4, #4]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4628      	mov	r0, r5
 80026c8:	f7fd fd82 	bl	80001d0 <memchr>
 80026cc:	b108      	cbz	r0, 80026d2 <_printf_i+0x1ea>
 80026ce:	1b40      	subs	r0, r0, r5
 80026d0:	6060      	str	r0, [r4, #4]
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	6123      	str	r3, [r4, #16]
 80026d6:	2300      	movs	r3, #0
 80026d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026dc:	e7aa      	b.n	8002634 <_printf_i+0x14c>
 80026de:	6923      	ldr	r3, [r4, #16]
 80026e0:	462a      	mov	r2, r5
 80026e2:	4649      	mov	r1, r9
 80026e4:	4640      	mov	r0, r8
 80026e6:	47d0      	blx	sl
 80026e8:	3001      	adds	r0, #1
 80026ea:	d0ad      	beq.n	8002648 <_printf_i+0x160>
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	079b      	lsls	r3, r3, #30
 80026f0:	d413      	bmi.n	800271a <_printf_i+0x232>
 80026f2:	68e0      	ldr	r0, [r4, #12]
 80026f4:	9b03      	ldr	r3, [sp, #12]
 80026f6:	4298      	cmp	r0, r3
 80026f8:	bfb8      	it	lt
 80026fa:	4618      	movlt	r0, r3
 80026fc:	e7a6      	b.n	800264c <_printf_i+0x164>
 80026fe:	2301      	movs	r3, #1
 8002700:	4632      	mov	r2, r6
 8002702:	4649      	mov	r1, r9
 8002704:	4640      	mov	r0, r8
 8002706:	47d0      	blx	sl
 8002708:	3001      	adds	r0, #1
 800270a:	d09d      	beq.n	8002648 <_printf_i+0x160>
 800270c:	3501      	adds	r5, #1
 800270e:	68e3      	ldr	r3, [r4, #12]
 8002710:	9903      	ldr	r1, [sp, #12]
 8002712:	1a5b      	subs	r3, r3, r1
 8002714:	42ab      	cmp	r3, r5
 8002716:	dcf2      	bgt.n	80026fe <_printf_i+0x216>
 8002718:	e7eb      	b.n	80026f2 <_printf_i+0x20a>
 800271a:	2500      	movs	r5, #0
 800271c:	f104 0619 	add.w	r6, r4, #25
 8002720:	e7f5      	b.n	800270e <_printf_i+0x226>
 8002722:	bf00      	nop
 8002724:	08004809 	.word	0x08004809
 8002728:	0800481a 	.word	0x0800481a

0800272c <std>:
 800272c:	2300      	movs	r3, #0
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
 8002732:	e9c0 3300 	strd	r3, r3, [r0]
 8002736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800273a:	6083      	str	r3, [r0, #8]
 800273c:	8181      	strh	r1, [r0, #12]
 800273e:	6643      	str	r3, [r0, #100]	; 0x64
 8002740:	81c2      	strh	r2, [r0, #14]
 8002742:	6183      	str	r3, [r0, #24]
 8002744:	4619      	mov	r1, r3
 8002746:	2208      	movs	r2, #8
 8002748:	305c      	adds	r0, #92	; 0x5c
 800274a:	f000 f8f4 	bl	8002936 <memset>
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <std+0x58>)
 8002750:	6263      	str	r3, [r4, #36]	; 0x24
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <std+0x5c>)
 8002754:	62a3      	str	r3, [r4, #40]	; 0x28
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <std+0x60>)
 8002758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800275a:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <std+0x64>)
 800275c:	6323      	str	r3, [r4, #48]	; 0x30
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <std+0x68>)
 8002760:	6224      	str	r4, [r4, #32]
 8002762:	429c      	cmp	r4, r3
 8002764:	d006      	beq.n	8002774 <std+0x48>
 8002766:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800276a:	4294      	cmp	r4, r2
 800276c:	d002      	beq.n	8002774 <std+0x48>
 800276e:	33d0      	adds	r3, #208	; 0xd0
 8002770:	429c      	cmp	r4, r3
 8002772:	d105      	bne.n	8002780 <std+0x54>
 8002774:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277c:	f000 b958 	b.w	8002a30 <__retarget_lock_init_recursive>
 8002780:	bd10      	pop	{r4, pc}
 8002782:	bf00      	nop
 8002784:	080028b1 	.word	0x080028b1
 8002788:	080028d3 	.word	0x080028d3
 800278c:	0800290b 	.word	0x0800290b
 8002790:	0800292f 	.word	0x0800292f
 8002794:	200001f0 	.word	0x200001f0

08002798 <stdio_exit_handler>:
 8002798:	4a02      	ldr	r2, [pc, #8]	; (80027a4 <stdio_exit_handler+0xc>)
 800279a:	4903      	ldr	r1, [pc, #12]	; (80027a8 <stdio_exit_handler+0x10>)
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <stdio_exit_handler+0x14>)
 800279e:	f000 b869 	b.w	8002874 <_fwalk_sglue>
 80027a2:	bf00      	nop
 80027a4:	20000004 	.word	0x20000004
 80027a8:	08004131 	.word	0x08004131
 80027ac:	20000010 	.word	0x20000010

080027b0 <cleanup_stdio>:
 80027b0:	6841      	ldr	r1, [r0, #4]
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <cleanup_stdio+0x34>)
 80027b4:	4299      	cmp	r1, r3
 80027b6:	b510      	push	{r4, lr}
 80027b8:	4604      	mov	r4, r0
 80027ba:	d001      	beq.n	80027c0 <cleanup_stdio+0x10>
 80027bc:	f001 fcb8 	bl	8004130 <_fflush_r>
 80027c0:	68a1      	ldr	r1, [r4, #8]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <cleanup_stdio+0x38>)
 80027c4:	4299      	cmp	r1, r3
 80027c6:	d002      	beq.n	80027ce <cleanup_stdio+0x1e>
 80027c8:	4620      	mov	r0, r4
 80027ca:	f001 fcb1 	bl	8004130 <_fflush_r>
 80027ce:	68e1      	ldr	r1, [r4, #12]
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <cleanup_stdio+0x3c>)
 80027d2:	4299      	cmp	r1, r3
 80027d4:	d004      	beq.n	80027e0 <cleanup_stdio+0x30>
 80027d6:	4620      	mov	r0, r4
 80027d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027dc:	f001 bca8 	b.w	8004130 <_fflush_r>
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	bf00      	nop
 80027e4:	200001f0 	.word	0x200001f0
 80027e8:	20000258 	.word	0x20000258
 80027ec:	200002c0 	.word	0x200002c0

080027f0 <global_stdio_init.part.0>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <global_stdio_init.part.0+0x30>)
 80027f4:	4c0b      	ldr	r4, [pc, #44]	; (8002824 <global_stdio_init.part.0+0x34>)
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <global_stdio_init.part.0+0x38>)
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	4620      	mov	r0, r4
 80027fc:	2200      	movs	r2, #0
 80027fe:	2104      	movs	r1, #4
 8002800:	f7ff ff94 	bl	800272c <std>
 8002804:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002808:	2201      	movs	r2, #1
 800280a:	2109      	movs	r1, #9
 800280c:	f7ff ff8e 	bl	800272c <std>
 8002810:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002814:	2202      	movs	r2, #2
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281a:	2112      	movs	r1, #18
 800281c:	f7ff bf86 	b.w	800272c <std>
 8002820:	20000328 	.word	0x20000328
 8002824:	200001f0 	.word	0x200001f0
 8002828:	08002799 	.word	0x08002799

0800282c <__sfp_lock_acquire>:
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <__sfp_lock_acquire+0x8>)
 800282e:	f000 b900 	b.w	8002a32 <__retarget_lock_acquire_recursive>
 8002832:	bf00      	nop
 8002834:	20000331 	.word	0x20000331

08002838 <__sfp_lock_release>:
 8002838:	4801      	ldr	r0, [pc, #4]	; (8002840 <__sfp_lock_release+0x8>)
 800283a:	f000 b8fb 	b.w	8002a34 <__retarget_lock_release_recursive>
 800283e:	bf00      	nop
 8002840:	20000331 	.word	0x20000331

08002844 <__sinit>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	f7ff fff0 	bl	800282c <__sfp_lock_acquire>
 800284c:	6a23      	ldr	r3, [r4, #32]
 800284e:	b11b      	cbz	r3, 8002858 <__sinit+0x14>
 8002850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002854:	f7ff bff0 	b.w	8002838 <__sfp_lock_release>
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__sinit+0x28>)
 800285a:	6223      	str	r3, [r4, #32]
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__sinit+0x2c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f5      	bne.n	8002850 <__sinit+0xc>
 8002864:	f7ff ffc4 	bl	80027f0 <global_stdio_init.part.0>
 8002868:	e7f2      	b.n	8002850 <__sinit+0xc>
 800286a:	bf00      	nop
 800286c:	080027b1 	.word	0x080027b1
 8002870:	20000328 	.word	0x20000328

08002874 <_fwalk_sglue>:
 8002874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002878:	4607      	mov	r7, r0
 800287a:	4688      	mov	r8, r1
 800287c:	4614      	mov	r4, r2
 800287e:	2600      	movs	r6, #0
 8002880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002884:	f1b9 0901 	subs.w	r9, r9, #1
 8002888:	d505      	bpl.n	8002896 <_fwalk_sglue+0x22>
 800288a:	6824      	ldr	r4, [r4, #0]
 800288c:	2c00      	cmp	r4, #0
 800288e:	d1f7      	bne.n	8002880 <_fwalk_sglue+0xc>
 8002890:	4630      	mov	r0, r6
 8002892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002896:	89ab      	ldrh	r3, [r5, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d907      	bls.n	80028ac <_fwalk_sglue+0x38>
 800289c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028a0:	3301      	adds	r3, #1
 80028a2:	d003      	beq.n	80028ac <_fwalk_sglue+0x38>
 80028a4:	4629      	mov	r1, r5
 80028a6:	4638      	mov	r0, r7
 80028a8:	47c0      	blx	r8
 80028aa:	4306      	orrs	r6, r0
 80028ac:	3568      	adds	r5, #104	; 0x68
 80028ae:	e7e9      	b.n	8002884 <_fwalk_sglue+0x10>

080028b0 <__sread>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	460c      	mov	r4, r1
 80028b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b8:	f000 f86c 	bl	8002994 <_read_r>
 80028bc:	2800      	cmp	r0, #0
 80028be:	bfab      	itete	ge
 80028c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028c2:	89a3      	ldrhlt	r3, [r4, #12]
 80028c4:	181b      	addge	r3, r3, r0
 80028c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028ca:	bfac      	ite	ge
 80028cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80028ce:	81a3      	strhlt	r3, [r4, #12]
 80028d0:	bd10      	pop	{r4, pc}

080028d2 <__swrite>:
 80028d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d6:	461f      	mov	r7, r3
 80028d8:	898b      	ldrh	r3, [r1, #12]
 80028da:	05db      	lsls	r3, r3, #23
 80028dc:	4605      	mov	r5, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	4616      	mov	r6, r2
 80028e2:	d505      	bpl.n	80028f0 <__swrite+0x1e>
 80028e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e8:	2302      	movs	r3, #2
 80028ea:	2200      	movs	r2, #0
 80028ec:	f000 f840 	bl	8002970 <_lseek_r>
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	4632      	mov	r2, r6
 80028fe:	463b      	mov	r3, r7
 8002900:	4628      	mov	r0, r5
 8002902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002906:	f000 b857 	b.w	80029b8 <_write_r>

0800290a <__sseek>:
 800290a:	b510      	push	{r4, lr}
 800290c:	460c      	mov	r4, r1
 800290e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002912:	f000 f82d 	bl	8002970 <_lseek_r>
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	bf15      	itete	ne
 800291c:	6560      	strne	r0, [r4, #84]	; 0x54
 800291e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002926:	81a3      	strheq	r3, [r4, #12]
 8002928:	bf18      	it	ne
 800292a:	81a3      	strhne	r3, [r4, #12]
 800292c:	bd10      	pop	{r4, pc}

0800292e <__sclose>:
 800292e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002932:	f000 b80d 	b.w	8002950 <_close_r>

08002936 <memset>:
 8002936:	4402      	add	r2, r0
 8002938:	4603      	mov	r3, r0
 800293a:	4293      	cmp	r3, r2
 800293c:	d100      	bne.n	8002940 <memset+0xa>
 800293e:	4770      	bx	lr
 8002940:	f803 1b01 	strb.w	r1, [r3], #1
 8002944:	e7f9      	b.n	800293a <memset+0x4>
	...

08002948 <_localeconv_r>:
 8002948:	4800      	ldr	r0, [pc, #0]	; (800294c <_localeconv_r+0x4>)
 800294a:	4770      	bx	lr
 800294c:	20000150 	.word	0x20000150

08002950 <_close_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	4d06      	ldr	r5, [pc, #24]	; (800296c <_close_r+0x1c>)
 8002954:	2300      	movs	r3, #0
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	602b      	str	r3, [r5, #0]
 800295c:	f7ff f9ab 	bl	8001cb6 <_close>
 8002960:	1c43      	adds	r3, r0, #1
 8002962:	d102      	bne.n	800296a <_close_r+0x1a>
 8002964:	682b      	ldr	r3, [r5, #0]
 8002966:	b103      	cbz	r3, 800296a <_close_r+0x1a>
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	2000032c 	.word	0x2000032c

08002970 <_lseek_r>:
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4d07      	ldr	r5, [pc, #28]	; (8002990 <_lseek_r+0x20>)
 8002974:	4604      	mov	r4, r0
 8002976:	4608      	mov	r0, r1
 8002978:	4611      	mov	r1, r2
 800297a:	2200      	movs	r2, #0
 800297c:	602a      	str	r2, [r5, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	f7ff f9c0 	bl	8001d04 <_lseek>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_lseek_r+0x1e>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_lseek_r+0x1e>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	2000032c 	.word	0x2000032c

08002994 <_read_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d07      	ldr	r5, [pc, #28]	; (80029b4 <_read_r+0x20>)
 8002998:	4604      	mov	r4, r0
 800299a:	4608      	mov	r0, r1
 800299c:	4611      	mov	r1, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	602a      	str	r2, [r5, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff f94e 	bl	8001c44 <_read>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d102      	bne.n	80029b2 <_read_r+0x1e>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	b103      	cbz	r3, 80029b2 <_read_r+0x1e>
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	2000032c 	.word	0x2000032c

080029b8 <_write_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4d07      	ldr	r5, [pc, #28]	; (80029d8 <_write_r+0x20>)
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	602a      	str	r2, [r5, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7ff f959 	bl	8001c7e <_write>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_write_r+0x1e>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_write_r+0x1e>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	2000032c 	.word	0x2000032c

080029dc <__errno>:
 80029dc:	4b01      	ldr	r3, [pc, #4]	; (80029e4 <__errno+0x8>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	2000005c 	.word	0x2000005c

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4d0d      	ldr	r5, [pc, #52]	; (8002a20 <__libc_init_array+0x38>)
 80029ec:	4c0d      	ldr	r4, [pc, #52]	; (8002a24 <__libc_init_array+0x3c>)
 80029ee:	1b64      	subs	r4, r4, r5
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	2600      	movs	r6, #0
 80029f4:	42a6      	cmp	r6, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	4d0b      	ldr	r5, [pc, #44]	; (8002a28 <__libc_init_array+0x40>)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	; (8002a2c <__libc_init_array+0x44>)
 80029fc:	f001 feec 	bl	80047d8 <_init>
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	2600      	movs	r6, #0
 8002a06:	42a6      	cmp	r6, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a10:	4798      	blx	r3
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1a:	4798      	blx	r3
 8002a1c:	3601      	adds	r6, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08004b6c 	.word	0x08004b6c
 8002a24:	08004b6c 	.word	0x08004b6c
 8002a28:	08004b6c 	.word	0x08004b6c
 8002a2c:	08004b70 	.word	0x08004b70

08002a30 <__retarget_lock_init_recursive>:
 8002a30:	4770      	bx	lr

08002a32 <__retarget_lock_acquire_recursive>:
 8002a32:	4770      	bx	lr

08002a34 <__retarget_lock_release_recursive>:
 8002a34:	4770      	bx	lr

08002a36 <quorem>:
 8002a36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a3a:	6903      	ldr	r3, [r0, #16]
 8002a3c:	690c      	ldr	r4, [r1, #16]
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	4607      	mov	r7, r0
 8002a42:	db7e      	blt.n	8002b42 <quorem+0x10c>
 8002a44:	3c01      	subs	r4, #1
 8002a46:	f101 0814 	add.w	r8, r1, #20
 8002a4a:	f100 0514 	add.w	r5, r0, #20
 8002a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a6c:	d331      	bcc.n	8002ad2 <quorem+0x9c>
 8002a6e:	f04f 0e00 	mov.w	lr, #0
 8002a72:	4640      	mov	r0, r8
 8002a74:	46ac      	mov	ip, r5
 8002a76:	46f2      	mov	sl, lr
 8002a78:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a7c:	b293      	uxth	r3, r2
 8002a7e:	fb06 e303 	mla	r3, r6, r3, lr
 8002a82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002a86:	0c1a      	lsrs	r2, r3, #16
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	ebaa 0303 	sub.w	r3, sl, r3
 8002a8e:	f8dc a000 	ldr.w	sl, [ip]
 8002a92:	fa13 f38a 	uxtah	r3, r3, sl
 8002a96:	fb06 220e 	mla	r2, r6, lr, r2
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	9b00      	ldr	r3, [sp, #0]
 8002a9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002aac:	f8bd 3000 	ldrh.w	r3, [sp]
 8002ab0:	4581      	cmp	r9, r0
 8002ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ab6:	f84c 3b04 	str.w	r3, [ip], #4
 8002aba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002abe:	d2db      	bcs.n	8002a78 <quorem+0x42>
 8002ac0:	f855 300b 	ldr.w	r3, [r5, fp]
 8002ac4:	b92b      	cbnz	r3, 8002ad2 <quorem+0x9c>
 8002ac6:	9b01      	ldr	r3, [sp, #4]
 8002ac8:	3b04      	subs	r3, #4
 8002aca:	429d      	cmp	r5, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	d32c      	bcc.n	8002b2a <quorem+0xf4>
 8002ad0:	613c      	str	r4, [r7, #16]
 8002ad2:	4638      	mov	r0, r7
 8002ad4:	f001 f9a6 	bl	8003e24 <__mcmp>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	db22      	blt.n	8002b22 <quorem+0xec>
 8002adc:	3601      	adds	r6, #1
 8002ade:	4629      	mov	r1, r5
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f858 2b04 	ldr.w	r2, [r8], #4
 8002ae6:	f8d1 c000 	ldr.w	ip, [r1]
 8002aea:	b293      	uxth	r3, r2
 8002aec:	1ac3      	subs	r3, r0, r3
 8002aee:	0c12      	lsrs	r2, r2, #16
 8002af0:	fa13 f38c 	uxtah	r3, r3, ip
 8002af4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002af8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b02:	45c1      	cmp	r9, r8
 8002b04:	f841 3b04 	str.w	r3, [r1], #4
 8002b08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002b0c:	d2e9      	bcs.n	8002ae2 <quorem+0xac>
 8002b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b16:	b922      	cbnz	r2, 8002b22 <quorem+0xec>
 8002b18:	3b04      	subs	r3, #4
 8002b1a:	429d      	cmp	r5, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	d30a      	bcc.n	8002b36 <quorem+0x100>
 8002b20:	613c      	str	r4, [r7, #16]
 8002b22:	4630      	mov	r0, r6
 8002b24:	b003      	add	sp, #12
 8002b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	3b04      	subs	r3, #4
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d1ce      	bne.n	8002ad0 <quorem+0x9a>
 8002b32:	3c01      	subs	r4, #1
 8002b34:	e7c9      	b.n	8002aca <quorem+0x94>
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	3b04      	subs	r3, #4
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d1f0      	bne.n	8002b20 <quorem+0xea>
 8002b3e:	3c01      	subs	r4, #1
 8002b40:	e7eb      	b.n	8002b1a <quorem+0xe4>
 8002b42:	2000      	movs	r0, #0
 8002b44:	e7ee      	b.n	8002b24 <quorem+0xee>
	...

08002b48 <_dtoa_r>:
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	ed2d 8b04 	vpush	{d8-d9}
 8002b50:	69c5      	ldr	r5, [r0, #28]
 8002b52:	b093      	sub	sp, #76	; 0x4c
 8002b54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002b58:	ec57 6b10 	vmov	r6, r7, d0
 8002b5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002b60:	9107      	str	r1, [sp, #28]
 8002b62:	4604      	mov	r4, r0
 8002b64:	920a      	str	r2, [sp, #40]	; 0x28
 8002b66:	930d      	str	r3, [sp, #52]	; 0x34
 8002b68:	b975      	cbnz	r5, 8002b88 <_dtoa_r+0x40>
 8002b6a:	2010      	movs	r0, #16
 8002b6c:	f000 fe2a 	bl	80037c4 <malloc>
 8002b70:	4602      	mov	r2, r0
 8002b72:	61e0      	str	r0, [r4, #28]
 8002b74:	b920      	cbnz	r0, 8002b80 <_dtoa_r+0x38>
 8002b76:	4bae      	ldr	r3, [pc, #696]	; (8002e30 <_dtoa_r+0x2e8>)
 8002b78:	21ef      	movs	r1, #239	; 0xef
 8002b7a:	48ae      	ldr	r0, [pc, #696]	; (8002e34 <_dtoa_r+0x2ec>)
 8002b7c:	f001 fb1e 	bl	80041bc <__assert_func>
 8002b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b84:	6005      	str	r5, [r0, #0]
 8002b86:	60c5      	str	r5, [r0, #12]
 8002b88:	69e3      	ldr	r3, [r4, #28]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	b151      	cbz	r1, 8002ba4 <_dtoa_r+0x5c>
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	604a      	str	r2, [r1, #4]
 8002b92:	2301      	movs	r3, #1
 8002b94:	4093      	lsls	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 ff07 	bl	80039ac <_Bfree>
 8002b9e:	69e3      	ldr	r3, [r4, #28]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	1e3b      	subs	r3, r7, #0
 8002ba6:	bfbb      	ittet	lt
 8002ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002bac:	9303      	strlt	r3, [sp, #12]
 8002bae:	2300      	movge	r3, #0
 8002bb0:	2201      	movlt	r2, #1
 8002bb2:	bfac      	ite	ge
 8002bb4:	f8c8 3000 	strge.w	r3, [r8]
 8002bb8:	f8c8 2000 	strlt.w	r2, [r8]
 8002bbc:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <_dtoa_r+0x2f0>)
 8002bbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002bc2:	ea33 0308 	bics.w	r3, r3, r8
 8002bc6:	d11b      	bne.n	8002c00 <_dtoa_r+0xb8>
 8002bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002bca:	f242 730f 	movw	r3, #9999	; 0x270f
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002bd4:	4333      	orrs	r3, r6
 8002bd6:	f000 8593 	beq.w	8003700 <_dtoa_r+0xbb8>
 8002bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bdc:	b963      	cbnz	r3, 8002bf8 <_dtoa_r+0xb0>
 8002bde:	4b97      	ldr	r3, [pc, #604]	; (8002e3c <_dtoa_r+0x2f4>)
 8002be0:	e027      	b.n	8002c32 <_dtoa_r+0xea>
 8002be2:	4b97      	ldr	r3, [pc, #604]	; (8002e40 <_dtoa_r+0x2f8>)
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	3308      	adds	r3, #8
 8002be8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	9800      	ldr	r0, [sp, #0]
 8002bee:	b013      	add	sp, #76	; 0x4c
 8002bf0:	ecbd 8b04 	vpop	{d8-d9}
 8002bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf8:	4b90      	ldr	r3, [pc, #576]	; (8002e3c <_dtoa_r+0x2f4>)
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	3303      	adds	r3, #3
 8002bfe:	e7f3      	b.n	8002be8 <_dtoa_r+0xa0>
 8002c00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	ec51 0b17 	vmov	r0, r1, d7
 8002c0a:	eeb0 8a47 	vmov.f32	s16, s14
 8002c0e:	eef0 8a67 	vmov.f32	s17, s15
 8002c12:	2300      	movs	r3, #0
 8002c14:	f7fd ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c18:	4681      	mov	r9, r0
 8002c1a:	b160      	cbz	r0, 8002c36 <_dtoa_r+0xee>
 8002c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8568 	beq.w	80036fa <_dtoa_r+0xbb2>
 8002c2a:	4b86      	ldr	r3, [pc, #536]	; (8002e44 <_dtoa_r+0x2fc>)
 8002c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	e7da      	b.n	8002bec <_dtoa_r+0xa4>
 8002c36:	aa10      	add	r2, sp, #64	; 0x40
 8002c38:	a911      	add	r1, sp, #68	; 0x44
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8002c40:	eef0 0a68 	vmov.f32	s1, s17
 8002c44:	f001 f994 	bl	8003f70 <__d2b>
 8002c48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002c4c:	4682      	mov	sl, r0
 8002c4e:	2d00      	cmp	r5, #0
 8002c50:	d07f      	beq.n	8002d52 <_dtoa_r+0x20a>
 8002c52:	ee18 3a90 	vmov	r3, s17
 8002c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002c5e:	ec51 0b18 	vmov	r0, r1, d8
 8002c62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002c6e:	4619      	mov	r1, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <_dtoa_r+0x300>)
 8002c74:	f7fd fb08 	bl	8000288 <__aeabi_dsub>
 8002c78:	a367      	add	r3, pc, #412	; (adr r3, 8002e18 <_dtoa_r+0x2d0>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fcbb 	bl	80005f8 <__aeabi_dmul>
 8002c82:	a367      	add	r3, pc, #412	; (adr r3, 8002e20 <_dtoa_r+0x2d8>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fb00 	bl	800028c <__adddf3>
 8002c8c:	4606      	mov	r6, r0
 8002c8e:	4628      	mov	r0, r5
 8002c90:	460f      	mov	r7, r1
 8002c92:	f7fd fc47 	bl	8000524 <__aeabi_i2d>
 8002c96:	a364      	add	r3, pc, #400	; (adr r3, 8002e28 <_dtoa_r+0x2e0>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fcac 	bl	80005f8 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	4639      	mov	r1, r7
 8002ca8:	f7fd faf0 	bl	800028c <__adddf3>
 8002cac:	4606      	mov	r6, r0
 8002cae:	460f      	mov	r7, r1
 8002cb0:	f7fd ff52 	bl	8000b58 <__aeabi_d2iz>
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4683      	mov	fp, r0
 8002cb8:	2300      	movs	r3, #0
 8002cba:	4630      	mov	r0, r6
 8002cbc:	4639      	mov	r1, r7
 8002cbe:	f7fd ff0d 	bl	8000adc <__aeabi_dcmplt>
 8002cc2:	b148      	cbz	r0, 8002cd8 <_dtoa_r+0x190>
 8002cc4:	4658      	mov	r0, fp
 8002cc6:	f7fd fc2d 	bl	8000524 <__aeabi_i2d>
 8002cca:	4632      	mov	r2, r6
 8002ccc:	463b      	mov	r3, r7
 8002cce:	f7fd fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8002cd2:	b908      	cbnz	r0, 8002cd8 <_dtoa_r+0x190>
 8002cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002cd8:	f1bb 0f16 	cmp.w	fp, #22
 8002cdc:	d857      	bhi.n	8002d8e <_dtoa_r+0x246>
 8002cde:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <_dtoa_r+0x304>)
 8002ce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	ec51 0b18 	vmov	r0, r1, d8
 8002cec:	f7fd fef6 	bl	8000adc <__aeabi_dcmplt>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d04e      	beq.n	8002d92 <_dtoa_r+0x24a>
 8002cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8002cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cfe:	1b5b      	subs	r3, r3, r5
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	bf45      	ittet	mi
 8002d04:	f1c3 0301 	rsbmi	r3, r3, #1
 8002d08:	9305      	strmi	r3, [sp, #20]
 8002d0a:	2300      	movpl	r3, #0
 8002d0c:	2300      	movmi	r3, #0
 8002d0e:	9206      	str	r2, [sp, #24]
 8002d10:	bf54      	ite	pl
 8002d12:	9305      	strpl	r3, [sp, #20]
 8002d14:	9306      	strmi	r3, [sp, #24]
 8002d16:	f1bb 0f00 	cmp.w	fp, #0
 8002d1a:	db3c      	blt.n	8002d96 <_dtoa_r+0x24e>
 8002d1c:	9b06      	ldr	r3, [sp, #24]
 8002d1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002d22:	445b      	add	r3, fp
 8002d24:	9306      	str	r3, [sp, #24]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9308      	str	r3, [sp, #32]
 8002d2a:	9b07      	ldr	r3, [sp, #28]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d868      	bhi.n	8002e02 <_dtoa_r+0x2ba>
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	bfc4      	itt	gt
 8002d34:	3b04      	subgt	r3, #4
 8002d36:	9307      	strgt	r3, [sp, #28]
 8002d38:	9b07      	ldr	r3, [sp, #28]
 8002d3a:	f1a3 0302 	sub.w	r3, r3, #2
 8002d3e:	bfcc      	ite	gt
 8002d40:	2500      	movgt	r5, #0
 8002d42:	2501      	movle	r5, #1
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	f200 8085 	bhi.w	8002e54 <_dtoa_r+0x30c>
 8002d4a:	e8df f003 	tbb	[pc, r3]
 8002d4e:	3b2e      	.short	0x3b2e
 8002d50:	5839      	.short	0x5839
 8002d52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002d56:	441d      	add	r5, r3
 8002d58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	bfc1      	itttt	gt
 8002d60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d64:	fa08 f803 	lslgt.w	r8, r8, r3
 8002d68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8002d6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8002d70:	bfd6      	itet	le
 8002d72:	f1c3 0320 	rsble	r3, r3, #32
 8002d76:	ea48 0003 	orrgt.w	r0, r8, r3
 8002d7a:	fa06 f003 	lslle.w	r0, r6, r3
 8002d7e:	f7fd fbc1 	bl	8000504 <__aeabi_ui2d>
 8002d82:	2201      	movs	r2, #1
 8002d84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8002d88:	3d01      	subs	r5, #1
 8002d8a:	920e      	str	r2, [sp, #56]	; 0x38
 8002d8c:	e76f      	b.n	8002c6e <_dtoa_r+0x126>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e7b3      	b.n	8002cfa <_dtoa_r+0x1b2>
 8002d92:	900c      	str	r0, [sp, #48]	; 0x30
 8002d94:	e7b2      	b.n	8002cfc <_dtoa_r+0x1b4>
 8002d96:	9b05      	ldr	r3, [sp, #20]
 8002d98:	eba3 030b 	sub.w	r3, r3, fp
 8002d9c:	9305      	str	r3, [sp, #20]
 8002d9e:	f1cb 0300 	rsb	r3, fp, #0
 8002da2:	9308      	str	r3, [sp, #32]
 8002da4:	2300      	movs	r3, #0
 8002da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002da8:	e7bf      	b.n	8002d2a <_dtoa_r+0x1e2>
 8002daa:	2300      	movs	r3, #0
 8002dac:	9309      	str	r3, [sp, #36]	; 0x24
 8002dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	dc52      	bgt.n	8002e5a <_dtoa_r+0x312>
 8002db4:	2301      	movs	r3, #1
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	9304      	str	r3, [sp, #16]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	920a      	str	r2, [sp, #40]	; 0x28
 8002dbe:	e00b      	b.n	8002dd8 <_dtoa_r+0x290>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e7f3      	b.n	8002dac <_dtoa_r+0x264>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8002dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dca:	445b      	add	r3, fp
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	bfb8      	it	lt
 8002dd6:	2301      	movlt	r3, #1
 8002dd8:	69e0      	ldr	r0, [r4, #28]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2204      	movs	r2, #4
 8002dde:	f102 0614 	add.w	r6, r2, #20
 8002de2:	429e      	cmp	r6, r3
 8002de4:	d93d      	bls.n	8002e62 <_dtoa_r+0x31a>
 8002de6:	6041      	str	r1, [r0, #4]
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 fd9f 	bl	800392c <_Balloc>
 8002dee:	9000      	str	r0, [sp, #0]
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d139      	bne.n	8002e68 <_dtoa_r+0x320>
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <_dtoa_r+0x308>)
 8002df6:	4602      	mov	r2, r0
 8002df8:	f240 11af 	movw	r1, #431	; 0x1af
 8002dfc:	e6bd      	b.n	8002b7a <_dtoa_r+0x32>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e7e1      	b.n	8002dc6 <_dtoa_r+0x27e>
 8002e02:	2501      	movs	r5, #1
 8002e04:	2300      	movs	r3, #0
 8002e06:	9307      	str	r3, [sp, #28]
 8002e08:	9509      	str	r5, [sp, #36]	; 0x24
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	9304      	str	r3, [sp, #16]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2312      	movs	r3, #18
 8002e16:	e7d1      	b.n	8002dbc <_dtoa_r+0x274>
 8002e18:	636f4361 	.word	0x636f4361
 8002e1c:	3fd287a7 	.word	0x3fd287a7
 8002e20:	8b60c8b3 	.word	0x8b60c8b3
 8002e24:	3fc68a28 	.word	0x3fc68a28
 8002e28:	509f79fb 	.word	0x509f79fb
 8002e2c:	3fd34413 	.word	0x3fd34413
 8002e30:	08004838 	.word	0x08004838
 8002e34:	0800484f 	.word	0x0800484f
 8002e38:	7ff00000 	.word	0x7ff00000
 8002e3c:	08004834 	.word	0x08004834
 8002e40:	0800482b 	.word	0x0800482b
 8002e44:	08004808 	.word	0x08004808
 8002e48:	3ff80000 	.word	0x3ff80000
 8002e4c:	08004940 	.word	0x08004940
 8002e50:	080048a7 	.word	0x080048a7
 8002e54:	2301      	movs	r3, #1
 8002e56:	9309      	str	r3, [sp, #36]	; 0x24
 8002e58:	e7d7      	b.n	8002e0a <_dtoa_r+0x2c2>
 8002e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	e7ba      	b.n	8002dd8 <_dtoa_r+0x290>
 8002e62:	3101      	adds	r1, #1
 8002e64:	0052      	lsls	r2, r2, #1
 8002e66:	e7ba      	b.n	8002dde <_dtoa_r+0x296>
 8002e68:	69e3      	ldr	r3, [r4, #28]
 8002e6a:	9a00      	ldr	r2, [sp, #0]
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	9b04      	ldr	r3, [sp, #16]
 8002e70:	2b0e      	cmp	r3, #14
 8002e72:	f200 80a8 	bhi.w	8002fc6 <_dtoa_r+0x47e>
 8002e76:	2d00      	cmp	r5, #0
 8002e78:	f000 80a5 	beq.w	8002fc6 <_dtoa_r+0x47e>
 8002e7c:	f1bb 0f00 	cmp.w	fp, #0
 8002e80:	dd38      	ble.n	8002ef4 <_dtoa_r+0x3ac>
 8002e82:	4bc0      	ldr	r3, [pc, #768]	; (8003184 <_dtoa_r+0x63c>)
 8002e84:	f00b 020f 	and.w	r2, fp, #15
 8002e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8002e90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002e94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8002e98:	d019      	beq.n	8002ece <_dtoa_r+0x386>
 8002e9a:	4bbb      	ldr	r3, [pc, #748]	; (8003188 <_dtoa_r+0x640>)
 8002e9c:	ec51 0b18 	vmov	r0, r1, d8
 8002ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ea4:	f7fd fcd2 	bl	800084c <__aeabi_ddiv>
 8002ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eac:	f008 080f 	and.w	r8, r8, #15
 8002eb0:	2503      	movs	r5, #3
 8002eb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003188 <_dtoa_r+0x640>
 8002eb6:	f1b8 0f00 	cmp.w	r8, #0
 8002eba:	d10a      	bne.n	8002ed2 <_dtoa_r+0x38a>
 8002ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	f7fd fcc2 	bl	800084c <__aeabi_ddiv>
 8002ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ecc:	e02b      	b.n	8002f26 <_dtoa_r+0x3de>
 8002ece:	2502      	movs	r5, #2
 8002ed0:	e7ef      	b.n	8002eb2 <_dtoa_r+0x36a>
 8002ed2:	f018 0f01 	tst.w	r8, #1
 8002ed6:	d008      	beq.n	8002eea <_dtoa_r+0x3a2>
 8002ed8:	4630      	mov	r0, r6
 8002eda:	4639      	mov	r1, r7
 8002edc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002ee0:	f7fd fb8a 	bl	80005f8 <__aeabi_dmul>
 8002ee4:	3501      	adds	r5, #1
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	460f      	mov	r7, r1
 8002eea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8002eee:	f109 0908 	add.w	r9, r9, #8
 8002ef2:	e7e0      	b.n	8002eb6 <_dtoa_r+0x36e>
 8002ef4:	f000 809f 	beq.w	8003036 <_dtoa_r+0x4ee>
 8002ef8:	f1cb 0600 	rsb	r6, fp, #0
 8002efc:	4ba1      	ldr	r3, [pc, #644]	; (8003184 <_dtoa_r+0x63c>)
 8002efe:	4fa2      	ldr	r7, [pc, #648]	; (8003188 <_dtoa_r+0x640>)
 8002f00:	f006 020f 	and.w	r2, r6, #15
 8002f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	ec51 0b18 	vmov	r0, r1, d8
 8002f10:	f7fd fb72 	bl	80005f8 <__aeabi_dmul>
 8002f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f18:	1136      	asrs	r6, r6, #4
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2502      	movs	r5, #2
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d17e      	bne.n	8003020 <_dtoa_r+0x4d8>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d0      	bne.n	8002ec8 <_dtoa_r+0x380>
 8002f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8084 	beq.w	800303a <_dtoa_r+0x4f2>
 8002f32:	4b96      	ldr	r3, [pc, #600]	; (800318c <_dtoa_r+0x644>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f7fd fdcf 	bl	8000adc <__aeabi_dcmplt>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d07b      	beq.n	800303a <_dtoa_r+0x4f2>
 8002f42:	9b04      	ldr	r3, [sp, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d078      	beq.n	800303a <_dtoa_r+0x4f2>
 8002f48:	9b01      	ldr	r3, [sp, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dd39      	ble.n	8002fc2 <_dtoa_r+0x47a>
 8002f4e:	4b90      	ldr	r3, [pc, #576]	; (8003190 <_dtoa_r+0x648>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	4640      	mov	r0, r8
 8002f54:	4649      	mov	r1, r9
 8002f56:	f7fd fb4f 	bl	80005f8 <__aeabi_dmul>
 8002f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f5e:	9e01      	ldr	r6, [sp, #4]
 8002f60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002f64:	3501      	adds	r5, #1
 8002f66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f7fd fada 	bl	8000524 <__aeabi_i2d>
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	f7fd fb40 	bl	80005f8 <__aeabi_dmul>
 8002f78:	4b86      	ldr	r3, [pc, #536]	; (8003194 <_dtoa_r+0x64c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f7fd f986 	bl	800028c <__adddf3>
 8002f80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8002f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f88:	9303      	str	r3, [sp, #12]
 8002f8a:	2e00      	cmp	r6, #0
 8002f8c:	d158      	bne.n	8003040 <_dtoa_r+0x4f8>
 8002f8e:	4b82      	ldr	r3, [pc, #520]	; (8003198 <_dtoa_r+0x650>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	4640      	mov	r0, r8
 8002f94:	4649      	mov	r1, r9
 8002f96:	f7fd f977 	bl	8000288 <__aeabi_dsub>
 8002f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f9e:	4680      	mov	r8, r0
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	f7fd fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	f040 8296 	bne.w	80034d8 <_dtoa_r+0x990>
 8002fac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8002fb0:	4640      	mov	r0, r8
 8002fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd fd90 	bl	8000adc <__aeabi_dcmplt>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	f040 8289 	bne.w	80034d4 <_dtoa_r+0x98c>
 8002fc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f2c0 814e 	blt.w	800326a <_dtoa_r+0x722>
 8002fce:	f1bb 0f0e 	cmp.w	fp, #14
 8002fd2:	f300 814a 	bgt.w	800326a <_dtoa_r+0x722>
 8002fd6:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <_dtoa_r+0x63c>)
 8002fd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f280 80dc 	bge.w	80031a0 <_dtoa_r+0x658>
 8002fe8:	9b04      	ldr	r3, [sp, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f300 80d8 	bgt.w	80031a0 <_dtoa_r+0x658>
 8002ff0:	f040 826f 	bne.w	80034d2 <_dtoa_r+0x98a>
 8002ff4:	4b68      	ldr	r3, [pc, #416]	; (8003198 <_dtoa_r+0x650>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	f7fd fafc 	bl	80005f8 <__aeabi_dmul>
 8003000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003004:	f7fd fd7e 	bl	8000b04 <__aeabi_dcmpge>
 8003008:	9e04      	ldr	r6, [sp, #16]
 800300a:	4637      	mov	r7, r6
 800300c:	2800      	cmp	r0, #0
 800300e:	f040 8245 	bne.w	800349c <_dtoa_r+0x954>
 8003012:	9d00      	ldr	r5, [sp, #0]
 8003014:	2331      	movs	r3, #49	; 0x31
 8003016:	f805 3b01 	strb.w	r3, [r5], #1
 800301a:	f10b 0b01 	add.w	fp, fp, #1
 800301e:	e241      	b.n	80034a4 <_dtoa_r+0x95c>
 8003020:	07f2      	lsls	r2, r6, #31
 8003022:	d505      	bpl.n	8003030 <_dtoa_r+0x4e8>
 8003024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003028:	f7fd fae6 	bl	80005f8 <__aeabi_dmul>
 800302c:	3501      	adds	r5, #1
 800302e:	2301      	movs	r3, #1
 8003030:	1076      	asrs	r6, r6, #1
 8003032:	3708      	adds	r7, #8
 8003034:	e773      	b.n	8002f1e <_dtoa_r+0x3d6>
 8003036:	2502      	movs	r5, #2
 8003038:	e775      	b.n	8002f26 <_dtoa_r+0x3de>
 800303a:	9e04      	ldr	r6, [sp, #16]
 800303c:	465f      	mov	r7, fp
 800303e:	e792      	b.n	8002f66 <_dtoa_r+0x41e>
 8003040:	9900      	ldr	r1, [sp, #0]
 8003042:	4b50      	ldr	r3, [pc, #320]	; (8003184 <_dtoa_r+0x63c>)
 8003044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003048:	4431      	add	r1, r6
 800304a:	9102      	str	r1, [sp, #8]
 800304c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800304e:	eeb0 9a47 	vmov.f32	s18, s14
 8003052:	eef0 9a67 	vmov.f32	s19, s15
 8003056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800305a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800305e:	2900      	cmp	r1, #0
 8003060:	d044      	beq.n	80030ec <_dtoa_r+0x5a4>
 8003062:	494e      	ldr	r1, [pc, #312]	; (800319c <_dtoa_r+0x654>)
 8003064:	2000      	movs	r0, #0
 8003066:	f7fd fbf1 	bl	800084c <__aeabi_ddiv>
 800306a:	ec53 2b19 	vmov	r2, r3, d9
 800306e:	f7fd f90b 	bl	8000288 <__aeabi_dsub>
 8003072:	9d00      	ldr	r5, [sp, #0]
 8003074:	ec41 0b19 	vmov	d9, r0, r1
 8003078:	4649      	mov	r1, r9
 800307a:	4640      	mov	r0, r8
 800307c:	f7fd fd6c 	bl	8000b58 <__aeabi_d2iz>
 8003080:	4606      	mov	r6, r0
 8003082:	f7fd fa4f 	bl	8000524 <__aeabi_i2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4640      	mov	r0, r8
 800308c:	4649      	mov	r1, r9
 800308e:	f7fd f8fb 	bl	8000288 <__aeabi_dsub>
 8003092:	3630      	adds	r6, #48	; 0x30
 8003094:	f805 6b01 	strb.w	r6, [r5], #1
 8003098:	ec53 2b19 	vmov	r2, r3, d9
 800309c:	4680      	mov	r8, r0
 800309e:	4689      	mov	r9, r1
 80030a0:	f7fd fd1c 	bl	8000adc <__aeabi_dcmplt>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d164      	bne.n	8003172 <_dtoa_r+0x62a>
 80030a8:	4642      	mov	r2, r8
 80030aa:	464b      	mov	r3, r9
 80030ac:	4937      	ldr	r1, [pc, #220]	; (800318c <_dtoa_r+0x644>)
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd f8ea 	bl	8000288 <__aeabi_dsub>
 80030b4:	ec53 2b19 	vmov	r2, r3, d9
 80030b8:	f7fd fd10 	bl	8000adc <__aeabi_dcmplt>
 80030bc:	2800      	cmp	r0, #0
 80030be:	f040 80b6 	bne.w	800322e <_dtoa_r+0x6e6>
 80030c2:	9b02      	ldr	r3, [sp, #8]
 80030c4:	429d      	cmp	r5, r3
 80030c6:	f43f af7c 	beq.w	8002fc2 <_dtoa_r+0x47a>
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <_dtoa_r+0x648>)
 80030cc:	ec51 0b19 	vmov	r0, r1, d9
 80030d0:	2200      	movs	r2, #0
 80030d2:	f7fd fa91 	bl	80005f8 <__aeabi_dmul>
 80030d6:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <_dtoa_r+0x648>)
 80030d8:	ec41 0b19 	vmov	d9, r0, r1
 80030dc:	2200      	movs	r2, #0
 80030de:	4640      	mov	r0, r8
 80030e0:	4649      	mov	r1, r9
 80030e2:	f7fd fa89 	bl	80005f8 <__aeabi_dmul>
 80030e6:	4680      	mov	r8, r0
 80030e8:	4689      	mov	r9, r1
 80030ea:	e7c5      	b.n	8003078 <_dtoa_r+0x530>
 80030ec:	ec51 0b17 	vmov	r0, r1, d7
 80030f0:	f7fd fa82 	bl	80005f8 <__aeabi_dmul>
 80030f4:	9b02      	ldr	r3, [sp, #8]
 80030f6:	9d00      	ldr	r5, [sp, #0]
 80030f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80030fa:	ec41 0b19 	vmov	d9, r0, r1
 80030fe:	4649      	mov	r1, r9
 8003100:	4640      	mov	r0, r8
 8003102:	f7fd fd29 	bl	8000b58 <__aeabi_d2iz>
 8003106:	4606      	mov	r6, r0
 8003108:	f7fd fa0c 	bl	8000524 <__aeabi_i2d>
 800310c:	3630      	adds	r6, #48	; 0x30
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f7fd f8b7 	bl	8000288 <__aeabi_dsub>
 800311a:	f805 6b01 	strb.w	r6, [r5], #1
 800311e:	9b02      	ldr	r3, [sp, #8]
 8003120:	429d      	cmp	r5, r3
 8003122:	4680      	mov	r8, r0
 8003124:	4689      	mov	r9, r1
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	d124      	bne.n	8003176 <_dtoa_r+0x62e>
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <_dtoa_r+0x654>)
 800312e:	ec51 0b19 	vmov	r0, r1, d9
 8003132:	f7fd f8ab 	bl	800028c <__adddf3>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4640      	mov	r0, r8
 800313c:	4649      	mov	r1, r9
 800313e:	f7fd fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8003142:	2800      	cmp	r0, #0
 8003144:	d173      	bne.n	800322e <_dtoa_r+0x6e6>
 8003146:	ec53 2b19 	vmov	r2, r3, d9
 800314a:	4914      	ldr	r1, [pc, #80]	; (800319c <_dtoa_r+0x654>)
 800314c:	2000      	movs	r0, #0
 800314e:	f7fd f89b 	bl	8000288 <__aeabi_dsub>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4640      	mov	r0, r8
 8003158:	4649      	mov	r1, r9
 800315a:	f7fd fcbf 	bl	8000adc <__aeabi_dcmplt>
 800315e:	2800      	cmp	r0, #0
 8003160:	f43f af2f 	beq.w	8002fc2 <_dtoa_r+0x47a>
 8003164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003166:	1e6b      	subs	r3, r5, #1
 8003168:	930f      	str	r3, [sp, #60]	; 0x3c
 800316a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800316e:	2b30      	cmp	r3, #48	; 0x30
 8003170:	d0f8      	beq.n	8003164 <_dtoa_r+0x61c>
 8003172:	46bb      	mov	fp, r7
 8003174:	e04a      	b.n	800320c <_dtoa_r+0x6c4>
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <_dtoa_r+0x648>)
 8003178:	f7fd fa3e 	bl	80005f8 <__aeabi_dmul>
 800317c:	4680      	mov	r8, r0
 800317e:	4689      	mov	r9, r1
 8003180:	e7bd      	b.n	80030fe <_dtoa_r+0x5b6>
 8003182:	bf00      	nop
 8003184:	08004940 	.word	0x08004940
 8003188:	08004918 	.word	0x08004918
 800318c:	3ff00000 	.word	0x3ff00000
 8003190:	40240000 	.word	0x40240000
 8003194:	401c0000 	.word	0x401c0000
 8003198:	40140000 	.word	0x40140000
 800319c:	3fe00000 	.word	0x3fe00000
 80031a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80031a4:	9d00      	ldr	r5, [sp, #0]
 80031a6:	4642      	mov	r2, r8
 80031a8:	464b      	mov	r3, r9
 80031aa:	4630      	mov	r0, r6
 80031ac:	4639      	mov	r1, r7
 80031ae:	f7fd fb4d 	bl	800084c <__aeabi_ddiv>
 80031b2:	f7fd fcd1 	bl	8000b58 <__aeabi_d2iz>
 80031b6:	9001      	str	r0, [sp, #4]
 80031b8:	f7fd f9b4 	bl	8000524 <__aeabi_i2d>
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	f7fd fa1a 	bl	80005f8 <__aeabi_dmul>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4630      	mov	r0, r6
 80031ca:	4639      	mov	r1, r7
 80031cc:	f7fd f85c 	bl	8000288 <__aeabi_dsub>
 80031d0:	9e01      	ldr	r6, [sp, #4]
 80031d2:	9f04      	ldr	r7, [sp, #16]
 80031d4:	3630      	adds	r6, #48	; 0x30
 80031d6:	f805 6b01 	strb.w	r6, [r5], #1
 80031da:	9e00      	ldr	r6, [sp, #0]
 80031dc:	1bae      	subs	r6, r5, r6
 80031de:	42b7      	cmp	r7, r6
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	d134      	bne.n	8003250 <_dtoa_r+0x708>
 80031e6:	f7fd f851 	bl	800028c <__adddf3>
 80031ea:	4642      	mov	r2, r8
 80031ec:	464b      	mov	r3, r9
 80031ee:	4606      	mov	r6, r0
 80031f0:	460f      	mov	r7, r1
 80031f2:	f7fd fc91 	bl	8000b18 <__aeabi_dcmpgt>
 80031f6:	b9c8      	cbnz	r0, 800322c <_dtoa_r+0x6e4>
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	4630      	mov	r0, r6
 80031fe:	4639      	mov	r1, r7
 8003200:	f7fd fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8003204:	b110      	cbz	r0, 800320c <_dtoa_r+0x6c4>
 8003206:	9b01      	ldr	r3, [sp, #4]
 8003208:	07db      	lsls	r3, r3, #31
 800320a:	d40f      	bmi.n	800322c <_dtoa_r+0x6e4>
 800320c:	4651      	mov	r1, sl
 800320e:	4620      	mov	r0, r4
 8003210:	f000 fbcc 	bl	80039ac <_Bfree>
 8003214:	2300      	movs	r3, #0
 8003216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003218:	702b      	strb	r3, [r5, #0]
 800321a:	f10b 0301 	add.w	r3, fp, #1
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003222:	2b00      	cmp	r3, #0
 8003224:	f43f ace2 	beq.w	8002bec <_dtoa_r+0xa4>
 8003228:	601d      	str	r5, [r3, #0]
 800322a:	e4df      	b.n	8002bec <_dtoa_r+0xa4>
 800322c:	465f      	mov	r7, fp
 800322e:	462b      	mov	r3, r5
 8003230:	461d      	mov	r5, r3
 8003232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003236:	2a39      	cmp	r2, #57	; 0x39
 8003238:	d106      	bne.n	8003248 <_dtoa_r+0x700>
 800323a:	9a00      	ldr	r2, [sp, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d1f7      	bne.n	8003230 <_dtoa_r+0x6e8>
 8003240:	9900      	ldr	r1, [sp, #0]
 8003242:	2230      	movs	r2, #48	; 0x30
 8003244:	3701      	adds	r7, #1
 8003246:	700a      	strb	r2, [r1, #0]
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	3201      	adds	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e790      	b.n	8003172 <_dtoa_r+0x62a>
 8003250:	4ba3      	ldr	r3, [pc, #652]	; (80034e0 <_dtoa_r+0x998>)
 8003252:	2200      	movs	r2, #0
 8003254:	f7fd f9d0 	bl	80005f8 <__aeabi_dmul>
 8003258:	2200      	movs	r2, #0
 800325a:	2300      	movs	r3, #0
 800325c:	4606      	mov	r6, r0
 800325e:	460f      	mov	r7, r1
 8003260:	f7fd fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8003264:	2800      	cmp	r0, #0
 8003266:	d09e      	beq.n	80031a6 <_dtoa_r+0x65e>
 8003268:	e7d0      	b.n	800320c <_dtoa_r+0x6c4>
 800326a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800326c:	2a00      	cmp	r2, #0
 800326e:	f000 80ca 	beq.w	8003406 <_dtoa_r+0x8be>
 8003272:	9a07      	ldr	r2, [sp, #28]
 8003274:	2a01      	cmp	r2, #1
 8003276:	f300 80ad 	bgt.w	80033d4 <_dtoa_r+0x88c>
 800327a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800327c:	2a00      	cmp	r2, #0
 800327e:	f000 80a5 	beq.w	80033cc <_dtoa_r+0x884>
 8003282:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003286:	9e08      	ldr	r6, [sp, #32]
 8003288:	9d05      	ldr	r5, [sp, #20]
 800328a:	9a05      	ldr	r2, [sp, #20]
 800328c:	441a      	add	r2, r3
 800328e:	9205      	str	r2, [sp, #20]
 8003290:	9a06      	ldr	r2, [sp, #24]
 8003292:	2101      	movs	r1, #1
 8003294:	441a      	add	r2, r3
 8003296:	4620      	mov	r0, r4
 8003298:	9206      	str	r2, [sp, #24]
 800329a:	f000 fc3d 	bl	8003b18 <__i2b>
 800329e:	4607      	mov	r7, r0
 80032a0:	b165      	cbz	r5, 80032bc <_dtoa_r+0x774>
 80032a2:	9b06      	ldr	r3, [sp, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	dd09      	ble.n	80032bc <_dtoa_r+0x774>
 80032a8:	42ab      	cmp	r3, r5
 80032aa:	9a05      	ldr	r2, [sp, #20]
 80032ac:	bfa8      	it	ge
 80032ae:	462b      	movge	r3, r5
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	9205      	str	r2, [sp, #20]
 80032b4:	9a06      	ldr	r2, [sp, #24]
 80032b6:	1aed      	subs	r5, r5, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	9306      	str	r3, [sp, #24]
 80032bc:	9b08      	ldr	r3, [sp, #32]
 80032be:	b1f3      	cbz	r3, 80032fe <_dtoa_r+0x7b6>
 80032c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80a3 	beq.w	800340e <_dtoa_r+0x8c6>
 80032c8:	2e00      	cmp	r6, #0
 80032ca:	dd10      	ble.n	80032ee <_dtoa_r+0x7a6>
 80032cc:	4639      	mov	r1, r7
 80032ce:	4632      	mov	r2, r6
 80032d0:	4620      	mov	r0, r4
 80032d2:	f000 fce1 	bl	8003c98 <__pow5mult>
 80032d6:	4652      	mov	r2, sl
 80032d8:	4601      	mov	r1, r0
 80032da:	4607      	mov	r7, r0
 80032dc:	4620      	mov	r0, r4
 80032de:	f000 fc31 	bl	8003b44 <__multiply>
 80032e2:	4651      	mov	r1, sl
 80032e4:	4680      	mov	r8, r0
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 fb60 	bl	80039ac <_Bfree>
 80032ec:	46c2      	mov	sl, r8
 80032ee:	9b08      	ldr	r3, [sp, #32]
 80032f0:	1b9a      	subs	r2, r3, r6
 80032f2:	d004      	beq.n	80032fe <_dtoa_r+0x7b6>
 80032f4:	4651      	mov	r1, sl
 80032f6:	4620      	mov	r0, r4
 80032f8:	f000 fcce 	bl	8003c98 <__pow5mult>
 80032fc:	4682      	mov	sl, r0
 80032fe:	2101      	movs	r1, #1
 8003300:	4620      	mov	r0, r4
 8003302:	f000 fc09 	bl	8003b18 <__i2b>
 8003306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	4606      	mov	r6, r0
 800330c:	f340 8081 	ble.w	8003412 <_dtoa_r+0x8ca>
 8003310:	461a      	mov	r2, r3
 8003312:	4601      	mov	r1, r0
 8003314:	4620      	mov	r0, r4
 8003316:	f000 fcbf 	bl	8003c98 <__pow5mult>
 800331a:	9b07      	ldr	r3, [sp, #28]
 800331c:	2b01      	cmp	r3, #1
 800331e:	4606      	mov	r6, r0
 8003320:	dd7a      	ble.n	8003418 <_dtoa_r+0x8d0>
 8003322:	f04f 0800 	mov.w	r8, #0
 8003326:	6933      	ldr	r3, [r6, #16]
 8003328:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800332c:	6918      	ldr	r0, [r3, #16]
 800332e:	f000 fba5 	bl	8003a7c <__hi0bits>
 8003332:	f1c0 0020 	rsb	r0, r0, #32
 8003336:	9b06      	ldr	r3, [sp, #24]
 8003338:	4418      	add	r0, r3
 800333a:	f010 001f 	ands.w	r0, r0, #31
 800333e:	f000 8094 	beq.w	800346a <_dtoa_r+0x922>
 8003342:	f1c0 0320 	rsb	r3, r0, #32
 8003346:	2b04      	cmp	r3, #4
 8003348:	f340 8085 	ble.w	8003456 <_dtoa_r+0x90e>
 800334c:	9b05      	ldr	r3, [sp, #20]
 800334e:	f1c0 001c 	rsb	r0, r0, #28
 8003352:	4403      	add	r3, r0
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	9b06      	ldr	r3, [sp, #24]
 8003358:	4403      	add	r3, r0
 800335a:	4405      	add	r5, r0
 800335c:	9306      	str	r3, [sp, #24]
 800335e:	9b05      	ldr	r3, [sp, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dd05      	ble.n	8003370 <_dtoa_r+0x828>
 8003364:	4651      	mov	r1, sl
 8003366:	461a      	mov	r2, r3
 8003368:	4620      	mov	r0, r4
 800336a:	f000 fcef 	bl	8003d4c <__lshift>
 800336e:	4682      	mov	sl, r0
 8003370:	9b06      	ldr	r3, [sp, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	dd05      	ble.n	8003382 <_dtoa_r+0x83a>
 8003376:	4631      	mov	r1, r6
 8003378:	461a      	mov	r2, r3
 800337a:	4620      	mov	r0, r4
 800337c:	f000 fce6 	bl	8003d4c <__lshift>
 8003380:	4606      	mov	r6, r0
 8003382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d072      	beq.n	800346e <_dtoa_r+0x926>
 8003388:	4631      	mov	r1, r6
 800338a:	4650      	mov	r0, sl
 800338c:	f000 fd4a 	bl	8003e24 <__mcmp>
 8003390:	2800      	cmp	r0, #0
 8003392:	da6c      	bge.n	800346e <_dtoa_r+0x926>
 8003394:	2300      	movs	r3, #0
 8003396:	4651      	mov	r1, sl
 8003398:	220a      	movs	r2, #10
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fb28 	bl	80039f0 <__multadd>
 80033a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80033a6:	4682      	mov	sl, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 81b0 	beq.w	800370e <_dtoa_r+0xbc6>
 80033ae:	2300      	movs	r3, #0
 80033b0:	4639      	mov	r1, r7
 80033b2:	220a      	movs	r2, #10
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 fb1b 	bl	80039f0 <__multadd>
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	4607      	mov	r7, r0
 80033c0:	f300 8096 	bgt.w	80034f0 <_dtoa_r+0x9a8>
 80033c4:	9b07      	ldr	r3, [sp, #28]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	dc59      	bgt.n	800347e <_dtoa_r+0x936>
 80033ca:	e091      	b.n	80034f0 <_dtoa_r+0x9a8>
 80033cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80033d2:	e758      	b.n	8003286 <_dtoa_r+0x73e>
 80033d4:	9b04      	ldr	r3, [sp, #16]
 80033d6:	1e5e      	subs	r6, r3, #1
 80033d8:	9b08      	ldr	r3, [sp, #32]
 80033da:	42b3      	cmp	r3, r6
 80033dc:	bfbf      	itttt	lt
 80033de:	9b08      	ldrlt	r3, [sp, #32]
 80033e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80033e2:	9608      	strlt	r6, [sp, #32]
 80033e4:	1af3      	sublt	r3, r6, r3
 80033e6:	bfb4      	ite	lt
 80033e8:	18d2      	addlt	r2, r2, r3
 80033ea:	1b9e      	subge	r6, r3, r6
 80033ec:	9b04      	ldr	r3, [sp, #16]
 80033ee:	bfbc      	itt	lt
 80033f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80033f2:	2600      	movlt	r6, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bfb7      	itett	lt
 80033f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80033fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003400:	1a9d      	sublt	r5, r3, r2
 8003402:	2300      	movlt	r3, #0
 8003404:	e741      	b.n	800328a <_dtoa_r+0x742>
 8003406:	9e08      	ldr	r6, [sp, #32]
 8003408:	9d05      	ldr	r5, [sp, #20]
 800340a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800340c:	e748      	b.n	80032a0 <_dtoa_r+0x758>
 800340e:	9a08      	ldr	r2, [sp, #32]
 8003410:	e770      	b.n	80032f4 <_dtoa_r+0x7ac>
 8003412:	9b07      	ldr	r3, [sp, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	dc19      	bgt.n	800344c <_dtoa_r+0x904>
 8003418:	9b02      	ldr	r3, [sp, #8]
 800341a:	b9bb      	cbnz	r3, 800344c <_dtoa_r+0x904>
 800341c:	9b03      	ldr	r3, [sp, #12]
 800341e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003422:	b99b      	cbnz	r3, 800344c <_dtoa_r+0x904>
 8003424:	9b03      	ldr	r3, [sp, #12]
 8003426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800342a:	0d1b      	lsrs	r3, r3, #20
 800342c:	051b      	lsls	r3, r3, #20
 800342e:	b183      	cbz	r3, 8003452 <_dtoa_r+0x90a>
 8003430:	9b05      	ldr	r3, [sp, #20]
 8003432:	3301      	adds	r3, #1
 8003434:	9305      	str	r3, [sp, #20]
 8003436:	9b06      	ldr	r3, [sp, #24]
 8003438:	3301      	adds	r3, #1
 800343a:	9306      	str	r3, [sp, #24]
 800343c:	f04f 0801 	mov.w	r8, #1
 8003440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	f47f af6f 	bne.w	8003326 <_dtoa_r+0x7de>
 8003448:	2001      	movs	r0, #1
 800344a:	e774      	b.n	8003336 <_dtoa_r+0x7ee>
 800344c:	f04f 0800 	mov.w	r8, #0
 8003450:	e7f6      	b.n	8003440 <_dtoa_r+0x8f8>
 8003452:	4698      	mov	r8, r3
 8003454:	e7f4      	b.n	8003440 <_dtoa_r+0x8f8>
 8003456:	d082      	beq.n	800335e <_dtoa_r+0x816>
 8003458:	9a05      	ldr	r2, [sp, #20]
 800345a:	331c      	adds	r3, #28
 800345c:	441a      	add	r2, r3
 800345e:	9205      	str	r2, [sp, #20]
 8003460:	9a06      	ldr	r2, [sp, #24]
 8003462:	441a      	add	r2, r3
 8003464:	441d      	add	r5, r3
 8003466:	9206      	str	r2, [sp, #24]
 8003468:	e779      	b.n	800335e <_dtoa_r+0x816>
 800346a:	4603      	mov	r3, r0
 800346c:	e7f4      	b.n	8003458 <_dtoa_r+0x910>
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	dc37      	bgt.n	80034e4 <_dtoa_r+0x99c>
 8003474:	9b07      	ldr	r3, [sp, #28]
 8003476:	2b02      	cmp	r3, #2
 8003478:	dd34      	ble.n	80034e4 <_dtoa_r+0x99c>
 800347a:	9b04      	ldr	r3, [sp, #16]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	9b01      	ldr	r3, [sp, #4]
 8003480:	b963      	cbnz	r3, 800349c <_dtoa_r+0x954>
 8003482:	4631      	mov	r1, r6
 8003484:	2205      	movs	r2, #5
 8003486:	4620      	mov	r0, r4
 8003488:	f000 fab2 	bl	80039f0 <__multadd>
 800348c:	4601      	mov	r1, r0
 800348e:	4606      	mov	r6, r0
 8003490:	4650      	mov	r0, sl
 8003492:	f000 fcc7 	bl	8003e24 <__mcmp>
 8003496:	2800      	cmp	r0, #0
 8003498:	f73f adbb 	bgt.w	8003012 <_dtoa_r+0x4ca>
 800349c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800349e:	9d00      	ldr	r5, [sp, #0]
 80034a0:	ea6f 0b03 	mvn.w	fp, r3
 80034a4:	f04f 0800 	mov.w	r8, #0
 80034a8:	4631      	mov	r1, r6
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 fa7e 	bl	80039ac <_Bfree>
 80034b0:	2f00      	cmp	r7, #0
 80034b2:	f43f aeab 	beq.w	800320c <_dtoa_r+0x6c4>
 80034b6:	f1b8 0f00 	cmp.w	r8, #0
 80034ba:	d005      	beq.n	80034c8 <_dtoa_r+0x980>
 80034bc:	45b8      	cmp	r8, r7
 80034be:	d003      	beq.n	80034c8 <_dtoa_r+0x980>
 80034c0:	4641      	mov	r1, r8
 80034c2:	4620      	mov	r0, r4
 80034c4:	f000 fa72 	bl	80039ac <_Bfree>
 80034c8:	4639      	mov	r1, r7
 80034ca:	4620      	mov	r0, r4
 80034cc:	f000 fa6e 	bl	80039ac <_Bfree>
 80034d0:	e69c      	b.n	800320c <_dtoa_r+0x6c4>
 80034d2:	2600      	movs	r6, #0
 80034d4:	4637      	mov	r7, r6
 80034d6:	e7e1      	b.n	800349c <_dtoa_r+0x954>
 80034d8:	46bb      	mov	fp, r7
 80034da:	4637      	mov	r7, r6
 80034dc:	e599      	b.n	8003012 <_dtoa_r+0x4ca>
 80034de:	bf00      	nop
 80034e0:	40240000 	.word	0x40240000
 80034e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80c8 	beq.w	800367c <_dtoa_r+0xb34>
 80034ec:	9b04      	ldr	r3, [sp, #16]
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	dd05      	ble.n	8003500 <_dtoa_r+0x9b8>
 80034f4:	4639      	mov	r1, r7
 80034f6:	462a      	mov	r2, r5
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 fc27 	bl	8003d4c <__lshift>
 80034fe:	4607      	mov	r7, r0
 8003500:	f1b8 0f00 	cmp.w	r8, #0
 8003504:	d05b      	beq.n	80035be <_dtoa_r+0xa76>
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4620      	mov	r0, r4
 800350a:	f000 fa0f 	bl	800392c <_Balloc>
 800350e:	4605      	mov	r5, r0
 8003510:	b928      	cbnz	r0, 800351e <_dtoa_r+0x9d6>
 8003512:	4b83      	ldr	r3, [pc, #524]	; (8003720 <_dtoa_r+0xbd8>)
 8003514:	4602      	mov	r2, r0
 8003516:	f240 21ef 	movw	r1, #751	; 0x2ef
 800351a:	f7ff bb2e 	b.w	8002b7a <_dtoa_r+0x32>
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	3202      	adds	r2, #2
 8003522:	0092      	lsls	r2, r2, #2
 8003524:	f107 010c 	add.w	r1, r7, #12
 8003528:	300c      	adds	r0, #12
 800352a:	f000 fe39 	bl	80041a0 <memcpy>
 800352e:	2201      	movs	r2, #1
 8003530:	4629      	mov	r1, r5
 8003532:	4620      	mov	r0, r4
 8003534:	f000 fc0a 	bl	8003d4c <__lshift>
 8003538:	9b00      	ldr	r3, [sp, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003542:	4413      	add	r3, r2
 8003544:	9308      	str	r3, [sp, #32]
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	46b8      	mov	r8, r7
 800354e:	9306      	str	r3, [sp, #24]
 8003550:	4607      	mov	r7, r0
 8003552:	9b04      	ldr	r3, [sp, #16]
 8003554:	4631      	mov	r1, r6
 8003556:	3b01      	subs	r3, #1
 8003558:	4650      	mov	r0, sl
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	f7ff fa6b 	bl	8002a36 <quorem>
 8003560:	4641      	mov	r1, r8
 8003562:	9002      	str	r0, [sp, #8]
 8003564:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003568:	4650      	mov	r0, sl
 800356a:	f000 fc5b 	bl	8003e24 <__mcmp>
 800356e:	463a      	mov	r2, r7
 8003570:	9005      	str	r0, [sp, #20]
 8003572:	4631      	mov	r1, r6
 8003574:	4620      	mov	r0, r4
 8003576:	f000 fc71 	bl	8003e5c <__mdiff>
 800357a:	68c2      	ldr	r2, [r0, #12]
 800357c:	4605      	mov	r5, r0
 800357e:	bb02      	cbnz	r2, 80035c2 <_dtoa_r+0xa7a>
 8003580:	4601      	mov	r1, r0
 8003582:	4650      	mov	r0, sl
 8003584:	f000 fc4e 	bl	8003e24 <__mcmp>
 8003588:	4602      	mov	r2, r0
 800358a:	4629      	mov	r1, r5
 800358c:	4620      	mov	r0, r4
 800358e:	9209      	str	r2, [sp, #36]	; 0x24
 8003590:	f000 fa0c 	bl	80039ac <_Bfree>
 8003594:	9b07      	ldr	r3, [sp, #28]
 8003596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003598:	9d04      	ldr	r5, [sp, #16]
 800359a:	ea43 0102 	orr.w	r1, r3, r2
 800359e:	9b06      	ldr	r3, [sp, #24]
 80035a0:	4319      	orrs	r1, r3
 80035a2:	d110      	bne.n	80035c6 <_dtoa_r+0xa7e>
 80035a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80035a8:	d029      	beq.n	80035fe <_dtoa_r+0xab6>
 80035aa:	9b05      	ldr	r3, [sp, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	dd02      	ble.n	80035b6 <_dtoa_r+0xa6e>
 80035b0:	9b02      	ldr	r3, [sp, #8]
 80035b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80035b6:	9b01      	ldr	r3, [sp, #4]
 80035b8:	f883 9000 	strb.w	r9, [r3]
 80035bc:	e774      	b.n	80034a8 <_dtoa_r+0x960>
 80035be:	4638      	mov	r0, r7
 80035c0:	e7ba      	b.n	8003538 <_dtoa_r+0x9f0>
 80035c2:	2201      	movs	r2, #1
 80035c4:	e7e1      	b.n	800358a <_dtoa_r+0xa42>
 80035c6:	9b05      	ldr	r3, [sp, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	db04      	blt.n	80035d6 <_dtoa_r+0xa8e>
 80035cc:	9907      	ldr	r1, [sp, #28]
 80035ce:	430b      	orrs	r3, r1
 80035d0:	9906      	ldr	r1, [sp, #24]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	d120      	bne.n	8003618 <_dtoa_r+0xad0>
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	dded      	ble.n	80035b6 <_dtoa_r+0xa6e>
 80035da:	4651      	mov	r1, sl
 80035dc:	2201      	movs	r2, #1
 80035de:	4620      	mov	r0, r4
 80035e0:	f000 fbb4 	bl	8003d4c <__lshift>
 80035e4:	4631      	mov	r1, r6
 80035e6:	4682      	mov	sl, r0
 80035e8:	f000 fc1c 	bl	8003e24 <__mcmp>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	dc03      	bgt.n	80035f8 <_dtoa_r+0xab0>
 80035f0:	d1e1      	bne.n	80035b6 <_dtoa_r+0xa6e>
 80035f2:	f019 0f01 	tst.w	r9, #1
 80035f6:	d0de      	beq.n	80035b6 <_dtoa_r+0xa6e>
 80035f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80035fc:	d1d8      	bne.n	80035b0 <_dtoa_r+0xa68>
 80035fe:	9a01      	ldr	r2, [sp, #4]
 8003600:	2339      	movs	r3, #57	; 0x39
 8003602:	7013      	strb	r3, [r2, #0]
 8003604:	462b      	mov	r3, r5
 8003606:	461d      	mov	r5, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800360e:	2a39      	cmp	r2, #57	; 0x39
 8003610:	d06c      	beq.n	80036ec <_dtoa_r+0xba4>
 8003612:	3201      	adds	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e747      	b.n	80034a8 <_dtoa_r+0x960>
 8003618:	2a00      	cmp	r2, #0
 800361a:	dd07      	ble.n	800362c <_dtoa_r+0xae4>
 800361c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003620:	d0ed      	beq.n	80035fe <_dtoa_r+0xab6>
 8003622:	9a01      	ldr	r2, [sp, #4]
 8003624:	f109 0301 	add.w	r3, r9, #1
 8003628:	7013      	strb	r3, [r2, #0]
 800362a:	e73d      	b.n	80034a8 <_dtoa_r+0x960>
 800362c:	9b04      	ldr	r3, [sp, #16]
 800362e:	9a08      	ldr	r2, [sp, #32]
 8003630:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003634:	4293      	cmp	r3, r2
 8003636:	d043      	beq.n	80036c0 <_dtoa_r+0xb78>
 8003638:	4651      	mov	r1, sl
 800363a:	2300      	movs	r3, #0
 800363c:	220a      	movs	r2, #10
 800363e:	4620      	mov	r0, r4
 8003640:	f000 f9d6 	bl	80039f0 <__multadd>
 8003644:	45b8      	cmp	r8, r7
 8003646:	4682      	mov	sl, r0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	f04f 020a 	mov.w	r2, #10
 8003650:	4641      	mov	r1, r8
 8003652:	4620      	mov	r0, r4
 8003654:	d107      	bne.n	8003666 <_dtoa_r+0xb1e>
 8003656:	f000 f9cb 	bl	80039f0 <__multadd>
 800365a:	4680      	mov	r8, r0
 800365c:	4607      	mov	r7, r0
 800365e:	9b04      	ldr	r3, [sp, #16]
 8003660:	3301      	adds	r3, #1
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	e775      	b.n	8003552 <_dtoa_r+0xa0a>
 8003666:	f000 f9c3 	bl	80039f0 <__multadd>
 800366a:	4639      	mov	r1, r7
 800366c:	4680      	mov	r8, r0
 800366e:	2300      	movs	r3, #0
 8003670:	220a      	movs	r2, #10
 8003672:	4620      	mov	r0, r4
 8003674:	f000 f9bc 	bl	80039f0 <__multadd>
 8003678:	4607      	mov	r7, r0
 800367a:	e7f0      	b.n	800365e <_dtoa_r+0xb16>
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	9d00      	ldr	r5, [sp, #0]
 8003682:	4631      	mov	r1, r6
 8003684:	4650      	mov	r0, sl
 8003686:	f7ff f9d6 	bl	8002a36 <quorem>
 800368a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800368e:	9b00      	ldr	r3, [sp, #0]
 8003690:	f805 9b01 	strb.w	r9, [r5], #1
 8003694:	1aea      	subs	r2, r5, r3
 8003696:	9b01      	ldr	r3, [sp, #4]
 8003698:	4293      	cmp	r3, r2
 800369a:	dd07      	ble.n	80036ac <_dtoa_r+0xb64>
 800369c:	4651      	mov	r1, sl
 800369e:	2300      	movs	r3, #0
 80036a0:	220a      	movs	r2, #10
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 f9a4 	bl	80039f0 <__multadd>
 80036a8:	4682      	mov	sl, r0
 80036aa:	e7ea      	b.n	8003682 <_dtoa_r+0xb3a>
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfc8      	it	gt
 80036b2:	461d      	movgt	r5, r3
 80036b4:	9b00      	ldr	r3, [sp, #0]
 80036b6:	bfd8      	it	le
 80036b8:	2501      	movle	r5, #1
 80036ba:	441d      	add	r5, r3
 80036bc:	f04f 0800 	mov.w	r8, #0
 80036c0:	4651      	mov	r1, sl
 80036c2:	2201      	movs	r2, #1
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 fb41 	bl	8003d4c <__lshift>
 80036ca:	4631      	mov	r1, r6
 80036cc:	4682      	mov	sl, r0
 80036ce:	f000 fba9 	bl	8003e24 <__mcmp>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	dc96      	bgt.n	8003604 <_dtoa_r+0xabc>
 80036d6:	d102      	bne.n	80036de <_dtoa_r+0xb96>
 80036d8:	f019 0f01 	tst.w	r9, #1
 80036dc:	d192      	bne.n	8003604 <_dtoa_r+0xabc>
 80036de:	462b      	mov	r3, r5
 80036e0:	461d      	mov	r5, r3
 80036e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80036e6:	2a30      	cmp	r2, #48	; 0x30
 80036e8:	d0fa      	beq.n	80036e0 <_dtoa_r+0xb98>
 80036ea:	e6dd      	b.n	80034a8 <_dtoa_r+0x960>
 80036ec:	9a00      	ldr	r2, [sp, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d189      	bne.n	8003606 <_dtoa_r+0xabe>
 80036f2:	f10b 0b01 	add.w	fp, fp, #1
 80036f6:	2331      	movs	r3, #49	; 0x31
 80036f8:	e796      	b.n	8003628 <_dtoa_r+0xae0>
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <_dtoa_r+0xbdc>)
 80036fc:	f7ff ba99 	b.w	8002c32 <_dtoa_r+0xea>
 8003700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003702:	2b00      	cmp	r3, #0
 8003704:	f47f aa6d 	bne.w	8002be2 <_dtoa_r+0x9a>
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <_dtoa_r+0xbe0>)
 800370a:	f7ff ba92 	b.w	8002c32 <_dtoa_r+0xea>
 800370e:	9b01      	ldr	r3, [sp, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	dcb5      	bgt.n	8003680 <_dtoa_r+0xb38>
 8003714:	9b07      	ldr	r3, [sp, #28]
 8003716:	2b02      	cmp	r3, #2
 8003718:	f73f aeb1 	bgt.w	800347e <_dtoa_r+0x936>
 800371c:	e7b0      	b.n	8003680 <_dtoa_r+0xb38>
 800371e:	bf00      	nop
 8003720:	080048a7 	.word	0x080048a7
 8003724:	08004807 	.word	0x08004807
 8003728:	0800482b 	.word	0x0800482b

0800372c <_free_r>:
 800372c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800372e:	2900      	cmp	r1, #0
 8003730:	d044      	beq.n	80037bc <_free_r+0x90>
 8003732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003736:	9001      	str	r0, [sp, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f1a1 0404 	sub.w	r4, r1, #4
 800373e:	bfb8      	it	lt
 8003740:	18e4      	addlt	r4, r4, r3
 8003742:	f000 f8e7 	bl	8003914 <__malloc_lock>
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <_free_r+0x94>)
 8003748:	9801      	ldr	r0, [sp, #4]
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	b933      	cbnz	r3, 800375c <_free_r+0x30>
 800374e:	6063      	str	r3, [r4, #4]
 8003750:	6014      	str	r4, [r2, #0]
 8003752:	b003      	add	sp, #12
 8003754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003758:	f000 b8e2 	b.w	8003920 <__malloc_unlock>
 800375c:	42a3      	cmp	r3, r4
 800375e:	d908      	bls.n	8003772 <_free_r+0x46>
 8003760:	6825      	ldr	r5, [r4, #0]
 8003762:	1961      	adds	r1, r4, r5
 8003764:	428b      	cmp	r3, r1
 8003766:	bf01      	itttt	eq
 8003768:	6819      	ldreq	r1, [r3, #0]
 800376a:	685b      	ldreq	r3, [r3, #4]
 800376c:	1949      	addeq	r1, r1, r5
 800376e:	6021      	streq	r1, [r4, #0]
 8003770:	e7ed      	b.n	800374e <_free_r+0x22>
 8003772:	461a      	mov	r2, r3
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	b10b      	cbz	r3, 800377c <_free_r+0x50>
 8003778:	42a3      	cmp	r3, r4
 800377a:	d9fa      	bls.n	8003772 <_free_r+0x46>
 800377c:	6811      	ldr	r1, [r2, #0]
 800377e:	1855      	adds	r5, r2, r1
 8003780:	42a5      	cmp	r5, r4
 8003782:	d10b      	bne.n	800379c <_free_r+0x70>
 8003784:	6824      	ldr	r4, [r4, #0]
 8003786:	4421      	add	r1, r4
 8003788:	1854      	adds	r4, r2, r1
 800378a:	42a3      	cmp	r3, r4
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	d1e0      	bne.n	8003752 <_free_r+0x26>
 8003790:	681c      	ldr	r4, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	6053      	str	r3, [r2, #4]
 8003796:	440c      	add	r4, r1
 8003798:	6014      	str	r4, [r2, #0]
 800379a:	e7da      	b.n	8003752 <_free_r+0x26>
 800379c:	d902      	bls.n	80037a4 <_free_r+0x78>
 800379e:	230c      	movs	r3, #12
 80037a0:	6003      	str	r3, [r0, #0]
 80037a2:	e7d6      	b.n	8003752 <_free_r+0x26>
 80037a4:	6825      	ldr	r5, [r4, #0]
 80037a6:	1961      	adds	r1, r4, r5
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf04      	itt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	bf04      	itt	eq
 80037b4:	1949      	addeq	r1, r1, r5
 80037b6:	6021      	streq	r1, [r4, #0]
 80037b8:	6054      	str	r4, [r2, #4]
 80037ba:	e7ca      	b.n	8003752 <_free_r+0x26>
 80037bc:	b003      	add	sp, #12
 80037be:	bd30      	pop	{r4, r5, pc}
 80037c0:	20000334 	.word	0x20000334

080037c4 <malloc>:
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <malloc+0xc>)
 80037c6:	4601      	mov	r1, r0
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f000 b823 	b.w	8003814 <_malloc_r>
 80037ce:	bf00      	nop
 80037d0:	2000005c 	.word	0x2000005c

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0e      	ldr	r6, [pc, #56]	; (8003810 <sbrk_aligned+0x3c>)
 80037d8:	460c      	mov	r4, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	4605      	mov	r5, r0
 80037de:	b911      	cbnz	r1, 80037e6 <sbrk_aligned+0x12>
 80037e0:	f000 fcce 	bl	8004180 <_sbrk_r>
 80037e4:	6030      	str	r0, [r6, #0]
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fcc9 	bl	8004180 <_sbrk_r>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	d00a      	beq.n	8003808 <sbrk_aligned+0x34>
 80037f2:	1cc4      	adds	r4, r0, #3
 80037f4:	f024 0403 	bic.w	r4, r4, #3
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d007      	beq.n	800380c <sbrk_aligned+0x38>
 80037fc:	1a21      	subs	r1, r4, r0
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 fcbe 	bl	8004180 <_sbrk_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d101      	bne.n	800380c <sbrk_aligned+0x38>
 8003808:	f04f 34ff 	mov.w	r4, #4294967295
 800380c:	4620      	mov	r0, r4
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	20000338 	.word	0x20000338

08003814 <_malloc_r>:
 8003814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003818:	1ccd      	adds	r5, r1, #3
 800381a:	f025 0503 	bic.w	r5, r5, #3
 800381e:	3508      	adds	r5, #8
 8003820:	2d0c      	cmp	r5, #12
 8003822:	bf38      	it	cc
 8003824:	250c      	movcc	r5, #12
 8003826:	2d00      	cmp	r5, #0
 8003828:	4607      	mov	r7, r0
 800382a:	db01      	blt.n	8003830 <_malloc_r+0x1c>
 800382c:	42a9      	cmp	r1, r5
 800382e:	d905      	bls.n	800383c <_malloc_r+0x28>
 8003830:	230c      	movs	r3, #12
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	2600      	movs	r6, #0
 8003836:	4630      	mov	r0, r6
 8003838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003910 <_malloc_r+0xfc>
 8003840:	f000 f868 	bl	8003914 <__malloc_lock>
 8003844:	f8d8 3000 	ldr.w	r3, [r8]
 8003848:	461c      	mov	r4, r3
 800384a:	bb5c      	cbnz	r4, 80038a4 <_malloc_r+0x90>
 800384c:	4629      	mov	r1, r5
 800384e:	4638      	mov	r0, r7
 8003850:	f7ff ffc0 	bl	80037d4 <sbrk_aligned>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	4604      	mov	r4, r0
 8003858:	d155      	bne.n	8003906 <_malloc_r+0xf2>
 800385a:	f8d8 4000 	ldr.w	r4, [r8]
 800385e:	4626      	mov	r6, r4
 8003860:	2e00      	cmp	r6, #0
 8003862:	d145      	bne.n	80038f0 <_malloc_r+0xdc>
 8003864:	2c00      	cmp	r4, #0
 8003866:	d048      	beq.n	80038fa <_malloc_r+0xe6>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	4631      	mov	r1, r6
 800386c:	4638      	mov	r0, r7
 800386e:	eb04 0903 	add.w	r9, r4, r3
 8003872:	f000 fc85 	bl	8004180 <_sbrk_r>
 8003876:	4581      	cmp	r9, r0
 8003878:	d13f      	bne.n	80038fa <_malloc_r+0xe6>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	1a6d      	subs	r5, r5, r1
 800387e:	4629      	mov	r1, r5
 8003880:	4638      	mov	r0, r7
 8003882:	f7ff ffa7 	bl	80037d4 <sbrk_aligned>
 8003886:	3001      	adds	r0, #1
 8003888:	d037      	beq.n	80038fa <_malloc_r+0xe6>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	442b      	add	r3, r5
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	f8d8 3000 	ldr.w	r3, [r8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d038      	beq.n	800390a <_malloc_r+0xf6>
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	42a2      	cmp	r2, r4
 800389c:	d12b      	bne.n	80038f6 <_malloc_r+0xe2>
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e00f      	b.n	80038c4 <_malloc_r+0xb0>
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	1b52      	subs	r2, r2, r5
 80038a8:	d41f      	bmi.n	80038ea <_malloc_r+0xd6>
 80038aa:	2a0b      	cmp	r2, #11
 80038ac:	d917      	bls.n	80038de <_malloc_r+0xca>
 80038ae:	1961      	adds	r1, r4, r5
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	6025      	str	r5, [r4, #0]
 80038b4:	bf18      	it	ne
 80038b6:	6059      	strne	r1, [r3, #4]
 80038b8:	6863      	ldr	r3, [r4, #4]
 80038ba:	bf08      	it	eq
 80038bc:	f8c8 1000 	streq.w	r1, [r8]
 80038c0:	5162      	str	r2, [r4, r5]
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	4638      	mov	r0, r7
 80038c6:	f104 060b 	add.w	r6, r4, #11
 80038ca:	f000 f829 	bl	8003920 <__malloc_unlock>
 80038ce:	f026 0607 	bic.w	r6, r6, #7
 80038d2:	1d23      	adds	r3, r4, #4
 80038d4:	1af2      	subs	r2, r6, r3
 80038d6:	d0ae      	beq.n	8003836 <_malloc_r+0x22>
 80038d8:	1b9b      	subs	r3, r3, r6
 80038da:	50a3      	str	r3, [r4, r2]
 80038dc:	e7ab      	b.n	8003836 <_malloc_r+0x22>
 80038de:	42a3      	cmp	r3, r4
 80038e0:	6862      	ldr	r2, [r4, #4]
 80038e2:	d1dd      	bne.n	80038a0 <_malloc_r+0x8c>
 80038e4:	f8c8 2000 	str.w	r2, [r8]
 80038e8:	e7ec      	b.n	80038c4 <_malloc_r+0xb0>
 80038ea:	4623      	mov	r3, r4
 80038ec:	6864      	ldr	r4, [r4, #4]
 80038ee:	e7ac      	b.n	800384a <_malloc_r+0x36>
 80038f0:	4634      	mov	r4, r6
 80038f2:	6876      	ldr	r6, [r6, #4]
 80038f4:	e7b4      	b.n	8003860 <_malloc_r+0x4c>
 80038f6:	4613      	mov	r3, r2
 80038f8:	e7cc      	b.n	8003894 <_malloc_r+0x80>
 80038fa:	230c      	movs	r3, #12
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4638      	mov	r0, r7
 8003900:	f000 f80e 	bl	8003920 <__malloc_unlock>
 8003904:	e797      	b.n	8003836 <_malloc_r+0x22>
 8003906:	6025      	str	r5, [r4, #0]
 8003908:	e7dc      	b.n	80038c4 <_malloc_r+0xb0>
 800390a:	605b      	str	r3, [r3, #4]
 800390c:	deff      	udf	#255	; 0xff
 800390e:	bf00      	nop
 8003910:	20000334 	.word	0x20000334

08003914 <__malloc_lock>:
 8003914:	4801      	ldr	r0, [pc, #4]	; (800391c <__malloc_lock+0x8>)
 8003916:	f7ff b88c 	b.w	8002a32 <__retarget_lock_acquire_recursive>
 800391a:	bf00      	nop
 800391c:	20000330 	.word	0x20000330

08003920 <__malloc_unlock>:
 8003920:	4801      	ldr	r0, [pc, #4]	; (8003928 <__malloc_unlock+0x8>)
 8003922:	f7ff b887 	b.w	8002a34 <__retarget_lock_release_recursive>
 8003926:	bf00      	nop
 8003928:	20000330 	.word	0x20000330

0800392c <_Balloc>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	69c6      	ldr	r6, [r0, #28]
 8003930:	4604      	mov	r4, r0
 8003932:	460d      	mov	r5, r1
 8003934:	b976      	cbnz	r6, 8003954 <_Balloc+0x28>
 8003936:	2010      	movs	r0, #16
 8003938:	f7ff ff44 	bl	80037c4 <malloc>
 800393c:	4602      	mov	r2, r0
 800393e:	61e0      	str	r0, [r4, #28]
 8003940:	b920      	cbnz	r0, 800394c <_Balloc+0x20>
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <_Balloc+0x78>)
 8003944:	4818      	ldr	r0, [pc, #96]	; (80039a8 <_Balloc+0x7c>)
 8003946:	216b      	movs	r1, #107	; 0x6b
 8003948:	f000 fc38 	bl	80041bc <__assert_func>
 800394c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003950:	6006      	str	r6, [r0, #0]
 8003952:	60c6      	str	r6, [r0, #12]
 8003954:	69e6      	ldr	r6, [r4, #28]
 8003956:	68f3      	ldr	r3, [r6, #12]
 8003958:	b183      	cbz	r3, 800397c <_Balloc+0x50>
 800395a:	69e3      	ldr	r3, [r4, #28]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003962:	b9b8      	cbnz	r0, 8003994 <_Balloc+0x68>
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f605 	lsl.w	r6, r1, r5
 800396a:	1d72      	adds	r2, r6, #5
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	4620      	mov	r0, r4
 8003970:	f000 fc42 	bl	80041f8 <_calloc_r>
 8003974:	b160      	cbz	r0, 8003990 <_Balloc+0x64>
 8003976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800397a:	e00e      	b.n	800399a <_Balloc+0x6e>
 800397c:	2221      	movs	r2, #33	; 0x21
 800397e:	2104      	movs	r1, #4
 8003980:	4620      	mov	r0, r4
 8003982:	f000 fc39 	bl	80041f8 <_calloc_r>
 8003986:	69e3      	ldr	r3, [r4, #28]
 8003988:	60f0      	str	r0, [r6, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e4      	bne.n	800395a <_Balloc+0x2e>
 8003990:	2000      	movs	r0, #0
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	6802      	ldr	r2, [r0, #0]
 8003996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800399a:	2300      	movs	r3, #0
 800399c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80039a0:	e7f7      	b.n	8003992 <_Balloc+0x66>
 80039a2:	bf00      	nop
 80039a4:	08004838 	.word	0x08004838
 80039a8:	080048b8 	.word	0x080048b8

080039ac <_Bfree>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	69c6      	ldr	r6, [r0, #28]
 80039b0:	4605      	mov	r5, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	b976      	cbnz	r6, 80039d4 <_Bfree+0x28>
 80039b6:	2010      	movs	r0, #16
 80039b8:	f7ff ff04 	bl	80037c4 <malloc>
 80039bc:	4602      	mov	r2, r0
 80039be:	61e8      	str	r0, [r5, #28]
 80039c0:	b920      	cbnz	r0, 80039cc <_Bfree+0x20>
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <_Bfree+0x3c>)
 80039c4:	4809      	ldr	r0, [pc, #36]	; (80039ec <_Bfree+0x40>)
 80039c6:	218f      	movs	r1, #143	; 0x8f
 80039c8:	f000 fbf8 	bl	80041bc <__assert_func>
 80039cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039d0:	6006      	str	r6, [r0, #0]
 80039d2:	60c6      	str	r6, [r0, #12]
 80039d4:	b13c      	cbz	r4, 80039e6 <_Bfree+0x3a>
 80039d6:	69eb      	ldr	r3, [r5, #28]
 80039d8:	6862      	ldr	r2, [r4, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039e0:	6021      	str	r1, [r4, #0]
 80039e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	08004838 	.word	0x08004838
 80039ec:	080048b8 	.word	0x080048b8

080039f0 <__multadd>:
 80039f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f4:	690d      	ldr	r5, [r1, #16]
 80039f6:	4607      	mov	r7, r0
 80039f8:	460c      	mov	r4, r1
 80039fa:	461e      	mov	r6, r3
 80039fc:	f101 0c14 	add.w	ip, r1, #20
 8003a00:	2000      	movs	r0, #0
 8003a02:	f8dc 3000 	ldr.w	r3, [ip]
 8003a06:	b299      	uxth	r1, r3
 8003a08:	fb02 6101 	mla	r1, r2, r1, r6
 8003a0c:	0c1e      	lsrs	r6, r3, #16
 8003a0e:	0c0b      	lsrs	r3, r1, #16
 8003a10:	fb02 3306 	mla	r3, r2, r6, r3
 8003a14:	b289      	uxth	r1, r1
 8003a16:	3001      	adds	r0, #1
 8003a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003a1c:	4285      	cmp	r5, r0
 8003a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8003a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003a26:	dcec      	bgt.n	8003a02 <__multadd+0x12>
 8003a28:	b30e      	cbz	r6, 8003a6e <__multadd+0x7e>
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	42ab      	cmp	r3, r5
 8003a2e:	dc19      	bgt.n	8003a64 <__multadd+0x74>
 8003a30:	6861      	ldr	r1, [r4, #4]
 8003a32:	4638      	mov	r0, r7
 8003a34:	3101      	adds	r1, #1
 8003a36:	f7ff ff79 	bl	800392c <_Balloc>
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	b928      	cbnz	r0, 8003a4a <__multadd+0x5a>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <__multadd+0x84>)
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <__multadd+0x88>)
 8003a44:	21ba      	movs	r1, #186	; 0xba
 8003a46:	f000 fbb9 	bl	80041bc <__assert_func>
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	3202      	adds	r2, #2
 8003a4e:	f104 010c 	add.w	r1, r4, #12
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	300c      	adds	r0, #12
 8003a56:	f000 fba3 	bl	80041a0 <memcpy>
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ffa5 	bl	80039ac <_Bfree>
 8003a62:	4644      	mov	r4, r8
 8003a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a68:	3501      	adds	r5, #1
 8003a6a:	615e      	str	r6, [r3, #20]
 8003a6c:	6125      	str	r5, [r4, #16]
 8003a6e:	4620      	mov	r0, r4
 8003a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a74:	080048a7 	.word	0x080048a7
 8003a78:	080048b8 	.word	0x080048b8

08003a7c <__hi0bits>:
 8003a7c:	0c03      	lsrs	r3, r0, #16
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	b9d3      	cbnz	r3, 8003ab8 <__hi0bits+0x3c>
 8003a82:	0400      	lsls	r0, r0, #16
 8003a84:	2310      	movs	r3, #16
 8003a86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003a8a:	bf04      	itt	eq
 8003a8c:	0200      	lsleq	r0, r0, #8
 8003a8e:	3308      	addeq	r3, #8
 8003a90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003a94:	bf04      	itt	eq
 8003a96:	0100      	lsleq	r0, r0, #4
 8003a98:	3304      	addeq	r3, #4
 8003a9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003a9e:	bf04      	itt	eq
 8003aa0:	0080      	lsleq	r0, r0, #2
 8003aa2:	3302      	addeq	r3, #2
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	db05      	blt.n	8003ab4 <__hi0bits+0x38>
 8003aa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003aac:	f103 0301 	add.w	r3, r3, #1
 8003ab0:	bf08      	it	eq
 8003ab2:	2320      	moveq	r3, #32
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	4770      	bx	lr
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e7e4      	b.n	8003a86 <__hi0bits+0xa>

08003abc <__lo0bits>:
 8003abc:	6803      	ldr	r3, [r0, #0]
 8003abe:	f013 0207 	ands.w	r2, r3, #7
 8003ac2:	d00c      	beq.n	8003ade <__lo0bits+0x22>
 8003ac4:	07d9      	lsls	r1, r3, #31
 8003ac6:	d422      	bmi.n	8003b0e <__lo0bits+0x52>
 8003ac8:	079a      	lsls	r2, r3, #30
 8003aca:	bf49      	itett	mi
 8003acc:	085b      	lsrmi	r3, r3, #1
 8003ace:	089b      	lsrpl	r3, r3, #2
 8003ad0:	6003      	strmi	r3, [r0, #0]
 8003ad2:	2201      	movmi	r2, #1
 8003ad4:	bf5c      	itt	pl
 8003ad6:	6003      	strpl	r3, [r0, #0]
 8003ad8:	2202      	movpl	r2, #2
 8003ada:	4610      	mov	r0, r2
 8003adc:	4770      	bx	lr
 8003ade:	b299      	uxth	r1, r3
 8003ae0:	b909      	cbnz	r1, 8003ae6 <__lo0bits+0x2a>
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	b2d9      	uxtb	r1, r3
 8003ae8:	b909      	cbnz	r1, 8003aee <__lo0bits+0x32>
 8003aea:	3208      	adds	r2, #8
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	0719      	lsls	r1, r3, #28
 8003af0:	bf04      	itt	eq
 8003af2:	091b      	lsreq	r3, r3, #4
 8003af4:	3204      	addeq	r2, #4
 8003af6:	0799      	lsls	r1, r3, #30
 8003af8:	bf04      	itt	eq
 8003afa:	089b      	lsreq	r3, r3, #2
 8003afc:	3202      	addeq	r2, #2
 8003afe:	07d9      	lsls	r1, r3, #31
 8003b00:	d403      	bmi.n	8003b0a <__lo0bits+0x4e>
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	f102 0201 	add.w	r2, r2, #1
 8003b08:	d003      	beq.n	8003b12 <__lo0bits+0x56>
 8003b0a:	6003      	str	r3, [r0, #0]
 8003b0c:	e7e5      	b.n	8003ada <__lo0bits+0x1e>
 8003b0e:	2200      	movs	r2, #0
 8003b10:	e7e3      	b.n	8003ada <__lo0bits+0x1e>
 8003b12:	2220      	movs	r2, #32
 8003b14:	e7e1      	b.n	8003ada <__lo0bits+0x1e>
	...

08003b18 <__i2b>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	f7ff ff05 	bl	800392c <_Balloc>
 8003b22:	4602      	mov	r2, r0
 8003b24:	b928      	cbnz	r0, 8003b32 <__i2b+0x1a>
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <__i2b+0x24>)
 8003b28:	4805      	ldr	r0, [pc, #20]	; (8003b40 <__i2b+0x28>)
 8003b2a:	f240 1145 	movw	r1, #325	; 0x145
 8003b2e:	f000 fb45 	bl	80041bc <__assert_func>
 8003b32:	2301      	movs	r3, #1
 8003b34:	6144      	str	r4, [r0, #20]
 8003b36:	6103      	str	r3, [r0, #16]
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	bf00      	nop
 8003b3c:	080048a7 	.word	0x080048a7
 8003b40:	080048b8 	.word	0x080048b8

08003b44 <__multiply>:
 8003b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b48:	4691      	mov	r9, r2
 8003b4a:	690a      	ldr	r2, [r1, #16]
 8003b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	bfb8      	it	lt
 8003b54:	460b      	movlt	r3, r1
 8003b56:	460c      	mov	r4, r1
 8003b58:	bfbc      	itt	lt
 8003b5a:	464c      	movlt	r4, r9
 8003b5c:	4699      	movlt	r9, r3
 8003b5e:	6927      	ldr	r7, [r4, #16]
 8003b60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b64:	68a3      	ldr	r3, [r4, #8]
 8003b66:	6861      	ldr	r1, [r4, #4]
 8003b68:	eb07 060a 	add.w	r6, r7, sl
 8003b6c:	42b3      	cmp	r3, r6
 8003b6e:	b085      	sub	sp, #20
 8003b70:	bfb8      	it	lt
 8003b72:	3101      	addlt	r1, #1
 8003b74:	f7ff feda 	bl	800392c <_Balloc>
 8003b78:	b930      	cbnz	r0, 8003b88 <__multiply+0x44>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <__multiply+0x14c>)
 8003b7e:	4845      	ldr	r0, [pc, #276]	; (8003c94 <__multiply+0x150>)
 8003b80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8003b84:	f000 fb1a 	bl	80041bc <__assert_func>
 8003b88:	f100 0514 	add.w	r5, r0, #20
 8003b8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b90:	462b      	mov	r3, r5
 8003b92:	2200      	movs	r2, #0
 8003b94:	4543      	cmp	r3, r8
 8003b96:	d321      	bcc.n	8003bdc <__multiply+0x98>
 8003b98:	f104 0314 	add.w	r3, r4, #20
 8003b9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003ba0:	f109 0314 	add.w	r3, r9, #20
 8003ba4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003ba8:	9202      	str	r2, [sp, #8]
 8003baa:	1b3a      	subs	r2, r7, r4
 8003bac:	3a15      	subs	r2, #21
 8003bae:	f022 0203 	bic.w	r2, r2, #3
 8003bb2:	3204      	adds	r2, #4
 8003bb4:	f104 0115 	add.w	r1, r4, #21
 8003bb8:	428f      	cmp	r7, r1
 8003bba:	bf38      	it	cc
 8003bbc:	2204      	movcc	r2, #4
 8003bbe:	9201      	str	r2, [sp, #4]
 8003bc0:	9a02      	ldr	r2, [sp, #8]
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d80c      	bhi.n	8003be2 <__multiply+0x9e>
 8003bc8:	2e00      	cmp	r6, #0
 8003bca:	dd03      	ble.n	8003bd4 <__multiply+0x90>
 8003bcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05b      	beq.n	8003c8c <__multiply+0x148>
 8003bd4:	6106      	str	r6, [r0, #16]
 8003bd6:	b005      	add	sp, #20
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	f843 2b04 	str.w	r2, [r3], #4
 8003be0:	e7d8      	b.n	8003b94 <__multiply+0x50>
 8003be2:	f8b3 a000 	ldrh.w	sl, [r3]
 8003be6:	f1ba 0f00 	cmp.w	sl, #0
 8003bea:	d024      	beq.n	8003c36 <__multiply+0xf2>
 8003bec:	f104 0e14 	add.w	lr, r4, #20
 8003bf0:	46a9      	mov	r9, r5
 8003bf2:	f04f 0c00 	mov.w	ip, #0
 8003bf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003bfa:	f8d9 1000 	ldr.w	r1, [r9]
 8003bfe:	fa1f fb82 	uxth.w	fp, r2
 8003c02:	b289      	uxth	r1, r1
 8003c04:	fb0a 110b 	mla	r1, sl, fp, r1
 8003c08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c10:	4461      	add	r1, ip
 8003c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c16:	fb0a c20b 	mla	r2, sl, fp, ip
 8003c1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c1e:	b289      	uxth	r1, r1
 8003c20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c24:	4577      	cmp	r7, lr
 8003c26:	f849 1b04 	str.w	r1, [r9], #4
 8003c2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c2e:	d8e2      	bhi.n	8003bf6 <__multiply+0xb2>
 8003c30:	9a01      	ldr	r2, [sp, #4]
 8003c32:	f845 c002 	str.w	ip, [r5, r2]
 8003c36:	9a03      	ldr	r2, [sp, #12]
 8003c38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	f1b9 0f00 	cmp.w	r9, #0
 8003c42:	d021      	beq.n	8003c88 <__multiply+0x144>
 8003c44:	6829      	ldr	r1, [r5, #0]
 8003c46:	f104 0c14 	add.w	ip, r4, #20
 8003c4a:	46ae      	mov	lr, r5
 8003c4c:	f04f 0a00 	mov.w	sl, #0
 8003c50:	f8bc b000 	ldrh.w	fp, [ip]
 8003c54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c58:	fb09 220b 	mla	r2, r9, fp, r2
 8003c5c:	4452      	add	r2, sl
 8003c5e:	b289      	uxth	r1, r1
 8003c60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c64:	f84e 1b04 	str.w	r1, [lr], #4
 8003c68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003c6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c70:	f8be 1000 	ldrh.w	r1, [lr]
 8003c74:	fb09 110a 	mla	r1, r9, sl, r1
 8003c78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8003c7c:	4567      	cmp	r7, ip
 8003c7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c82:	d8e5      	bhi.n	8003c50 <__multiply+0x10c>
 8003c84:	9a01      	ldr	r2, [sp, #4]
 8003c86:	50a9      	str	r1, [r5, r2]
 8003c88:	3504      	adds	r5, #4
 8003c8a:	e799      	b.n	8003bc0 <__multiply+0x7c>
 8003c8c:	3e01      	subs	r6, #1
 8003c8e:	e79b      	b.n	8003bc8 <__multiply+0x84>
 8003c90:	080048a7 	.word	0x080048a7
 8003c94:	080048b8 	.word	0x080048b8

08003c98 <__pow5mult>:
 8003c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c9c:	4615      	mov	r5, r2
 8003c9e:	f012 0203 	ands.w	r2, r2, #3
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	460f      	mov	r7, r1
 8003ca6:	d007      	beq.n	8003cb8 <__pow5mult+0x20>
 8003ca8:	4c25      	ldr	r4, [pc, #148]	; (8003d40 <__pow5mult+0xa8>)
 8003caa:	3a01      	subs	r2, #1
 8003cac:	2300      	movs	r3, #0
 8003cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003cb2:	f7ff fe9d 	bl	80039f0 <__multadd>
 8003cb6:	4607      	mov	r7, r0
 8003cb8:	10ad      	asrs	r5, r5, #2
 8003cba:	d03d      	beq.n	8003d38 <__pow5mult+0xa0>
 8003cbc:	69f4      	ldr	r4, [r6, #28]
 8003cbe:	b97c      	cbnz	r4, 8003ce0 <__pow5mult+0x48>
 8003cc0:	2010      	movs	r0, #16
 8003cc2:	f7ff fd7f 	bl	80037c4 <malloc>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	61f0      	str	r0, [r6, #28]
 8003cca:	b928      	cbnz	r0, 8003cd8 <__pow5mult+0x40>
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <__pow5mult+0xac>)
 8003cce:	481e      	ldr	r0, [pc, #120]	; (8003d48 <__pow5mult+0xb0>)
 8003cd0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003cd4:	f000 fa72 	bl	80041bc <__assert_func>
 8003cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cdc:	6004      	str	r4, [r0, #0]
 8003cde:	60c4      	str	r4, [r0, #12]
 8003ce0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8003ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ce8:	b94c      	cbnz	r4, 8003cfe <__pow5mult+0x66>
 8003cea:	f240 2171 	movw	r1, #625	; 0x271
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f7ff ff12 	bl	8003b18 <__i2b>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	6003      	str	r3, [r0, #0]
 8003cfe:	f04f 0900 	mov.w	r9, #0
 8003d02:	07eb      	lsls	r3, r5, #31
 8003d04:	d50a      	bpl.n	8003d1c <__pow5mult+0x84>
 8003d06:	4639      	mov	r1, r7
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f7ff ff1a 	bl	8003b44 <__multiply>
 8003d10:	4639      	mov	r1, r7
 8003d12:	4680      	mov	r8, r0
 8003d14:	4630      	mov	r0, r6
 8003d16:	f7ff fe49 	bl	80039ac <_Bfree>
 8003d1a:	4647      	mov	r7, r8
 8003d1c:	106d      	asrs	r5, r5, #1
 8003d1e:	d00b      	beq.n	8003d38 <__pow5mult+0xa0>
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	b938      	cbnz	r0, 8003d34 <__pow5mult+0x9c>
 8003d24:	4622      	mov	r2, r4
 8003d26:	4621      	mov	r1, r4
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f7ff ff0b 	bl	8003b44 <__multiply>
 8003d2e:	6020      	str	r0, [r4, #0]
 8003d30:	f8c0 9000 	str.w	r9, [r0]
 8003d34:	4604      	mov	r4, r0
 8003d36:	e7e4      	b.n	8003d02 <__pow5mult+0x6a>
 8003d38:	4638      	mov	r0, r7
 8003d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d3e:	bf00      	nop
 8003d40:	08004a08 	.word	0x08004a08
 8003d44:	08004838 	.word	0x08004838
 8003d48:	080048b8 	.word	0x080048b8

08003d4c <__lshift>:
 8003d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	460c      	mov	r4, r1
 8003d52:	6849      	ldr	r1, [r1, #4]
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d5a:	68a3      	ldr	r3, [r4, #8]
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	4691      	mov	r9, r2
 8003d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d64:	f108 0601 	add.w	r6, r8, #1
 8003d68:	42b3      	cmp	r3, r6
 8003d6a:	db0b      	blt.n	8003d84 <__lshift+0x38>
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	f7ff fddd 	bl	800392c <_Balloc>
 8003d72:	4605      	mov	r5, r0
 8003d74:	b948      	cbnz	r0, 8003d8a <__lshift+0x3e>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <__lshift+0xd0>)
 8003d7a:	4829      	ldr	r0, [pc, #164]	; (8003e20 <__lshift+0xd4>)
 8003d7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003d80:	f000 fa1c 	bl	80041bc <__assert_func>
 8003d84:	3101      	adds	r1, #1
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	e7ee      	b.n	8003d68 <__lshift+0x1c>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f100 0114 	add.w	r1, r0, #20
 8003d90:	f100 0210 	add.w	r2, r0, #16
 8003d94:	4618      	mov	r0, r3
 8003d96:	4553      	cmp	r3, sl
 8003d98:	db33      	blt.n	8003e02 <__lshift+0xb6>
 8003d9a:	6920      	ldr	r0, [r4, #16]
 8003d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003da0:	f104 0314 	add.w	r3, r4, #20
 8003da4:	f019 091f 	ands.w	r9, r9, #31
 8003da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003db0:	d02b      	beq.n	8003e0a <__lshift+0xbe>
 8003db2:	f1c9 0e20 	rsb	lr, r9, #32
 8003db6:	468a      	mov	sl, r1
 8003db8:	2200      	movs	r2, #0
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8003dc0:	4310      	orrs	r0, r2
 8003dc2:	f84a 0b04 	str.w	r0, [sl], #4
 8003dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dca:	459c      	cmp	ip, r3
 8003dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8003dd0:	d8f3      	bhi.n	8003dba <__lshift+0x6e>
 8003dd2:	ebac 0304 	sub.w	r3, ip, r4
 8003dd6:	3b15      	subs	r3, #21
 8003dd8:	f023 0303 	bic.w	r3, r3, #3
 8003ddc:	3304      	adds	r3, #4
 8003dde:	f104 0015 	add.w	r0, r4, #21
 8003de2:	4584      	cmp	ip, r0
 8003de4:	bf38      	it	cc
 8003de6:	2304      	movcc	r3, #4
 8003de8:	50ca      	str	r2, [r1, r3]
 8003dea:	b10a      	cbz	r2, 8003df0 <__lshift+0xa4>
 8003dec:	f108 0602 	add.w	r6, r8, #2
 8003df0:	3e01      	subs	r6, #1
 8003df2:	4638      	mov	r0, r7
 8003df4:	612e      	str	r6, [r5, #16]
 8003df6:	4621      	mov	r1, r4
 8003df8:	f7ff fdd8 	bl	80039ac <_Bfree>
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8003e06:	3301      	adds	r3, #1
 8003e08:	e7c5      	b.n	8003d96 <__lshift+0x4a>
 8003e0a:	3904      	subs	r1, #4
 8003e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e14:	459c      	cmp	ip, r3
 8003e16:	d8f9      	bhi.n	8003e0c <__lshift+0xc0>
 8003e18:	e7ea      	b.n	8003df0 <__lshift+0xa4>
 8003e1a:	bf00      	nop
 8003e1c:	080048a7 	.word	0x080048a7
 8003e20:	080048b8 	.word	0x080048b8

08003e24 <__mcmp>:
 8003e24:	b530      	push	{r4, r5, lr}
 8003e26:	6902      	ldr	r2, [r0, #16]
 8003e28:	690c      	ldr	r4, [r1, #16]
 8003e2a:	1b12      	subs	r2, r2, r4
 8003e2c:	d10e      	bne.n	8003e4c <__mcmp+0x28>
 8003e2e:	f100 0314 	add.w	r3, r0, #20
 8003e32:	3114      	adds	r1, #20
 8003e34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003e3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003e40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003e44:	42a5      	cmp	r5, r4
 8003e46:	d003      	beq.n	8003e50 <__mcmp+0x2c>
 8003e48:	d305      	bcc.n	8003e56 <__mcmp+0x32>
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	bd30      	pop	{r4, r5, pc}
 8003e50:	4283      	cmp	r3, r0
 8003e52:	d3f3      	bcc.n	8003e3c <__mcmp+0x18>
 8003e54:	e7fa      	b.n	8003e4c <__mcmp+0x28>
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	e7f7      	b.n	8003e4c <__mcmp+0x28>

08003e5c <__mdiff>:
 8003e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	460c      	mov	r4, r1
 8003e62:	4606      	mov	r6, r0
 8003e64:	4611      	mov	r1, r2
 8003e66:	4620      	mov	r0, r4
 8003e68:	4690      	mov	r8, r2
 8003e6a:	f7ff ffdb 	bl	8003e24 <__mcmp>
 8003e6e:	1e05      	subs	r5, r0, #0
 8003e70:	d110      	bne.n	8003e94 <__mdiff+0x38>
 8003e72:	4629      	mov	r1, r5
 8003e74:	4630      	mov	r0, r6
 8003e76:	f7ff fd59 	bl	800392c <_Balloc>
 8003e7a:	b930      	cbnz	r0, 8003e8a <__mdiff+0x2e>
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <__mdiff+0x10c>)
 8003e7e:	4602      	mov	r2, r0
 8003e80:	f240 2137 	movw	r1, #567	; 0x237
 8003e84:	4839      	ldr	r0, [pc, #228]	; (8003f6c <__mdiff+0x110>)
 8003e86:	f000 f999 	bl	80041bc <__assert_func>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e94:	bfa4      	itt	ge
 8003e96:	4643      	movge	r3, r8
 8003e98:	46a0      	movge	r8, r4
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003ea0:	bfa6      	itte	ge
 8003ea2:	461c      	movge	r4, r3
 8003ea4:	2500      	movge	r5, #0
 8003ea6:	2501      	movlt	r5, #1
 8003ea8:	f7ff fd40 	bl	800392c <_Balloc>
 8003eac:	b920      	cbnz	r0, 8003eb8 <__mdiff+0x5c>
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <__mdiff+0x10c>)
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f240 2145 	movw	r1, #581	; 0x245
 8003eb6:	e7e5      	b.n	8003e84 <__mdiff+0x28>
 8003eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003ebc:	6926      	ldr	r6, [r4, #16]
 8003ebe:	60c5      	str	r5, [r0, #12]
 8003ec0:	f104 0914 	add.w	r9, r4, #20
 8003ec4:	f108 0514 	add.w	r5, r8, #20
 8003ec8:	f100 0e14 	add.w	lr, r0, #20
 8003ecc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ed4:	f108 0210 	add.w	r2, r8, #16
 8003ed8:	46f2      	mov	sl, lr
 8003eda:	2100      	movs	r1, #0
 8003edc:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003ee4:	fa11 f88b 	uxtah	r8, r1, fp
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	eba8 0801 	sub.w	r8, r8, r1
 8003ef0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003ef4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003ef8:	fa1f f888 	uxth.w	r8, r8
 8003efc:	1419      	asrs	r1, r3, #16
 8003efe:	454e      	cmp	r6, r9
 8003f00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003f04:	f84a 3b04 	str.w	r3, [sl], #4
 8003f08:	d8e8      	bhi.n	8003edc <__mdiff+0x80>
 8003f0a:	1b33      	subs	r3, r6, r4
 8003f0c:	3b15      	subs	r3, #21
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	3304      	adds	r3, #4
 8003f14:	3415      	adds	r4, #21
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	bf38      	it	cc
 8003f1a:	2304      	movcc	r3, #4
 8003f1c:	441d      	add	r5, r3
 8003f1e:	4473      	add	r3, lr
 8003f20:	469e      	mov	lr, r3
 8003f22:	462e      	mov	r6, r5
 8003f24:	4566      	cmp	r6, ip
 8003f26:	d30e      	bcc.n	8003f46 <__mdiff+0xea>
 8003f28:	f10c 0203 	add.w	r2, ip, #3
 8003f2c:	1b52      	subs	r2, r2, r5
 8003f2e:	f022 0203 	bic.w	r2, r2, #3
 8003f32:	3d03      	subs	r5, #3
 8003f34:	45ac      	cmp	ip, r5
 8003f36:	bf38      	it	cc
 8003f38:	2200      	movcc	r2, #0
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f40:	b17a      	cbz	r2, 8003f62 <__mdiff+0x106>
 8003f42:	6107      	str	r7, [r0, #16]
 8003f44:	e7a4      	b.n	8003e90 <__mdiff+0x34>
 8003f46:	f856 8b04 	ldr.w	r8, [r6], #4
 8003f4a:	fa11 f288 	uxtah	r2, r1, r8
 8003f4e:	1414      	asrs	r4, r2, #16
 8003f50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f54:	b292      	uxth	r2, r2
 8003f56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003f5a:	f84e 2b04 	str.w	r2, [lr], #4
 8003f5e:	1421      	asrs	r1, r4, #16
 8003f60:	e7e0      	b.n	8003f24 <__mdiff+0xc8>
 8003f62:	3f01      	subs	r7, #1
 8003f64:	e7ea      	b.n	8003f3c <__mdiff+0xe0>
 8003f66:	bf00      	nop
 8003f68:	080048a7 	.word	0x080048a7
 8003f6c:	080048b8 	.word	0x080048b8

08003f70 <__d2b>:
 8003f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f74:	460f      	mov	r7, r1
 8003f76:	2101      	movs	r1, #1
 8003f78:	ec59 8b10 	vmov	r8, r9, d0
 8003f7c:	4616      	mov	r6, r2
 8003f7e:	f7ff fcd5 	bl	800392c <_Balloc>
 8003f82:	4604      	mov	r4, r0
 8003f84:	b930      	cbnz	r0, 8003f94 <__d2b+0x24>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b24      	ldr	r3, [pc, #144]	; (800401c <__d2b+0xac>)
 8003f8a:	4825      	ldr	r0, [pc, #148]	; (8004020 <__d2b+0xb0>)
 8003f8c:	f240 310f 	movw	r1, #783	; 0x30f
 8003f90:	f000 f914 	bl	80041bc <__assert_func>
 8003f94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f9c:	bb2d      	cbnz	r5, 8003fea <__d2b+0x7a>
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8003fa4:	d026      	beq.n	8003ff4 <__d2b+0x84>
 8003fa6:	4668      	mov	r0, sp
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	f7ff fd87 	bl	8003abc <__lo0bits>
 8003fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003fb2:	b1e8      	cbz	r0, 8003ff0 <__d2b+0x80>
 8003fb4:	f1c0 0320 	rsb	r3, r0, #32
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	40c2      	lsrs	r2, r0
 8003fc0:	6163      	str	r3, [r4, #20]
 8003fc2:	9201      	str	r2, [sp, #4]
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	61a3      	str	r3, [r4, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf14      	ite	ne
 8003fcc:	2202      	movne	r2, #2
 8003fce:	2201      	moveq	r2, #1
 8003fd0:	6122      	str	r2, [r4, #16]
 8003fd2:	b1bd      	cbz	r5, 8004004 <__d2b+0x94>
 8003fd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003fd8:	4405      	add	r5, r0
 8003fda:	603d      	str	r5, [r7, #0]
 8003fdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003fe0:	6030      	str	r0, [r6, #0]
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	b003      	add	sp, #12
 8003fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	e7d6      	b.n	8003f9e <__d2b+0x2e>
 8003ff0:	6161      	str	r1, [r4, #20]
 8003ff2:	e7e7      	b.n	8003fc4 <__d2b+0x54>
 8003ff4:	a801      	add	r0, sp, #4
 8003ff6:	f7ff fd61 	bl	8003abc <__lo0bits>
 8003ffa:	9b01      	ldr	r3, [sp, #4]
 8003ffc:	6163      	str	r3, [r4, #20]
 8003ffe:	3020      	adds	r0, #32
 8004000:	2201      	movs	r2, #1
 8004002:	e7e5      	b.n	8003fd0 <__d2b+0x60>
 8004004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800400c:	6038      	str	r0, [r7, #0]
 800400e:	6918      	ldr	r0, [r3, #16]
 8004010:	f7ff fd34 	bl	8003a7c <__hi0bits>
 8004014:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004018:	e7e2      	b.n	8003fe0 <__d2b+0x70>
 800401a:	bf00      	nop
 800401c:	080048a7 	.word	0x080048a7
 8004020:	080048b8 	.word	0x080048b8

08004024 <__sflush_r>:
 8004024:	898a      	ldrh	r2, [r1, #12]
 8004026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402a:	4605      	mov	r5, r0
 800402c:	0710      	lsls	r0, r2, #28
 800402e:	460c      	mov	r4, r1
 8004030:	d458      	bmi.n	80040e4 <__sflush_r+0xc0>
 8004032:	684b      	ldr	r3, [r1, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	dc05      	bgt.n	8004044 <__sflush_r+0x20>
 8004038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	dc02      	bgt.n	8004044 <__sflush_r+0x20>
 800403e:	2000      	movs	r0, #0
 8004040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004046:	2e00      	cmp	r6, #0
 8004048:	d0f9      	beq.n	800403e <__sflush_r+0x1a>
 800404a:	2300      	movs	r3, #0
 800404c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004050:	682f      	ldr	r7, [r5, #0]
 8004052:	6a21      	ldr	r1, [r4, #32]
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	d032      	beq.n	80040be <__sflush_r+0x9a>
 8004058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	075a      	lsls	r2, r3, #29
 800405e:	d505      	bpl.n	800406c <__sflush_r+0x48>
 8004060:	6863      	ldr	r3, [r4, #4]
 8004062:	1ac0      	subs	r0, r0, r3
 8004064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004066:	b10b      	cbz	r3, 800406c <__sflush_r+0x48>
 8004068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800406a:	1ac0      	subs	r0, r0, r3
 800406c:	2300      	movs	r3, #0
 800406e:	4602      	mov	r2, r0
 8004070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004072:	6a21      	ldr	r1, [r4, #32]
 8004074:	4628      	mov	r0, r5
 8004076:	47b0      	blx	r6
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	d106      	bne.n	800408c <__sflush_r+0x68>
 800407e:	6829      	ldr	r1, [r5, #0]
 8004080:	291d      	cmp	r1, #29
 8004082:	d82b      	bhi.n	80040dc <__sflush_r+0xb8>
 8004084:	4a29      	ldr	r2, [pc, #164]	; (800412c <__sflush_r+0x108>)
 8004086:	410a      	asrs	r2, r1
 8004088:	07d6      	lsls	r6, r2, #31
 800408a:	d427      	bmi.n	80040dc <__sflush_r+0xb8>
 800408c:	2200      	movs	r2, #0
 800408e:	6062      	str	r2, [r4, #4]
 8004090:	04d9      	lsls	r1, r3, #19
 8004092:	6922      	ldr	r2, [r4, #16]
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	d504      	bpl.n	80040a2 <__sflush_r+0x7e>
 8004098:	1c42      	adds	r2, r0, #1
 800409a:	d101      	bne.n	80040a0 <__sflush_r+0x7c>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b903      	cbnz	r3, 80040a2 <__sflush_r+0x7e>
 80040a0:	6560      	str	r0, [r4, #84]	; 0x54
 80040a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040a4:	602f      	str	r7, [r5, #0]
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d0c9      	beq.n	800403e <__sflush_r+0x1a>
 80040aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ae:	4299      	cmp	r1, r3
 80040b0:	d002      	beq.n	80040b8 <__sflush_r+0x94>
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7ff fb3a 	bl	800372c <_free_r>
 80040b8:	2000      	movs	r0, #0
 80040ba:	6360      	str	r0, [r4, #52]	; 0x34
 80040bc:	e7c0      	b.n	8004040 <__sflush_r+0x1c>
 80040be:	2301      	movs	r3, #1
 80040c0:	4628      	mov	r0, r5
 80040c2:	47b0      	blx	r6
 80040c4:	1c41      	adds	r1, r0, #1
 80040c6:	d1c8      	bne.n	800405a <__sflush_r+0x36>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0c5      	beq.n	800405a <__sflush_r+0x36>
 80040ce:	2b1d      	cmp	r3, #29
 80040d0:	d001      	beq.n	80040d6 <__sflush_r+0xb2>
 80040d2:	2b16      	cmp	r3, #22
 80040d4:	d101      	bne.n	80040da <__sflush_r+0xb6>
 80040d6:	602f      	str	r7, [r5, #0]
 80040d8:	e7b1      	b.n	800403e <__sflush_r+0x1a>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	e7ad      	b.n	8004040 <__sflush_r+0x1c>
 80040e4:	690f      	ldr	r7, [r1, #16]
 80040e6:	2f00      	cmp	r7, #0
 80040e8:	d0a9      	beq.n	800403e <__sflush_r+0x1a>
 80040ea:	0793      	lsls	r3, r2, #30
 80040ec:	680e      	ldr	r6, [r1, #0]
 80040ee:	bf08      	it	eq
 80040f0:	694b      	ldreq	r3, [r1, #20]
 80040f2:	600f      	str	r7, [r1, #0]
 80040f4:	bf18      	it	ne
 80040f6:	2300      	movne	r3, #0
 80040f8:	eba6 0807 	sub.w	r8, r6, r7
 80040fc:	608b      	str	r3, [r1, #8]
 80040fe:	f1b8 0f00 	cmp.w	r8, #0
 8004102:	dd9c      	ble.n	800403e <__sflush_r+0x1a>
 8004104:	6a21      	ldr	r1, [r4, #32]
 8004106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004108:	4643      	mov	r3, r8
 800410a:	463a      	mov	r2, r7
 800410c:	4628      	mov	r0, r5
 800410e:	47b0      	blx	r6
 8004110:	2800      	cmp	r0, #0
 8004112:	dc06      	bgt.n	8004122 <__sflush_r+0xfe>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	e78e      	b.n	8004040 <__sflush_r+0x1c>
 8004122:	4407      	add	r7, r0
 8004124:	eba8 0800 	sub.w	r8, r8, r0
 8004128:	e7e9      	b.n	80040fe <__sflush_r+0xda>
 800412a:	bf00      	nop
 800412c:	dfbffffe 	.word	0xdfbffffe

08004130 <_fflush_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	690b      	ldr	r3, [r1, #16]
 8004134:	4605      	mov	r5, r0
 8004136:	460c      	mov	r4, r1
 8004138:	b913      	cbnz	r3, 8004140 <_fflush_r+0x10>
 800413a:	2500      	movs	r5, #0
 800413c:	4628      	mov	r0, r5
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	b118      	cbz	r0, 800414a <_fflush_r+0x1a>
 8004142:	6a03      	ldr	r3, [r0, #32]
 8004144:	b90b      	cbnz	r3, 800414a <_fflush_r+0x1a>
 8004146:	f7fe fb7d 	bl	8002844 <__sinit>
 800414a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f3      	beq.n	800413a <_fflush_r+0xa>
 8004152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004154:	07d0      	lsls	r0, r2, #31
 8004156:	d404      	bmi.n	8004162 <_fflush_r+0x32>
 8004158:	0599      	lsls	r1, r3, #22
 800415a:	d402      	bmi.n	8004162 <_fflush_r+0x32>
 800415c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800415e:	f7fe fc68 	bl	8002a32 <__retarget_lock_acquire_recursive>
 8004162:	4628      	mov	r0, r5
 8004164:	4621      	mov	r1, r4
 8004166:	f7ff ff5d 	bl	8004024 <__sflush_r>
 800416a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800416c:	07da      	lsls	r2, r3, #31
 800416e:	4605      	mov	r5, r0
 8004170:	d4e4      	bmi.n	800413c <_fflush_r+0xc>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	059b      	lsls	r3, r3, #22
 8004176:	d4e1      	bmi.n	800413c <_fflush_r+0xc>
 8004178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800417a:	f7fe fc5b 	bl	8002a34 <__retarget_lock_release_recursive>
 800417e:	e7dd      	b.n	800413c <_fflush_r+0xc>

08004180 <_sbrk_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d06      	ldr	r5, [pc, #24]	; (800419c <_sbrk_r+0x1c>)
 8004184:	2300      	movs	r3, #0
 8004186:	4604      	mov	r4, r0
 8004188:	4608      	mov	r0, r1
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	f7fd fdc8 	bl	8001d20 <_sbrk>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_sbrk_r+0x1a>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_sbrk_r+0x1a>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	2000032c 	.word	0x2000032c

080041a0 <memcpy>:
 80041a0:	440a      	add	r2, r1
 80041a2:	4291      	cmp	r1, r2
 80041a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041a8:	d100      	bne.n	80041ac <memcpy+0xc>
 80041aa:	4770      	bx	lr
 80041ac:	b510      	push	{r4, lr}
 80041ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041b6:	4291      	cmp	r1, r2
 80041b8:	d1f9      	bne.n	80041ae <memcpy+0xe>
 80041ba:	bd10      	pop	{r4, pc}

080041bc <__assert_func>:
 80041bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041be:	4614      	mov	r4, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <__assert_func+0x2c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4605      	mov	r5, r0
 80041c8:	68d8      	ldr	r0, [r3, #12]
 80041ca:	b14c      	cbz	r4, 80041e0 <__assert_func+0x24>
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <__assert_func+0x30>)
 80041ce:	9100      	str	r1, [sp, #0]
 80041d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041d4:	4906      	ldr	r1, [pc, #24]	; (80041f0 <__assert_func+0x34>)
 80041d6:	462b      	mov	r3, r5
 80041d8:	f000 f844 	bl	8004264 <fiprintf>
 80041dc:	f000 f854 	bl	8004288 <abort>
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <__assert_func+0x38>)
 80041e2:	461c      	mov	r4, r3
 80041e4:	e7f3      	b.n	80041ce <__assert_func+0x12>
 80041e6:	bf00      	nop
 80041e8:	2000005c 	.word	0x2000005c
 80041ec:	08004a1e 	.word	0x08004a1e
 80041f0:	08004a2b 	.word	0x08004a2b
 80041f4:	08004a59 	.word	0x08004a59

080041f8 <_calloc_r>:
 80041f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041fa:	fba1 2402 	umull	r2, r4, r1, r2
 80041fe:	b94c      	cbnz	r4, 8004214 <_calloc_r+0x1c>
 8004200:	4611      	mov	r1, r2
 8004202:	9201      	str	r2, [sp, #4]
 8004204:	f7ff fb06 	bl	8003814 <_malloc_r>
 8004208:	9a01      	ldr	r2, [sp, #4]
 800420a:	4605      	mov	r5, r0
 800420c:	b930      	cbnz	r0, 800421c <_calloc_r+0x24>
 800420e:	4628      	mov	r0, r5
 8004210:	b003      	add	sp, #12
 8004212:	bd30      	pop	{r4, r5, pc}
 8004214:	220c      	movs	r2, #12
 8004216:	6002      	str	r2, [r0, #0]
 8004218:	2500      	movs	r5, #0
 800421a:	e7f8      	b.n	800420e <_calloc_r+0x16>
 800421c:	4621      	mov	r1, r4
 800421e:	f7fe fb8a 	bl	8002936 <memset>
 8004222:	e7f4      	b.n	800420e <_calloc_r+0x16>

08004224 <__ascii_mbtowc>:
 8004224:	b082      	sub	sp, #8
 8004226:	b901      	cbnz	r1, 800422a <__ascii_mbtowc+0x6>
 8004228:	a901      	add	r1, sp, #4
 800422a:	b142      	cbz	r2, 800423e <__ascii_mbtowc+0x1a>
 800422c:	b14b      	cbz	r3, 8004242 <__ascii_mbtowc+0x1e>
 800422e:	7813      	ldrb	r3, [r2, #0]
 8004230:	600b      	str	r3, [r1, #0]
 8004232:	7812      	ldrb	r2, [r2, #0]
 8004234:	1e10      	subs	r0, r2, #0
 8004236:	bf18      	it	ne
 8004238:	2001      	movne	r0, #1
 800423a:	b002      	add	sp, #8
 800423c:	4770      	bx	lr
 800423e:	4610      	mov	r0, r2
 8004240:	e7fb      	b.n	800423a <__ascii_mbtowc+0x16>
 8004242:	f06f 0001 	mvn.w	r0, #1
 8004246:	e7f8      	b.n	800423a <__ascii_mbtowc+0x16>

08004248 <__ascii_wctomb>:
 8004248:	b149      	cbz	r1, 800425e <__ascii_wctomb+0x16>
 800424a:	2aff      	cmp	r2, #255	; 0xff
 800424c:	bf85      	ittet	hi
 800424e:	238a      	movhi	r3, #138	; 0x8a
 8004250:	6003      	strhi	r3, [r0, #0]
 8004252:	700a      	strbls	r2, [r1, #0]
 8004254:	f04f 30ff 	movhi.w	r0, #4294967295
 8004258:	bf98      	it	ls
 800425a:	2001      	movls	r0, #1
 800425c:	4770      	bx	lr
 800425e:	4608      	mov	r0, r1
 8004260:	4770      	bx	lr
	...

08004264 <fiprintf>:
 8004264:	b40e      	push	{r1, r2, r3}
 8004266:	b503      	push	{r0, r1, lr}
 8004268:	4601      	mov	r1, r0
 800426a:	ab03      	add	r3, sp, #12
 800426c:	4805      	ldr	r0, [pc, #20]	; (8004284 <fiprintf+0x20>)
 800426e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004272:	6800      	ldr	r0, [r0, #0]
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	f000 f837 	bl	80042e8 <_vfiprintf_r>
 800427a:	b002      	add	sp, #8
 800427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004280:	b003      	add	sp, #12
 8004282:	4770      	bx	lr
 8004284:	2000005c 	.word	0x2000005c

08004288 <abort>:
 8004288:	b508      	push	{r3, lr}
 800428a:	2006      	movs	r0, #6
 800428c:	f000 fa04 	bl	8004698 <raise>
 8004290:	2001      	movs	r0, #1
 8004292:	f7fd fccd 	bl	8001c30 <_exit>

08004296 <__sfputc_r>:
 8004296:	6893      	ldr	r3, [r2, #8]
 8004298:	3b01      	subs	r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	b410      	push	{r4}
 800429e:	6093      	str	r3, [r2, #8]
 80042a0:	da08      	bge.n	80042b4 <__sfputc_r+0x1e>
 80042a2:	6994      	ldr	r4, [r2, #24]
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	db01      	blt.n	80042ac <__sfputc_r+0x16>
 80042a8:	290a      	cmp	r1, #10
 80042aa:	d103      	bne.n	80042b4 <__sfputc_r+0x1e>
 80042ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b0:	f000 b934 	b.w	800451c <__swbuf_r>
 80042b4:	6813      	ldr	r3, [r2, #0]
 80042b6:	1c58      	adds	r0, r3, #1
 80042b8:	6010      	str	r0, [r2, #0]
 80042ba:	7019      	strb	r1, [r3, #0]
 80042bc:	4608      	mov	r0, r1
 80042be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <__sfputs_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	4606      	mov	r6, r0
 80042c8:	460f      	mov	r7, r1
 80042ca:	4614      	mov	r4, r2
 80042cc:	18d5      	adds	r5, r2, r3
 80042ce:	42ac      	cmp	r4, r5
 80042d0:	d101      	bne.n	80042d6 <__sfputs_r+0x12>
 80042d2:	2000      	movs	r0, #0
 80042d4:	e007      	b.n	80042e6 <__sfputs_r+0x22>
 80042d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042da:	463a      	mov	r2, r7
 80042dc:	4630      	mov	r0, r6
 80042de:	f7ff ffda 	bl	8004296 <__sfputc_r>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d1f3      	bne.n	80042ce <__sfputs_r+0xa>
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042e8 <_vfiprintf_r>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	460d      	mov	r5, r1
 80042ee:	b09d      	sub	sp, #116	; 0x74
 80042f0:	4614      	mov	r4, r2
 80042f2:	4698      	mov	r8, r3
 80042f4:	4606      	mov	r6, r0
 80042f6:	b118      	cbz	r0, 8004300 <_vfiprintf_r+0x18>
 80042f8:	6a03      	ldr	r3, [r0, #32]
 80042fa:	b90b      	cbnz	r3, 8004300 <_vfiprintf_r+0x18>
 80042fc:	f7fe faa2 	bl	8002844 <__sinit>
 8004300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004302:	07d9      	lsls	r1, r3, #31
 8004304:	d405      	bmi.n	8004312 <_vfiprintf_r+0x2a>
 8004306:	89ab      	ldrh	r3, [r5, #12]
 8004308:	059a      	lsls	r2, r3, #22
 800430a:	d402      	bmi.n	8004312 <_vfiprintf_r+0x2a>
 800430c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800430e:	f7fe fb90 	bl	8002a32 <__retarget_lock_acquire_recursive>
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	071b      	lsls	r3, r3, #28
 8004316:	d501      	bpl.n	800431c <_vfiprintf_r+0x34>
 8004318:	692b      	ldr	r3, [r5, #16]
 800431a:	b99b      	cbnz	r3, 8004344 <_vfiprintf_r+0x5c>
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f000 f93a 	bl	8004598 <__swsetup_r>
 8004324:	b170      	cbz	r0, 8004344 <_vfiprintf_r+0x5c>
 8004326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004328:	07dc      	lsls	r4, r3, #31
 800432a:	d504      	bpl.n	8004336 <_vfiprintf_r+0x4e>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	b01d      	add	sp, #116	; 0x74
 8004332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004336:	89ab      	ldrh	r3, [r5, #12]
 8004338:	0598      	lsls	r0, r3, #22
 800433a:	d4f7      	bmi.n	800432c <_vfiprintf_r+0x44>
 800433c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800433e:	f7fe fb79 	bl	8002a34 <__retarget_lock_release_recursive>
 8004342:	e7f3      	b.n	800432c <_vfiprintf_r+0x44>
 8004344:	2300      	movs	r3, #0
 8004346:	9309      	str	r3, [sp, #36]	; 0x24
 8004348:	2320      	movs	r3, #32
 800434a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800434e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004352:	2330      	movs	r3, #48	; 0x30
 8004354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004508 <_vfiprintf_r+0x220>
 8004358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800435c:	f04f 0901 	mov.w	r9, #1
 8004360:	4623      	mov	r3, r4
 8004362:	469a      	mov	sl, r3
 8004364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004368:	b10a      	cbz	r2, 800436e <_vfiprintf_r+0x86>
 800436a:	2a25      	cmp	r2, #37	; 0x25
 800436c:	d1f9      	bne.n	8004362 <_vfiprintf_r+0x7a>
 800436e:	ebba 0b04 	subs.w	fp, sl, r4
 8004372:	d00b      	beq.n	800438c <_vfiprintf_r+0xa4>
 8004374:	465b      	mov	r3, fp
 8004376:	4622      	mov	r2, r4
 8004378:	4629      	mov	r1, r5
 800437a:	4630      	mov	r0, r6
 800437c:	f7ff ffa2 	bl	80042c4 <__sfputs_r>
 8004380:	3001      	adds	r0, #1
 8004382:	f000 80a9 	beq.w	80044d8 <_vfiprintf_r+0x1f0>
 8004386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004388:	445a      	add	r2, fp
 800438a:	9209      	str	r2, [sp, #36]	; 0x24
 800438c:	f89a 3000 	ldrb.w	r3, [sl]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80a1 	beq.w	80044d8 <_vfiprintf_r+0x1f0>
 8004396:	2300      	movs	r3, #0
 8004398:	f04f 32ff 	mov.w	r2, #4294967295
 800439c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a0:	f10a 0a01 	add.w	sl, sl, #1
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ac:	931a      	str	r3, [sp, #104]	; 0x68
 80043ae:	4654      	mov	r4, sl
 80043b0:	2205      	movs	r2, #5
 80043b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b6:	4854      	ldr	r0, [pc, #336]	; (8004508 <_vfiprintf_r+0x220>)
 80043b8:	f7fb ff0a 	bl	80001d0 <memchr>
 80043bc:	9a04      	ldr	r2, [sp, #16]
 80043be:	b9d8      	cbnz	r0, 80043f8 <_vfiprintf_r+0x110>
 80043c0:	06d1      	lsls	r1, r2, #27
 80043c2:	bf44      	itt	mi
 80043c4:	2320      	movmi	r3, #32
 80043c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ca:	0713      	lsls	r3, r2, #28
 80043cc:	bf44      	itt	mi
 80043ce:	232b      	movmi	r3, #43	; 0x2b
 80043d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043d4:	f89a 3000 	ldrb.w	r3, [sl]
 80043d8:	2b2a      	cmp	r3, #42	; 0x2a
 80043da:	d015      	beq.n	8004408 <_vfiprintf_r+0x120>
 80043dc:	9a07      	ldr	r2, [sp, #28]
 80043de:	4654      	mov	r4, sl
 80043e0:	2000      	movs	r0, #0
 80043e2:	f04f 0c0a 	mov.w	ip, #10
 80043e6:	4621      	mov	r1, r4
 80043e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ec:	3b30      	subs	r3, #48	; 0x30
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d94d      	bls.n	800448e <_vfiprintf_r+0x1a6>
 80043f2:	b1b0      	cbz	r0, 8004422 <_vfiprintf_r+0x13a>
 80043f4:	9207      	str	r2, [sp, #28]
 80043f6:	e014      	b.n	8004422 <_vfiprintf_r+0x13a>
 80043f8:	eba0 0308 	sub.w	r3, r0, r8
 80043fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004400:	4313      	orrs	r3, r2
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	46a2      	mov	sl, r4
 8004406:	e7d2      	b.n	80043ae <_vfiprintf_r+0xc6>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	1d19      	adds	r1, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	9103      	str	r1, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfbb      	ittet	lt
 8004414:	425b      	neglt	r3, r3
 8004416:	f042 0202 	orrlt.w	r2, r2, #2
 800441a:	9307      	strge	r3, [sp, #28]
 800441c:	9307      	strlt	r3, [sp, #28]
 800441e:	bfb8      	it	lt
 8004420:	9204      	strlt	r2, [sp, #16]
 8004422:	7823      	ldrb	r3, [r4, #0]
 8004424:	2b2e      	cmp	r3, #46	; 0x2e
 8004426:	d10c      	bne.n	8004442 <_vfiprintf_r+0x15a>
 8004428:	7863      	ldrb	r3, [r4, #1]
 800442a:	2b2a      	cmp	r3, #42	; 0x2a
 800442c:	d134      	bne.n	8004498 <_vfiprintf_r+0x1b0>
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	9203      	str	r2, [sp, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfb8      	it	lt
 800443a:	f04f 33ff 	movlt.w	r3, #4294967295
 800443e:	3402      	adds	r4, #2
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004518 <_vfiprintf_r+0x230>
 8004446:	7821      	ldrb	r1, [r4, #0]
 8004448:	2203      	movs	r2, #3
 800444a:	4650      	mov	r0, sl
 800444c:	f7fb fec0 	bl	80001d0 <memchr>
 8004450:	b138      	cbz	r0, 8004462 <_vfiprintf_r+0x17a>
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	eba0 000a 	sub.w	r0, r0, sl
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	4082      	lsls	r2, r0
 800445c:	4313      	orrs	r3, r2
 800445e:	3401      	adds	r4, #1
 8004460:	9304      	str	r3, [sp, #16]
 8004462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004466:	4829      	ldr	r0, [pc, #164]	; (800450c <_vfiprintf_r+0x224>)
 8004468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800446c:	2206      	movs	r2, #6
 800446e:	f7fb feaf 	bl	80001d0 <memchr>
 8004472:	2800      	cmp	r0, #0
 8004474:	d03f      	beq.n	80044f6 <_vfiprintf_r+0x20e>
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <_vfiprintf_r+0x228>)
 8004478:	bb1b      	cbnz	r3, 80044c2 <_vfiprintf_r+0x1da>
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	3307      	adds	r3, #7
 800447e:	f023 0307 	bic.w	r3, r3, #7
 8004482:	3308      	adds	r3, #8
 8004484:	9303      	str	r3, [sp, #12]
 8004486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004488:	443b      	add	r3, r7
 800448a:	9309      	str	r3, [sp, #36]	; 0x24
 800448c:	e768      	b.n	8004360 <_vfiprintf_r+0x78>
 800448e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004492:	460c      	mov	r4, r1
 8004494:	2001      	movs	r0, #1
 8004496:	e7a6      	b.n	80043e6 <_vfiprintf_r+0xfe>
 8004498:	2300      	movs	r3, #0
 800449a:	3401      	adds	r4, #1
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	4619      	mov	r1, r3
 80044a0:	f04f 0c0a 	mov.w	ip, #10
 80044a4:	4620      	mov	r0, r4
 80044a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044aa:	3a30      	subs	r2, #48	; 0x30
 80044ac:	2a09      	cmp	r2, #9
 80044ae:	d903      	bls.n	80044b8 <_vfiprintf_r+0x1d0>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0c6      	beq.n	8004442 <_vfiprintf_r+0x15a>
 80044b4:	9105      	str	r1, [sp, #20]
 80044b6:	e7c4      	b.n	8004442 <_vfiprintf_r+0x15a>
 80044b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80044bc:	4604      	mov	r4, r0
 80044be:	2301      	movs	r3, #1
 80044c0:	e7f0      	b.n	80044a4 <_vfiprintf_r+0x1bc>
 80044c2:	ab03      	add	r3, sp, #12
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	462a      	mov	r2, r5
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <_vfiprintf_r+0x22c>)
 80044ca:	a904      	add	r1, sp, #16
 80044cc:	4630      	mov	r0, r6
 80044ce:	f7fd fd67 	bl	8001fa0 <_printf_float>
 80044d2:	4607      	mov	r7, r0
 80044d4:	1c78      	adds	r0, r7, #1
 80044d6:	d1d6      	bne.n	8004486 <_vfiprintf_r+0x19e>
 80044d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044da:	07d9      	lsls	r1, r3, #31
 80044dc:	d405      	bmi.n	80044ea <_vfiprintf_r+0x202>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	059a      	lsls	r2, r3, #22
 80044e2:	d402      	bmi.n	80044ea <_vfiprintf_r+0x202>
 80044e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e6:	f7fe faa5 	bl	8002a34 <__retarget_lock_release_recursive>
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	065b      	lsls	r3, r3, #25
 80044ee:	f53f af1d 	bmi.w	800432c <_vfiprintf_r+0x44>
 80044f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f4:	e71c      	b.n	8004330 <_vfiprintf_r+0x48>
 80044f6:	ab03      	add	r3, sp, #12
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	462a      	mov	r2, r5
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <_vfiprintf_r+0x22c>)
 80044fe:	a904      	add	r1, sp, #16
 8004500:	4630      	mov	r0, r6
 8004502:	f7fd fff1 	bl	80024e8 <_printf_i>
 8004506:	e7e4      	b.n	80044d2 <_vfiprintf_r+0x1ea>
 8004508:	08004b5b 	.word	0x08004b5b
 800450c:	08004b65 	.word	0x08004b65
 8004510:	08001fa1 	.word	0x08001fa1
 8004514:	080042c5 	.word	0x080042c5
 8004518:	08004b61 	.word	0x08004b61

0800451c <__swbuf_r>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	460e      	mov	r6, r1
 8004520:	4614      	mov	r4, r2
 8004522:	4605      	mov	r5, r0
 8004524:	b118      	cbz	r0, 800452e <__swbuf_r+0x12>
 8004526:	6a03      	ldr	r3, [r0, #32]
 8004528:	b90b      	cbnz	r3, 800452e <__swbuf_r+0x12>
 800452a:	f7fe f98b 	bl	8002844 <__sinit>
 800452e:	69a3      	ldr	r3, [r4, #24]
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	071a      	lsls	r2, r3, #28
 8004536:	d525      	bpl.n	8004584 <__swbuf_r+0x68>
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	b31b      	cbz	r3, 8004584 <__swbuf_r+0x68>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	6922      	ldr	r2, [r4, #16]
 8004540:	1a98      	subs	r0, r3, r2
 8004542:	6963      	ldr	r3, [r4, #20]
 8004544:	b2f6      	uxtb	r6, r6
 8004546:	4283      	cmp	r3, r0
 8004548:	4637      	mov	r7, r6
 800454a:	dc04      	bgt.n	8004556 <__swbuf_r+0x3a>
 800454c:	4621      	mov	r1, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f7ff fdee 	bl	8004130 <_fflush_r>
 8004554:	b9e0      	cbnz	r0, 8004590 <__swbuf_r+0x74>
 8004556:	68a3      	ldr	r3, [r4, #8]
 8004558:	3b01      	subs	r3, #1
 800455a:	60a3      	str	r3, [r4, #8]
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	6022      	str	r2, [r4, #0]
 8004562:	701e      	strb	r6, [r3, #0]
 8004564:	6962      	ldr	r2, [r4, #20]
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	429a      	cmp	r2, r3
 800456a:	d004      	beq.n	8004576 <__swbuf_r+0x5a>
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	07db      	lsls	r3, r3, #31
 8004570:	d506      	bpl.n	8004580 <__swbuf_r+0x64>
 8004572:	2e0a      	cmp	r6, #10
 8004574:	d104      	bne.n	8004580 <__swbuf_r+0x64>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f7ff fdd9 	bl	8004130 <_fflush_r>
 800457e:	b938      	cbnz	r0, 8004590 <__swbuf_r+0x74>
 8004580:	4638      	mov	r0, r7
 8004582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004584:	4621      	mov	r1, r4
 8004586:	4628      	mov	r0, r5
 8004588:	f000 f806 	bl	8004598 <__swsetup_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	d0d5      	beq.n	800453c <__swbuf_r+0x20>
 8004590:	f04f 37ff 	mov.w	r7, #4294967295
 8004594:	e7f4      	b.n	8004580 <__swbuf_r+0x64>
	...

08004598 <__swsetup_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <__swsetup_r+0xac>)
 800459c:	4605      	mov	r5, r0
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	460c      	mov	r4, r1
 80045a2:	b118      	cbz	r0, 80045ac <__swsetup_r+0x14>
 80045a4:	6a03      	ldr	r3, [r0, #32]
 80045a6:	b90b      	cbnz	r3, 80045ac <__swsetup_r+0x14>
 80045a8:	f7fe f94c 	bl	8002844 <__sinit>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045b2:	0718      	lsls	r0, r3, #28
 80045b4:	d422      	bmi.n	80045fc <__swsetup_r+0x64>
 80045b6:	06d9      	lsls	r1, r3, #27
 80045b8:	d407      	bmi.n	80045ca <__swsetup_r+0x32>
 80045ba:	2309      	movs	r3, #9
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e034      	b.n	8004634 <__swsetup_r+0x9c>
 80045ca:	0758      	lsls	r0, r3, #29
 80045cc:	d512      	bpl.n	80045f4 <__swsetup_r+0x5c>
 80045ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045d0:	b141      	cbz	r1, 80045e4 <__swsetup_r+0x4c>
 80045d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d6:	4299      	cmp	r1, r3
 80045d8:	d002      	beq.n	80045e0 <__swsetup_r+0x48>
 80045da:	4628      	mov	r0, r5
 80045dc:	f7ff f8a6 	bl	800372c <_free_r>
 80045e0:	2300      	movs	r3, #0
 80045e2:	6363      	str	r3, [r4, #52]	; 0x34
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	2300      	movs	r3, #0
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	81a3      	strh	r3, [r4, #12]
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	b94b      	cbnz	r3, 8004614 <__swsetup_r+0x7c>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460a:	d003      	beq.n	8004614 <__swsetup_r+0x7c>
 800460c:	4621      	mov	r1, r4
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f884 	bl	800471c <__smakebuf_r>
 8004614:	89a0      	ldrh	r0, [r4, #12]
 8004616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800461a:	f010 0301 	ands.w	r3, r0, #1
 800461e:	d00a      	beq.n	8004636 <__swsetup_r+0x9e>
 8004620:	2300      	movs	r3, #0
 8004622:	60a3      	str	r3, [r4, #8]
 8004624:	6963      	ldr	r3, [r4, #20]
 8004626:	425b      	negs	r3, r3
 8004628:	61a3      	str	r3, [r4, #24]
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	b943      	cbnz	r3, 8004640 <__swsetup_r+0xa8>
 800462e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004632:	d1c4      	bne.n	80045be <__swsetup_r+0x26>
 8004634:	bd38      	pop	{r3, r4, r5, pc}
 8004636:	0781      	lsls	r1, r0, #30
 8004638:	bf58      	it	pl
 800463a:	6963      	ldrpl	r3, [r4, #20]
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	e7f4      	b.n	800462a <__swsetup_r+0x92>
 8004640:	2000      	movs	r0, #0
 8004642:	e7f7      	b.n	8004634 <__swsetup_r+0x9c>
 8004644:	2000005c 	.word	0x2000005c

08004648 <_raise_r>:
 8004648:	291f      	cmp	r1, #31
 800464a:	b538      	push	{r3, r4, r5, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	460d      	mov	r5, r1
 8004650:	d904      	bls.n	800465c <_raise_r+0x14>
 8004652:	2316      	movs	r3, #22
 8004654:	6003      	str	r3, [r0, #0]
 8004656:	f04f 30ff 	mov.w	r0, #4294967295
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800465e:	b112      	cbz	r2, 8004666 <_raise_r+0x1e>
 8004660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004664:	b94b      	cbnz	r3, 800467a <_raise_r+0x32>
 8004666:	4620      	mov	r0, r4
 8004668:	f000 f830 	bl	80046cc <_getpid_r>
 800466c:	462a      	mov	r2, r5
 800466e:	4601      	mov	r1, r0
 8004670:	4620      	mov	r0, r4
 8004672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004676:	f000 b817 	b.w	80046a8 <_kill_r>
 800467a:	2b01      	cmp	r3, #1
 800467c:	d00a      	beq.n	8004694 <_raise_r+0x4c>
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	d103      	bne.n	800468a <_raise_r+0x42>
 8004682:	2316      	movs	r3, #22
 8004684:	6003      	str	r3, [r0, #0]
 8004686:	2001      	movs	r0, #1
 8004688:	e7e7      	b.n	800465a <_raise_r+0x12>
 800468a:	2400      	movs	r4, #0
 800468c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004690:	4628      	mov	r0, r5
 8004692:	4798      	blx	r3
 8004694:	2000      	movs	r0, #0
 8004696:	e7e0      	b.n	800465a <_raise_r+0x12>

08004698 <raise>:
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <raise+0xc>)
 800469a:	4601      	mov	r1, r0
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f7ff bfd3 	b.w	8004648 <_raise_r>
 80046a2:	bf00      	nop
 80046a4:	2000005c 	.word	0x2000005c

080046a8 <_kill_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <_kill_r+0x20>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	f7fd faab 	bl	8001c10 <_kill>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d102      	bne.n	80046c4 <_kill_r+0x1c>
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	b103      	cbz	r3, 80046c4 <_kill_r+0x1c>
 80046c2:	6023      	str	r3, [r4, #0]
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
 80046c6:	bf00      	nop
 80046c8:	2000032c 	.word	0x2000032c

080046cc <_getpid_r>:
 80046cc:	f7fd ba98 	b.w	8001c00 <_getpid>

080046d0 <__swhatbuf_r>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	460c      	mov	r4, r1
 80046d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d8:	2900      	cmp	r1, #0
 80046da:	b096      	sub	sp, #88	; 0x58
 80046dc:	4615      	mov	r5, r2
 80046de:	461e      	mov	r6, r3
 80046e0:	da0d      	bge.n	80046fe <__swhatbuf_r+0x2e>
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046f2:	2340      	movne	r3, #64	; 0x40
 80046f4:	2000      	movs	r0, #0
 80046f6:	6031      	str	r1, [r6, #0]
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	b016      	add	sp, #88	; 0x58
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
 80046fe:	466a      	mov	r2, sp
 8004700:	f000 f848 	bl	8004794 <_fstat_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	dbec      	blt.n	80046e2 <__swhatbuf_r+0x12>
 8004708:	9901      	ldr	r1, [sp, #4]
 800470a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800470e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004712:	4259      	negs	r1, r3
 8004714:	4159      	adcs	r1, r3
 8004716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471a:	e7eb      	b.n	80046f4 <__swhatbuf_r+0x24>

0800471c <__smakebuf_r>:
 800471c:	898b      	ldrh	r3, [r1, #12]
 800471e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004720:	079d      	lsls	r5, r3, #30
 8004722:	4606      	mov	r6, r0
 8004724:	460c      	mov	r4, r1
 8004726:	d507      	bpl.n	8004738 <__smakebuf_r+0x1c>
 8004728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	2301      	movs	r3, #1
 8004732:	6163      	str	r3, [r4, #20]
 8004734:	b002      	add	sp, #8
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	ab01      	add	r3, sp, #4
 800473a:	466a      	mov	r2, sp
 800473c:	f7ff ffc8 	bl	80046d0 <__swhatbuf_r>
 8004740:	9900      	ldr	r1, [sp, #0]
 8004742:	4605      	mov	r5, r0
 8004744:	4630      	mov	r0, r6
 8004746:	f7ff f865 	bl	8003814 <_malloc_r>
 800474a:	b948      	cbnz	r0, 8004760 <__smakebuf_r+0x44>
 800474c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004750:	059a      	lsls	r2, r3, #22
 8004752:	d4ef      	bmi.n	8004734 <__smakebuf_r+0x18>
 8004754:	f023 0303 	bic.w	r3, r3, #3
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	e7e3      	b.n	8004728 <__smakebuf_r+0xc>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	6020      	str	r0, [r4, #0]
 8004764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	9b00      	ldr	r3, [sp, #0]
 800476c:	6163      	str	r3, [r4, #20]
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	6120      	str	r0, [r4, #16]
 8004772:	b15b      	cbz	r3, 800478c <__smakebuf_r+0x70>
 8004774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004778:	4630      	mov	r0, r6
 800477a:	f000 f81d 	bl	80047b8 <_isatty_r>
 800477e:	b128      	cbz	r0, 800478c <__smakebuf_r+0x70>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	431d      	orrs	r5, r3
 8004790:	81a5      	strh	r5, [r4, #12]
 8004792:	e7cf      	b.n	8004734 <__smakebuf_r+0x18>

08004794 <_fstat_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	; (80047b4 <_fstat_r+0x20>)
 8004798:	2300      	movs	r3, #0
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	f7fd fa94 	bl	8001cce <_fstat>
 80047a6:	1c43      	adds	r3, r0, #1
 80047a8:	d102      	bne.n	80047b0 <_fstat_r+0x1c>
 80047aa:	682b      	ldr	r3, [r5, #0]
 80047ac:	b103      	cbz	r3, 80047b0 <_fstat_r+0x1c>
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	bd38      	pop	{r3, r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	2000032c 	.word	0x2000032c

080047b8 <_isatty_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d06      	ldr	r5, [pc, #24]	; (80047d4 <_isatty_r+0x1c>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	f7fd fa93 	bl	8001cee <_isatty>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_isatty_r+0x1a>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_isatty_r+0x1a>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	2000032c 	.word	0x2000032c

080047d8 <_init>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	bf00      	nop
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr

080047e4 <_fini>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr
